---
asyncapi: 3.0.0
id: 'pionix:de:everest:display_message_API'
info:
  title: "EVerest API definition for display messages"
  version: 1.0.1
  description: >-
    API for EVerest api clients implementing display message.

  license:
    name: Apache-2.0
    url: https://opensource.org/licenses/Apache-2.0
  tags:
    - name: EVerest
    - name: display_message
servers:
  default:
    pathname: 'everest_api/1.0/display_message/{module_id}'
    host: 'localhost:1883'
    description: default local MQTT
    protocol: mqtt
    variables:
      module_id:
        description: The ID of the module as defined in the EVerest config file.
defaultContentType: application/json

channels:
  receive_request_set_display_message:
    address: 'e2m/set_display_message'
    messages:
      receive_request_set_display_message:
        $ref: '#/components/messages/receive_request_set_display_message'
  send_reply_set_display_message:
    address: null
    messages:
      send_reply_set_display_message:
        $ref: '#/components/messages/send_reply_set_display_message'
  receive_request_get_display_message:
    address: 'e2m/get_display_message'
    messages:
      receive_request_get_display_message:
        $ref: '#/components/messages/receive_request_get_display_message'
  send_reply_get_display_message:
    address: null
    messages:
      send_reply_get_display_message:
        $ref: '#/components/messages/send_reply_get_display_message'
  receive_request_clear_display_message:
    address: 'e2m/clear_display_message'
    messages:
      receive_request_clear_display_message:
        $ref: '#/components/messages/receive_request_clear_display_message'
  send_reply_clear_display_message:
    address: null
    messages:
      send_reply_clear_display_message:
        $ref: '#/components/messages/send_reply_clear_display_message'
  receive_heartbeat:
    address: 'e2m/heartbeat'
    messages:
      receive_heartbeat:
        $ref: '#/components/messages/receive_heartbeat'
  send_communication_check:
    address: 'm2e/communication_check'
    messages:
      send_communication_check:
        $ref: '#/components/messages/send_communication_check'

operations:
  receive_request_set_display_message:
    title: Receive request set display message
    action: receive
    channel:
      $ref: '#/channels/receive_request_set_display_message'
    description: 'Direction: EVerest to Module'
    reply:
      address:
        location: "$message.header#/replyTo"
      channel:
        $ref: '#/channels/send_reply_set_display_message'
  send_reply_set_display_message:
    title: Send reply to request set display messages
    action: send
    channel:
      $ref: '#/channels/send_reply_set_display_message'

  receive_request_get_display_message:
    title: Receive request get display message
    action: receive
    channel:
      $ref: '#/channels/receive_request_get_display_message'
    description: 'Direction: EVerest to Module'
    reply:
      address:
        location: "$message.header#/replyTo"
      channel:
        $ref: '#/channels/send_reply_get_display_message'
  send_reply_get_display_message:
    title: Send reply to request get display messages
    action: send
    channel:
      $ref: '#/channels/send_reply_get_display_message'

  receive_request_clear_display_message:
    title: Receive request clear display message
    action: receive
    channel:
      $ref: '#/channels/receive_request_clear_display_message'
    description: 'Direction: EVerest to Module'
    reply:
      address:
        location: "$message.header#/replyTo"
      channel:
        $ref: '#/channels/send_reply_clear_display_message'
  send_reply_clear_display_message:
    title: Send reply to request clear display messages
    action: send
    channel:
      $ref: '#/channels/send_reply_clear_display_message'

  receive_heartbeat:
    title: Receive heatbeat
    action: receive
    channel:
      $ref: '#/channels/receive_heartbeat'
  send_communication_check:
    title: Send communication check
    action: send
    channel:
      $ref : '#/channels/send_communication_check'


components:
  messages:
    receive_request_set_display_message:
      title: 'Request set display message'
      summary: 'Request to set a display message'
      contentType: application/json
      payload:
        type: object
        properties:
          headers:
            type: object
            properties:
              replyTo:  # Address for the request to reply to
                type: string
                description: Address to send the response to.
          payload:
            $ref: '#/components/schemas/SetDisplayMessageRequest'
    send_reply_set_display_message:
      title: 'Reply set display message'
      summary: 'Reply to a request to set adisplay message'
      contentType: application/json
      payload:
        type: object
        $ref: '#/components/schemas/SetDisplayMessageResponse'
      examples:
        - summary: ""
          payload:
            status: "Accepted"
            status_info: "string"
    receive_request_get_display_message:
      title: 'Request get display message'
      summary: 'Request to get a display message'
      contentType: application/json
      payload:
        type: object
        properties:
          headers:
            type: object
            properties:
              replyTo:  # Address for the request to reply to
                type: string
                description: Address to send the response to.
          payload:
            $ref: '#/components/schemas/GetDisplayMessageRequest'
    send_reply_get_display_message:
      title: 'Reply get display message'
      summary: 'Reply to a request to get adisplay message'
      contentType: application/json
      payload:
        type: object
        $ref: '#/components/schemas/GetDisplayMessageResponse'
      examples:
        - summary: ""
          payload:
            status_info: string
            messages:
            - id: 0
              priority: AlwaysFront
              state: Charging
              timestamp_from: '2019-08-24T14:15:22Z'
              timestamp_to: '2019-08-24T14:15:22Z'
              session_id: string
              message:
                format: ASCII
                language: string
                content: string
              qr_code: string
    receive_request_clear_display_message:
      title: 'Request clear display message'
      summary: 'Request to clear a display message'
      contentType: application/json
      payload:
        type: object
        properties:
          headers:
            type: object
            properties:
              replyTo:  # Address for the request to reply to
                type: string
                description: Address to send the response to.
          payload:
            $ref: '#/components/schemas/ClearDisplayMessageRequest'
    send_reply_clear_display_message:
      title: 'Reply clear display message'
      summary: 'Reply to a request to clear adisplay message'
      contentType: application/json
      payload:
        type: object
        $ref: '#/components/schemas/ClearDisplayMessageResponse'
      examples:
        - summary: ""
          payload:
            status: "Accepted"
            status_info: "string"
    receive_heartbeat:
      title: Receive heartbeat
      summary: Heartbeat produced by EVerest as configured via cfg_heartbeat_interval_ms in the EVerest configuration
      contentType: application/json
    send_communication_check:
      title: Send communication check
      summary: Signal to EVerest that communication is good or check shall be stopped
      contentType: application/json
      payload:
        $ref: '#/components/schemas/CommunicationCheck'
      examples:
        - summary: "CommunicationCheck"
          payload:
            true


  schemas:
    MessagePriorityEnum:
      description: >-
        Priority of the message.
        AlwaysFront is the highest priority: The Charging Station SHALL show this message at the configured moment,
        regardless of other installed messages. Hence, it shall not cycle it with other messages and the Charging
        Stationâ€™s own message shall not override this message. When a newer message with this MessagePriority is received,
        this message is replaced.
        InFront: The Charging Station SHALL show this message at the configured moment, regardless of the normal cycle of
        messages. If there are multiple InFront message that must be shown at the same time, they must be cycled.
        NormalCycle: Show this message in the cycle of messages.
      type: string
      enum:
        - AlwaysFront
        - InFront
        - NormalCycle
    MessageStateEnum:
      description: During what state the message should be shown
      type: string
      enum:
        - Charging
        - Faulted
        - Idle
        - Unavailable
        - Suspending
        - Discharging
    DisplayMessageStatusEnum:
      description: Response on a display message request
      type: string
      enum:
        - Accepted
        - NotSupportedMessageFormat
        - Rejected
        - NotSupportedPriority
        - NotSupportedState
        - UnknownTransaction
    ClearMessageResponseEnum:
      description: Response on a clear display message request
      type: string
      enum:
        - Accepted
        - Unknown
    MessageContent:
      description: Contains message details
      required:
        - content
      type: object
      additionalProperties: true
      properties:
        format:
          type: string
          $ref: '#/components/schemas/MessageFormat'
        language:
          type: string
        content:
          type: string
    MessageFormat:
      description: Format of the message to be displayed
      type: string
      enum:
        - ASCII
        - HTML
        - URI
        - UTF8
    Identifier_type:
      description: The identifier type
      type: string
      enum:
        - IdToken
        - SessionId
        - TransactionId
    DisplayMessage:
      description: Message to show on a display
      type: object
      additionalProperties: true
      properties:
        id:
          description: The message id
          type: integer
        priority:
          description: >-
            Priority of the message. For OCPP 2.0.1, this is a required property. But as we also use this interface
            outside of ocpp, for other messages it is not required and if priority is not given, we assume it is the
            lowest priority, 'NormalCycle'. When priority is 'AlwaysFront' and there already is a message with priority
            'AlwaysFront', the last received message shall replace the already existing message.
          type: string
          $ref: '#/components/schemas/MessagePriorityEnum'
        state:
          description: >-
            During what state should this message be shown. When omitted, this message should be shown in any state of
            the Charging Station
          type: string
          $ref: '#/components/schemas/MessageStateEnum'
        timestamp_from:
          description: >-
            From what date-time should this message be shown. If omitted: directly.
          type: string
          format: date-time
        timestamp_to:
          description: >-
            Until what date-time should this message be shown, after this date/time this message SHALL be removed. If
            omitted, message can be shown 'forever' (until it is specifically removed).
          type: string
          format: date-time
        identifier_id:
          description: >-
            To which user / during which session shall this message be shown. User can be identified by id token
            (when the session did not start yet), session id or transaction id. identifier_type will hold the
            type of identifier_id (default session id). Message SHALL be removed by the Charging Station
            after session has ended. If omitted, message is not tight to a session.
          type: string
          minLength: 0
          maxLength: 36
        identifier_type:
          description: >-
            The type of 'identifier_id'. If omitted, type will be session id.
          type: string
          $ref: '#/components/schemas/Identifier_type'
        message:
          type: object
          description: The message to show
          $ref: '#/components/schemas/MessageContent'
        qr_code:
          description: >-
            QR Code to scan for more information.
          type: string
      required:
        - message
    SetDisplayMessageRequest:
      description: >-
        Request to set a list of display messages.
      type: array
      items:
        type: object
        $ref: '#/components/schemas/DisplayMessage'
    SetDisplayMessageResponse:
      description: >-
        Response to the set display message request.
      type: object
      additionalProperties: true
      properties:
        status:
          description: Whether the charging station is able to display the message
          $ref: '#/components/schemas/DisplayMessageStatusEnum'
          type: object
        status_info:
          description: Detailed status information
          type: string
      required:
        - status
    GetDisplayMessageRequest:
      description: >-
        Request display messages. The properties are filtered. If the properties are omitted, there will be no filter
        applied (if all properties are omitted, all stored display messages will be returned).
      type: object
      additionalProperties: true
      properties:
        id:
          description: If provided the Charging Station shall return Display Messages of the given ids.
          type: array
          items:
            type: integer
        priority:
          description: If provided the Charging Station shall return Display Messages with the given priority only.
          $ref: '#/components/schemas/MessagePriorityEnum'
          type: string
        state:
          description: If provided the Charging Station shall return Display Messages with the given state only.
          $ref: '#/components/schemas/MessageStateEnum'
          type: string
    GetDisplayMessageResponse:
      description: Reponse on the 'get display message' request. Will return the requested display messages.
      type: object
      additionalProperties: true
      properties:
        status_info:
          description: Detailed status information
          type: string
        messages:
          description: Requested messages, if any
          type: array
          items:
            type: object
            $ref: '#/components/schemas/DisplayMessage'
    ClearDisplayMessageRequest:
      description: Request to remove a specific display message.
      type: object
      properties:
        id:
          description: Id of display message that should be removed from the charging station
          type: integer
      required:
        - id
    ClearDisplayMessageResponse:
      description: Response on the clear display message request.
      type: object
      additionalProperties: true
      properties:
        status:
          type: object
          $ref: '#/components/schemas/ClearMessageResponseEnum'
        status_info:
          type: string
      required:
        - status
    CommunicationCheck:
      type: boolean
      description: "Send 'true' at least every 'cfg_communication_check_to_s' seconds to signal module is alive. Send 'false' to stop communication check'"
