@startuml
participant Powermeter
participant EVSE_Manager
participant OCPP
participant CSMS

title Stopping transaction in error

== Transaction is running ==

Powermeter -> Powermeter: livemeasure FAILED

!pragma teoz true
Powermeter -> EVSE_Manager: raiseError (CommunicationFault)
& Powermeter -> OCPP: raiseError (CommunicationFault)

EVSE_Manager->EVSE_Manager: Pause charging

OCPP->CSMS: StatusNotification.req(Faulted)
return StatusNotification.conf

Powermeter -> Powermeter: livemeasure OK
Powermeter -> Powermeter: get Powermeter status
!pragma teoz true
Powermeter -> EVSE_Manager: clearError (CommunicationFault)
& Powermeter -> OCPP: clearError (CommunicationFault)

== User stops transaction while powermeter communication error ==

EVSE_Manager->EVSE_Manager: Stop Transaction internally
EVSE_Manager->EVSE_Manager: Wait for powermeter to clear error
note right of EVSE_Manager: Note that EvseManager does not stop transaction immediately

Powermeter -> EVSE_Manager: clearError (CommunicationFault)
& Powermeter -> OCPP: clearError (CommunicationFault)

alt successful case
EVSE_Manager -> Powermeter: stopTransaction (ID)
return stopTransaction Response (OK/OCMF)
EVSE_Manager -> OCPP: Event(TransactionFinished(ID/stopReason:PowerLoss/OCMF))

OCPP->CSMS: StopTransaction.req(ID/stopReason:PowerLoss/OCMF)
return StopTransaction.conf

else stopTransaction failing due to subsequent power loss
EVSE_Manager -> Powermeter: stopTransaction (ID)
Powermeter -> Powermeter: livemeasure FAILED
Powermeter -> EVSE_Manager: stopTransaction Response (FAIL)
EVSE_Manager -> OCPP: Event(TransactionFinished(ID/stopReason:PowerLoss/OCMF))

note right of OCPP: In this case we can't stop the transaction including the OCMF
OCPP->CSMS: StopTransaction.req(ID/stopReason:PowerLoss)
return StopTransaction.conf
end

@enduml
