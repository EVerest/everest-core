extern crate serde_yaml;
use serde::Deserialize;
use std::collections::BTreeMap;
use argh::FromArgs;

#[derive(Debug, Deserialize)]
struct DependencyDescriptor {
    git: String,
    git_tag: String,
    options: Option<Vec<String>>,
    cmake_condition: Option<String>,
}

#[derive(FromArgs)]
/// A tool to parse dependencies.yaml and generate bazel dependencies file
struct Args {
    /// path to dependencies.yaml
    #[argh(positional)]
    path: String,
}

fn sanitize_name(name: &str) -> String {
    name.replace("-", "_")
}

fn main() {
    let args: Args = argh::from_env();
    eprintln!("Reading dependencies from {}", args.path);
    let deps = std::fs::read_to_string(args.path).unwrap();
    let deps: BTreeMap<String, DependencyDescriptor> = serde_yaml::from_str(&deps).unwrap();

    println!("# This file is generated by dep_tool. Do not edit manually.");
    println!("# To regenerate this file, after changing dependencies.yaml run:");
    println!("#");
    println!("#     bazel run //:update");
    println!("");
    println!("EVEREST_DEPS = struct(");
    for (name, dep) in deps {
        println!("\t# {}", name);
        println!("\t{}_repo = \"{}\",", sanitize_name(&name), dep.git);
        // Check if git_tag looks like a commit sha
        let is_hex = dep.git_tag.chars().all(|c| c.is_ascii_hexdigit());
        if dep.git_tag.len() == 40 && is_hex {
            println!("\t{}_commit = \"{}\",", sanitize_name(&name), dep.git_tag);
            println!("\t{}_tag = None,", sanitize_name(&name));
        } else {
            if is_hex {
                // This message will be printed into the generated file
                // and will show up in the PR/diff.
                println!("\t# Warning: {} git_tag is hexadecimal but not 40 characters long.", name);
                println!("\t# Assuming it's a tag.");
                println!("\t# If it's a commit, please use the full 40-character commit hash.");
            }
            println!("\t{}_commit = None,", sanitize_name(&name));
            println!("\t{}_tag = \"{}\",", sanitize_name(&name), dep.git_tag);
        }
        println!("");
    }
    println!(")");
}
