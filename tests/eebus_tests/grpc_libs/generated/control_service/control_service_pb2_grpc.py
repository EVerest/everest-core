# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from control_service import messages_pb2 as control__service_dot_messages__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in control_service/control_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ControlServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartService = channel.unary_unary(
                '/control_service.ControlService/StartService',
                request_serializer=control__service_dot_messages__pb2.EmptyRequest.SerializeToString,
                response_deserializer=control__service_dot_messages__pb2.EmptyResponse.FromString,
                _registered_method=True)
        self.StopService = channel.unary_unary(
                '/control_service.ControlService/StopService',
                request_serializer=control__service_dot_messages__pb2.EmptyRequest.SerializeToString,
                response_deserializer=control__service_dot_messages__pb2.EmptyResponse.FromString,
                _registered_method=True)
        self.SetConfig = channel.unary_unary(
                '/control_service.ControlService/SetConfig',
                request_serializer=control__service_dot_messages__pb2.SetConfigRequest.SerializeToString,
                response_deserializer=control__service_dot_messages__pb2.EmptyResponse.FromString,
                _registered_method=True)
        self.StartSetup = channel.unary_unary(
                '/control_service.ControlService/StartSetup',
                request_serializer=control__service_dot_messages__pb2.EmptyRequest.SerializeToString,
                response_deserializer=control__service_dot_messages__pb2.EmptyResponse.FromString,
                _registered_method=True)
        self.AddEntity = channel.unary_unary(
                '/control_service.ControlService/AddEntity',
                request_serializer=control__service_dot_messages__pb2.AddEntityRequest.SerializeToString,
                response_deserializer=control__service_dot_messages__pb2.EmptyResponse.FromString,
                _registered_method=True)
        self.RemoveEntity = channel.unary_unary(
                '/control_service.ControlService/RemoveEntity',
                request_serializer=control__service_dot_messages__pb2.RemoveEntityRequest.SerializeToString,
                response_deserializer=control__service_dot_messages__pb2.EmptyResponse.FromString,
                _registered_method=True)
        self.RegisterRemoteSki = channel.unary_unary(
                '/control_service.ControlService/RegisterRemoteSki',
                request_serializer=control__service_dot_messages__pb2.RegisterRemoteSkiRequest.SerializeToString,
                response_deserializer=control__service_dot_messages__pb2.EmptyResponse.FromString,
                _registered_method=True)
        self.AddUseCase = channel.unary_unary(
                '/control_service.ControlService/AddUseCase',
                request_serializer=control__service_dot_messages__pb2.AddUseCaseRequest.SerializeToString,
                response_deserializer=control__service_dot_messages__pb2.AddUseCaseResponse.FromString,
                _registered_method=True)
        self.SubscribeUseCaseEvents = channel.unary_stream(
                '/control_service.ControlService/SubscribeUseCaseEvents',
                request_serializer=control__service_dot_messages__pb2.SubscribeUseCaseEventsRequest.SerializeToString,
                response_deserializer=control__service_dot_messages__pb2.SubscribeUseCaseEventsResponse.FromString,
                _registered_method=True)


class ControlServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StartService(self, request, context):
        """Starts the EEBus service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopService(self, request, context):
        """Stops the EEBus service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetConfig(self, request, context):
        """Set Config for the EEBus service
        Each parameter is optional. If a parameter is not set, the current value is used.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartSetup(self, request, context):
        """Starts Setup() for the EEBus service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddEntity(self, request, context):
        """Adds a new entity to the EEBus service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveEntity(self, request, context):
        """Removes an entity from the EEBus service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterRemoteSki(self, request, context):
        """Register remote SKI to the EEBus service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddUseCase(self, request, context):
        """Adds an usecase to the EEBus service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeUseCaseEvents(self, request, context):
        """Subscribes to usecase events
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ControlServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartService': grpc.unary_unary_rpc_method_handler(
                    servicer.StartService,
                    request_deserializer=control__service_dot_messages__pb2.EmptyRequest.FromString,
                    response_serializer=control__service_dot_messages__pb2.EmptyResponse.SerializeToString,
            ),
            'StopService': grpc.unary_unary_rpc_method_handler(
                    servicer.StopService,
                    request_deserializer=control__service_dot_messages__pb2.EmptyRequest.FromString,
                    response_serializer=control__service_dot_messages__pb2.EmptyResponse.SerializeToString,
            ),
            'SetConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.SetConfig,
                    request_deserializer=control__service_dot_messages__pb2.SetConfigRequest.FromString,
                    response_serializer=control__service_dot_messages__pb2.EmptyResponse.SerializeToString,
            ),
            'StartSetup': grpc.unary_unary_rpc_method_handler(
                    servicer.StartSetup,
                    request_deserializer=control__service_dot_messages__pb2.EmptyRequest.FromString,
                    response_serializer=control__service_dot_messages__pb2.EmptyResponse.SerializeToString,
            ),
            'AddEntity': grpc.unary_unary_rpc_method_handler(
                    servicer.AddEntity,
                    request_deserializer=control__service_dot_messages__pb2.AddEntityRequest.FromString,
                    response_serializer=control__service_dot_messages__pb2.EmptyResponse.SerializeToString,
            ),
            'RemoveEntity': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveEntity,
                    request_deserializer=control__service_dot_messages__pb2.RemoveEntityRequest.FromString,
                    response_serializer=control__service_dot_messages__pb2.EmptyResponse.SerializeToString,
            ),
            'RegisterRemoteSki': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterRemoteSki,
                    request_deserializer=control__service_dot_messages__pb2.RegisterRemoteSkiRequest.FromString,
                    response_serializer=control__service_dot_messages__pb2.EmptyResponse.SerializeToString,
            ),
            'AddUseCase': grpc.unary_unary_rpc_method_handler(
                    servicer.AddUseCase,
                    request_deserializer=control__service_dot_messages__pb2.AddUseCaseRequest.FromString,
                    response_serializer=control__service_dot_messages__pb2.AddUseCaseResponse.SerializeToString,
            ),
            'SubscribeUseCaseEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeUseCaseEvents,
                    request_deserializer=control__service_dot_messages__pb2.SubscribeUseCaseEventsRequest.FromString,
                    response_serializer=control__service_dot_messages__pb2.SubscribeUseCaseEventsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'control_service.ControlService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('control_service.ControlService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ControlService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StartService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/control_service.ControlService/StartService',
            control__service_dot_messages__pb2.EmptyRequest.SerializeToString,
            control__service_dot_messages__pb2.EmptyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/control_service.ControlService/StopService',
            control__service_dot_messages__pb2.EmptyRequest.SerializeToString,
            control__service_dot_messages__pb2.EmptyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/control_service.ControlService/SetConfig',
            control__service_dot_messages__pb2.SetConfigRequest.SerializeToString,
            control__service_dot_messages__pb2.EmptyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartSetup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/control_service.ControlService/StartSetup',
            control__service_dot_messages__pb2.EmptyRequest.SerializeToString,
            control__service_dot_messages__pb2.EmptyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddEntity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/control_service.ControlService/AddEntity',
            control__service_dot_messages__pb2.AddEntityRequest.SerializeToString,
            control__service_dot_messages__pb2.EmptyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveEntity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/control_service.ControlService/RemoveEntity',
            control__service_dot_messages__pb2.RemoveEntityRequest.SerializeToString,
            control__service_dot_messages__pb2.EmptyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterRemoteSki(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/control_service.ControlService/RegisterRemoteSki',
            control__service_dot_messages__pb2.RegisterRemoteSkiRequest.SerializeToString,
            control__service_dot_messages__pb2.EmptyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddUseCase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/control_service.ControlService/AddUseCase',
            control__service_dot_messages__pb2.AddUseCaseRequest.SerializeToString,
            control__service_dot_messages__pb2.AddUseCaseResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeUseCaseEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/control_service.ControlService/SubscribeUseCaseEvents',
            control__service_dot_messages__pb2.SubscribeUseCaseEventsRequest.SerializeToString,
            control__service_dot_messages__pb2.SubscribeUseCaseEventsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
