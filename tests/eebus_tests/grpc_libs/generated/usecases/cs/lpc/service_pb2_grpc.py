# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from usecases.cs.lpc import messages_pb2 as usecases_dot_cs_dot_lpc_dot_messages__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in usecases/cs/lpc/service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ControllableSystemLPCControlStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ConsumptionLimit = channel.unary_unary(
                '/cs_lpc.ControllableSystemLPCControl/ConsumptionLimit',
                request_serializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.ConsumptionLimitRequest.SerializeToString,
                response_deserializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.ConsumptionLimitResponse.FromString,
                _registered_method=True)
        self.SetConsumptionLimit = channel.unary_unary(
                '/cs_lpc.ControllableSystemLPCControl/SetConsumptionLimit',
                request_serializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.SetConsumptionLimitRequest.SerializeToString,
                response_deserializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.SetConsumptionLimitResponse.FromString,
                _registered_method=True)
        self.PendingConsumptionLimit = channel.unary_unary(
                '/cs_lpc.ControllableSystemLPCControl/PendingConsumptionLimit',
                request_serializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.PendingConsumptionLimitRequest.SerializeToString,
                response_deserializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.PendingConsumptionLimitResponse.FromString,
                _registered_method=True)
        self.ApproveOrDenyConsumptionLimit = channel.unary_unary(
                '/cs_lpc.ControllableSystemLPCControl/ApproveOrDenyConsumptionLimit',
                request_serializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.ApproveOrDenyConsumptionLimitRequest.SerializeToString,
                response_deserializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.ApproveOrDenyConsumptionLimitResponse.FromString,
                _registered_method=True)
        self.FailsafeConsumptionActivePowerLimit = channel.unary_unary(
                '/cs_lpc.ControllableSystemLPCControl/FailsafeConsumptionActivePowerLimit',
                request_serializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.FailsafeConsumptionActivePowerLimitRequest.SerializeToString,
                response_deserializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.FailsafeConsumptionActivePowerLimitResponse.FromString,
                _registered_method=True)
        self.SetFailsafeConsumptionActivePowerLimit = channel.unary_unary(
                '/cs_lpc.ControllableSystemLPCControl/SetFailsafeConsumptionActivePowerLimit',
                request_serializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.SetFailsafeConsumptionActivePowerLimitRequest.SerializeToString,
                response_deserializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.SetFailsafeConsumptionActivePowerLimitResponse.FromString,
                _registered_method=True)
        self.FailsafeDurationMinimum = channel.unary_unary(
                '/cs_lpc.ControllableSystemLPCControl/FailsafeDurationMinimum',
                request_serializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.FailsafeDurationMinimumRequest.SerializeToString,
                response_deserializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.FailsafeDurationMinimumResponse.FromString,
                _registered_method=True)
        self.SetFailsafeDurationMinimum = channel.unary_unary(
                '/cs_lpc.ControllableSystemLPCControl/SetFailsafeDurationMinimum',
                request_serializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.SetFailsafeDurationMinimumRequest.SerializeToString,
                response_deserializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.SetFailsafeDurationMinimumResponse.FromString,
                _registered_method=True)
        self.StartHeartbeat = channel.unary_unary(
                '/cs_lpc.ControllableSystemLPCControl/StartHeartbeat',
                request_serializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.StartHeartbeatRequest.SerializeToString,
                response_deserializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.StartHeartbeatResponse.FromString,
                _registered_method=True)
        self.StopHeartbeat = channel.unary_unary(
                '/cs_lpc.ControllableSystemLPCControl/StopHeartbeat',
                request_serializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.StopHeartbeatRequest.SerializeToString,
                response_deserializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.StopHeartbeatResponse.FromString,
                _registered_method=True)
        self.IsHeartbeatWithinDuration = channel.unary_unary(
                '/cs_lpc.ControllableSystemLPCControl/IsHeartbeatWithinDuration',
                request_serializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.IsHeartbeatWithinDurationRequest.SerializeToString,
                response_deserializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.IsHeartbeatWithinDurationResponse.FromString,
                _registered_method=True)
        self.ConsumptionNominalMax = channel.unary_unary(
                '/cs_lpc.ControllableSystemLPCControl/ConsumptionNominalMax',
                request_serializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.ConsumptionNominalMaxRequest.SerializeToString,
                response_deserializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.ConsumptionNominalMaxResponse.FromString,
                _registered_method=True)
        self.SetConsumptionNominalMax = channel.unary_unary(
                '/cs_lpc.ControllableSystemLPCControl/SetConsumptionNominalMax',
                request_serializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.SetConsumptionNominalMaxRequest.SerializeToString,
                response_deserializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.SetConsumptionNominalMaxResponse.FromString,
                _registered_method=True)


class ControllableSystemLPCControlServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ConsumptionLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetConsumptionLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PendingConsumptionLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ApproveOrDenyConsumptionLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FailsafeConsumptionActivePowerLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetFailsafeConsumptionActivePowerLimit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FailsafeDurationMinimum(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetFailsafeDurationMinimum(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartHeartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopHeartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsHeartbeatWithinDuration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConsumptionNominalMax(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetConsumptionNominalMax(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ControllableSystemLPCControlServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ConsumptionLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.ConsumptionLimit,
                    request_deserializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.ConsumptionLimitRequest.FromString,
                    response_serializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.ConsumptionLimitResponse.SerializeToString,
            ),
            'SetConsumptionLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.SetConsumptionLimit,
                    request_deserializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.SetConsumptionLimitRequest.FromString,
                    response_serializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.SetConsumptionLimitResponse.SerializeToString,
            ),
            'PendingConsumptionLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.PendingConsumptionLimit,
                    request_deserializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.PendingConsumptionLimitRequest.FromString,
                    response_serializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.PendingConsumptionLimitResponse.SerializeToString,
            ),
            'ApproveOrDenyConsumptionLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.ApproveOrDenyConsumptionLimit,
                    request_deserializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.ApproveOrDenyConsumptionLimitRequest.FromString,
                    response_serializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.ApproveOrDenyConsumptionLimitResponse.SerializeToString,
            ),
            'FailsafeConsumptionActivePowerLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.FailsafeConsumptionActivePowerLimit,
                    request_deserializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.FailsafeConsumptionActivePowerLimitRequest.FromString,
                    response_serializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.FailsafeConsumptionActivePowerLimitResponse.SerializeToString,
            ),
            'SetFailsafeConsumptionActivePowerLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.SetFailsafeConsumptionActivePowerLimit,
                    request_deserializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.SetFailsafeConsumptionActivePowerLimitRequest.FromString,
                    response_serializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.SetFailsafeConsumptionActivePowerLimitResponse.SerializeToString,
            ),
            'FailsafeDurationMinimum': grpc.unary_unary_rpc_method_handler(
                    servicer.FailsafeDurationMinimum,
                    request_deserializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.FailsafeDurationMinimumRequest.FromString,
                    response_serializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.FailsafeDurationMinimumResponse.SerializeToString,
            ),
            'SetFailsafeDurationMinimum': grpc.unary_unary_rpc_method_handler(
                    servicer.SetFailsafeDurationMinimum,
                    request_deserializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.SetFailsafeDurationMinimumRequest.FromString,
                    response_serializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.SetFailsafeDurationMinimumResponse.SerializeToString,
            ),
            'StartHeartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.StartHeartbeat,
                    request_deserializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.StartHeartbeatRequest.FromString,
                    response_serializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.StartHeartbeatResponse.SerializeToString,
            ),
            'StopHeartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.StopHeartbeat,
                    request_deserializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.StopHeartbeatRequest.FromString,
                    response_serializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.StopHeartbeatResponse.SerializeToString,
            ),
            'IsHeartbeatWithinDuration': grpc.unary_unary_rpc_method_handler(
                    servicer.IsHeartbeatWithinDuration,
                    request_deserializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.IsHeartbeatWithinDurationRequest.FromString,
                    response_serializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.IsHeartbeatWithinDurationResponse.SerializeToString,
            ),
            'ConsumptionNominalMax': grpc.unary_unary_rpc_method_handler(
                    servicer.ConsumptionNominalMax,
                    request_deserializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.ConsumptionNominalMaxRequest.FromString,
                    response_serializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.ConsumptionNominalMaxResponse.SerializeToString,
            ),
            'SetConsumptionNominalMax': grpc.unary_unary_rpc_method_handler(
                    servicer.SetConsumptionNominalMax,
                    request_deserializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.SetConsumptionNominalMaxRequest.FromString,
                    response_serializer=usecases_dot_cs_dot_lpc_dot_messages__pb2.SetConsumptionNominalMaxResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cs_lpc.ControllableSystemLPCControl', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('cs_lpc.ControllableSystemLPCControl', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ControllableSystemLPCControl(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ConsumptionLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cs_lpc.ControllableSystemLPCControl/ConsumptionLimit',
            usecases_dot_cs_dot_lpc_dot_messages__pb2.ConsumptionLimitRequest.SerializeToString,
            usecases_dot_cs_dot_lpc_dot_messages__pb2.ConsumptionLimitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetConsumptionLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cs_lpc.ControllableSystemLPCControl/SetConsumptionLimit',
            usecases_dot_cs_dot_lpc_dot_messages__pb2.SetConsumptionLimitRequest.SerializeToString,
            usecases_dot_cs_dot_lpc_dot_messages__pb2.SetConsumptionLimitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PendingConsumptionLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cs_lpc.ControllableSystemLPCControl/PendingConsumptionLimit',
            usecases_dot_cs_dot_lpc_dot_messages__pb2.PendingConsumptionLimitRequest.SerializeToString,
            usecases_dot_cs_dot_lpc_dot_messages__pb2.PendingConsumptionLimitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ApproveOrDenyConsumptionLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cs_lpc.ControllableSystemLPCControl/ApproveOrDenyConsumptionLimit',
            usecases_dot_cs_dot_lpc_dot_messages__pb2.ApproveOrDenyConsumptionLimitRequest.SerializeToString,
            usecases_dot_cs_dot_lpc_dot_messages__pb2.ApproveOrDenyConsumptionLimitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FailsafeConsumptionActivePowerLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cs_lpc.ControllableSystemLPCControl/FailsafeConsumptionActivePowerLimit',
            usecases_dot_cs_dot_lpc_dot_messages__pb2.FailsafeConsumptionActivePowerLimitRequest.SerializeToString,
            usecases_dot_cs_dot_lpc_dot_messages__pb2.FailsafeConsumptionActivePowerLimitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetFailsafeConsumptionActivePowerLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cs_lpc.ControllableSystemLPCControl/SetFailsafeConsumptionActivePowerLimit',
            usecases_dot_cs_dot_lpc_dot_messages__pb2.SetFailsafeConsumptionActivePowerLimitRequest.SerializeToString,
            usecases_dot_cs_dot_lpc_dot_messages__pb2.SetFailsafeConsumptionActivePowerLimitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FailsafeDurationMinimum(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cs_lpc.ControllableSystemLPCControl/FailsafeDurationMinimum',
            usecases_dot_cs_dot_lpc_dot_messages__pb2.FailsafeDurationMinimumRequest.SerializeToString,
            usecases_dot_cs_dot_lpc_dot_messages__pb2.FailsafeDurationMinimumResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetFailsafeDurationMinimum(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cs_lpc.ControllableSystemLPCControl/SetFailsafeDurationMinimum',
            usecases_dot_cs_dot_lpc_dot_messages__pb2.SetFailsafeDurationMinimumRequest.SerializeToString,
            usecases_dot_cs_dot_lpc_dot_messages__pb2.SetFailsafeDurationMinimumResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartHeartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cs_lpc.ControllableSystemLPCControl/StartHeartbeat',
            usecases_dot_cs_dot_lpc_dot_messages__pb2.StartHeartbeatRequest.SerializeToString,
            usecases_dot_cs_dot_lpc_dot_messages__pb2.StartHeartbeatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopHeartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cs_lpc.ControllableSystemLPCControl/StopHeartbeat',
            usecases_dot_cs_dot_lpc_dot_messages__pb2.StopHeartbeatRequest.SerializeToString,
            usecases_dot_cs_dot_lpc_dot_messages__pb2.StopHeartbeatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IsHeartbeatWithinDuration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cs_lpc.ControllableSystemLPCControl/IsHeartbeatWithinDuration',
            usecases_dot_cs_dot_lpc_dot_messages__pb2.IsHeartbeatWithinDurationRequest.SerializeToString,
            usecases_dot_cs_dot_lpc_dot_messages__pb2.IsHeartbeatWithinDurationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConsumptionNominalMax(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cs_lpc.ControllableSystemLPCControl/ConsumptionNominalMax',
            usecases_dot_cs_dot_lpc_dot_messages__pb2.ConsumptionNominalMaxRequest.SerializeToString,
            usecases_dot_cs_dot_lpc_dot_messages__pb2.ConsumptionNominalMaxResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetConsumptionNominalMax(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/cs_lpc.ControllableSystemLPCControl/SetConsumptionNominalMax',
            usecases_dot_cs_dot_lpc_dot_messages__pb2.SetConsumptionNominalMaxRequest.SerializeToString,
            usecases_dot_cs_dot_lpc_dot_messages__pb2.SetConsumptionNominalMaxResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
