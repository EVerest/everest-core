/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_MMWCAR_PB_H_INCLUDED
#define PB_MMWCAR_PB_H_INCLUDED
#include <everest/3rd_party/nanopb/pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _ResetReason {
    ResetReason_UNKNOWN = 0,
    ResetReason_USER = 1,
    ResetReason_WDG = 2
} ResetReason;

typedef enum _ConfigHardwareRevisionMajor {
    ConfigHardwareRevisionMajor_HW_MAJOR_REV_UNKNOWN = 0,
    ConfigHardwareRevisionMajor_HW_MAJOR_REV_A = 1
} ConfigHardwareRevisionMajor;

typedef enum _MeasRequestType {
    MeasRequestType_MEAS_UNKNOWN = 0,
    MeasRequestType_AC_INSTANT = 1,
    MeasRequestType_AC_STATISTICS = 2,
    MeasRequestType_DC_INSTANT = 3,
    MeasRequestType_DC_STATISTICS = 4,
    MeasRequestType_BASIC_CHARGE_COMMS_INSTANT = 5,
    MeasRequestType_EDGE_TIMING = 6
} MeasRequestType;

/* Nominal CP states */
typedef enum _CpState {
    CpState_STATE_A = 0,
    CpState_STATE_B = 1,
    CpState_STATE_C = 2,
    CpState_STATE_D = 3,
    CpState_STATE_E = 4,
    CpState_STATE_F = 5
} CpState;

/* Nominal PP states */
typedef enum _PpState {
    PpState_STATE_NC = 0,
    PpState_STATE_13A = 1,
    PpState_STATE_20A = 2,
    PpState_STATE_32A = 3,
    PpState_STATE_70A = 4,
    PpState_STATE_FAULT = 5
} PpState;

typedef enum _ACPhase {
    ACPhase_Ua = 0,
    ACPhase_Ub = 1,
    ACPhase_Uc = 2
} ACPhase;

typedef enum _Adc_Channel {
    Adc_Channel_CP = 0,
    Adc_Channel_PP = 1,
    Adc_Channel_DC = 2
} Adc_Channel;

/* Struct definitions */
typedef struct _KeepAlive {
    uint32_t time_stamp;
    ConfigHardwareRevisionMajor hw_revision_major;
    uint32_t hw_revision_minor;
    char sw_version_string[51];
} KeepAlive;

typedef struct _ACMeasInstant {
    double Ua;
    double Ub;
    double Uc;
} ACMeasInstant;

typedef struct _ACPhaseStats {
    double min;
    double max;
    double avg;
} ACPhaseStats;

typedef struct _ACMeasStats {
    bool has_Ua;
    ACPhaseStats Ua;
    bool has_Ub;
    ACPhaseStats Ub;
    bool has_Uc;
    ACPhaseStats Uc;
    uint32_t sample_rate_ms;
    uint32_t window_len_samples;
} ACMeasStats;

typedef struct _DCMeasInstant {
    double bus_voltage;
} DCMeasInstant;

typedef struct _BootConfigRequest { /* TODO */
    char dummy_field;
} BootConfigRequest;

typedef struct _BootConfigResponse { /* TODO */
    char dummy_field;
} BootConfigResponse;

typedef struct _ErrorFlags { /* TODO */
    char dummy_field;
} ErrorFlags;

typedef struct _CalibrationValues {
    uint16_t atm90_ua_gain;
    uint16_t atm90_ub_gain;
    uint16_t atm90_uc_gain;
    uint16_t atm90_ua_offset;
    uint16_t atm90_ub_offset;
    uint16_t atm90_uc_offset;
    double adc_cp_gain;
    double adc_cp_offset;
    double adc_pp_gain;
    double adc_pp_offset;
    double adc_dc_gain;
    double adc_dc_offset;
    bool adc_cp_use_cal;
    bool adc_pp_use_cal;
    bool adc_dc_use_cal;
    uint16_t cp_load_9V_dac_val;
    uint16_t cp_load_6V_dac_val;
    uint16_t cp_load_3V_dac_val;
} CalibrationValues;

typedef struct _AC_Calibration {
    ACPhase phase;
    pb_size_t which_type;
    union {
        bool offset; /* unused for now, MCU will detect calibration on offset by which_type */
        double gain; /* use this value as reference voltage passed to calibration routine */
    } type;
} AC_Calibration;

typedef struct _CalibrationRequest {
    pb_size_t which_calibration_type;
    union {
        AC_Calibration ac;
    } calibration_type;
} CalibrationRequest;

typedef struct _CalibrationResponse {
    pb_size_t which_calibration_type;
    union {
        AC_Calibration ac;
    } calibration_type;
    uint32_t value;
} CalibrationResponse;

typedef struct _BasicChargingCommMeasInstant {
    bool pwm_running;
    float pwm_duty;
    float pwm_freq;
    float cp_voltage_hi;
    float cp_voltage_lo;
    PpState pp;
    uint32_t cp_state; /* 0: A, 1: B, 2: C, 3: D, 4: E, 5: F, 6: DF, 7: UNKNOWN */
    bool cp_load_en;
    bool cp_short_to_gnd_en;
    bool cp_diode_fault_en;
} BasicChargingCommMeasInstant;

typedef struct _Adc_Raw {
    Adc_Channel channel;
    uint32_t value;
} Adc_Raw;

typedef struct _DacSweepResponse {
    double cp_voltage;
    uint16_t dac_input;
} DacSweepResponse;

typedef struct _CpLUT {
    pb_size_t dac_values_count;
    uint16_t dac_values[108];
} CpLUT;

typedef struct _EdgeTimingMeasArguments {
    uint16_t num_periods;
    bool force_start;
} EdgeTimingMeasArguments;

typedef struct _MeasRequest {
    MeasRequestType type;
    pb_size_t which_arguments;
    union {
        EdgeTimingMeasArguments edge_timing;
    } arguments;
} MeasRequest;

/* This container message is send from EVerest to MCU and may contain any allowed message in that direction. */
typedef struct _EverestToMcu {
    pb_size_t which_payload;
    union {
        bool reset;
        KeepAlive keep_alive;
        BootConfigResponse config_response;
        MeasRequest request_measurement;
        bool get_calibration;
        CalibrationValues set_calibration;
        CalibrationRequest request_calibration;
        CpState set_cp_state;
        Adc_Raw get_adc_raw;
        bool sweep_cp;
        CpLUT set_cp_lut;
        float set_cp_voltage;
        bool set_cp_load_en;
        bool set_cp_short_to_gnd_en;
        bool set_cp_diode_fault_en;
    } payload;
} EverestToMcu;

typedef struct _EdgeTimingSingleEdgeResult {
    uint32_t duration_max_ns;
    uint32_t duration_avg_ns;
    uint32_t duration_min_ns;
} EdgeTimingSingleEdgeResult;

typedef struct _EdgeTimingMeasResult {
    bool has_rising;
    EdgeTimingSingleEdgeResult rising;
    bool has_falling;
    EdgeTimingSingleEdgeResult falling;
    uint16_t num_periods;
    CpState cp_state;
} EdgeTimingMeasResult;

/* This container message is send from MCU to EVerest and may contain any allowed message in that direction. */
typedef struct _McuToEverest {
    pb_size_t which_payload;
    union {
        ResetReason reset;
        KeepAlive keep_alive;
        BootConfigRequest config_request;
        ACMeasInstant ac_meas_instant;
        ACMeasStats ac_meas_statistics;
        CalibrationValues calibration_values;
        CalibrationResponse response_calibration;
        BasicChargingCommMeasInstant basic_charging_meas_instant;
        Adc_Raw adc_raw_response;
        DCMeasInstant dc_meas_instant;
        DacSweepResponse sweep_cp_response;
        EdgeTimingMeasResult edge_timing_statistics;
    } payload;
} McuToEverest;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _ResetReason_MIN ResetReason_UNKNOWN
#define _ResetReason_MAX ResetReason_WDG
#define _ResetReason_ARRAYSIZE ((ResetReason)(ResetReason_WDG+1))

#define _ConfigHardwareRevisionMajor_MIN ConfigHardwareRevisionMajor_HW_MAJOR_REV_UNKNOWN
#define _ConfigHardwareRevisionMajor_MAX ConfigHardwareRevisionMajor_HW_MAJOR_REV_A
#define _ConfigHardwareRevisionMajor_ARRAYSIZE ((ConfigHardwareRevisionMajor)(ConfigHardwareRevisionMajor_HW_MAJOR_REV_A+1))

#define _MeasRequestType_MIN MeasRequestType_MEAS_UNKNOWN
#define _MeasRequestType_MAX MeasRequestType_EDGE_TIMING
#define _MeasRequestType_ARRAYSIZE ((MeasRequestType)(MeasRequestType_EDGE_TIMING+1))

#define _CpState_MIN CpState_STATE_A
#define _CpState_MAX CpState_STATE_F
#define _CpState_ARRAYSIZE ((CpState)(CpState_STATE_F+1))

#define _PpState_MIN PpState_STATE_NC
#define _PpState_MAX PpState_STATE_FAULT
#define _PpState_ARRAYSIZE ((PpState)(PpState_STATE_FAULT+1))

#define _ACPhase_MIN ACPhase_Ua
#define _ACPhase_MAX ACPhase_Uc
#define _ACPhase_ARRAYSIZE ((ACPhase)(ACPhase_Uc+1))

#define _Adc_Channel_MIN Adc_Channel_CP
#define _Adc_Channel_MAX Adc_Channel_DC
#define _Adc_Channel_ARRAYSIZE ((Adc_Channel)(Adc_Channel_DC+1))

#define EverestToMcu_payload_set_cp_state_ENUMTYPE CpState

#define McuToEverest_payload_reset_ENUMTYPE ResetReason

#define KeepAlive_hw_revision_major_ENUMTYPE ConfigHardwareRevisionMajor

#define MeasRequest_type_ENUMTYPE MeasRequestType











#define AC_Calibration_phase_ENUMTYPE ACPhase

#define BasicChargingCommMeasInstant_pp_ENUMTYPE PpState

#define Adc_Raw_channel_ENUMTYPE Adc_Channel





#define EdgeTimingMeasResult_cp_state_ENUMTYPE CpState


/* Initializer values for message structs */
#define EverestToMcu_init_default                {0, {0}}
#define McuToEverest_init_default                {0, {_ResetReason_MIN}}
#define KeepAlive_init_default                   {0, _ConfigHardwareRevisionMajor_MIN, 0, ""}
#define MeasRequest_init_default                 {_MeasRequestType_MIN, 0, {EdgeTimingMeasArguments_init_default}}
#define ACMeasInstant_init_default               {0, 0, 0}
#define ACMeasStats_init_default                 {false, ACPhaseStats_init_default, false, ACPhaseStats_init_default, false, ACPhaseStats_init_default, 0, 0}
#define ACPhaseStats_init_default                {0, 0, 0}
#define DCMeasInstant_init_default               {0}
#define BootConfigRequest_init_default           {0}
#define BootConfigResponse_init_default          {0}
#define ErrorFlags_init_default                  {0}
#define CalibrationRequest_init_default          {0, {AC_Calibration_init_default}}
#define CalibrationResponse_init_default         {0, {AC_Calibration_init_default}, 0}
#define CalibrationValues_init_default           {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define AC_Calibration_init_default              {_ACPhase_MIN, 0, {0}}
#define BasicChargingCommMeasInstant_init_default {0, 0, 0, 0, 0, _PpState_MIN, 0, 0, 0, 0}
#define Adc_Raw_init_default                     {_Adc_Channel_MIN, 0}
#define DacSweepResponse_init_default            {0, 0}
#define CpLUT_init_default                       {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}
#define EdgeTimingMeasArguments_init_default     {0, 0}
#define EdgeTimingSingleEdgeResult_init_default  {0, 0, 0}
#define EdgeTimingMeasResult_init_default        {false, EdgeTimingSingleEdgeResult_init_default, false, EdgeTimingSingleEdgeResult_init_default, 0, _CpState_MIN}
#define EverestToMcu_init_zero                   {0, {0}}
#define McuToEverest_init_zero                   {0, {_ResetReason_MIN}}
#define KeepAlive_init_zero                      {0, _ConfigHardwareRevisionMajor_MIN, 0, ""}
#define MeasRequest_init_zero                    {_MeasRequestType_MIN, 0, {EdgeTimingMeasArguments_init_zero}}
#define ACMeasInstant_init_zero                  {0, 0, 0}
#define ACMeasStats_init_zero                    {false, ACPhaseStats_init_zero, false, ACPhaseStats_init_zero, false, ACPhaseStats_init_zero, 0, 0}
#define ACPhaseStats_init_zero                   {0, 0, 0}
#define DCMeasInstant_init_zero                  {0}
#define BootConfigRequest_init_zero              {0}
#define BootConfigResponse_init_zero             {0}
#define ErrorFlags_init_zero                     {0}
#define CalibrationRequest_init_zero             {0, {AC_Calibration_init_zero}}
#define CalibrationResponse_init_zero            {0, {AC_Calibration_init_zero}, 0}
#define CalibrationValues_init_zero              {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define AC_Calibration_init_zero                 {_ACPhase_MIN, 0, {0}}
#define BasicChargingCommMeasInstant_init_zero   {0, 0, 0, 0, 0, _PpState_MIN, 0, 0, 0, 0}
#define Adc_Raw_init_zero                        {_Adc_Channel_MIN, 0}
#define DacSweepResponse_init_zero               {0, 0}
#define CpLUT_init_zero                          {0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}
#define EdgeTimingMeasArguments_init_zero        {0, 0}
#define EdgeTimingSingleEdgeResult_init_zero     {0, 0, 0}
#define EdgeTimingMeasResult_init_zero           {false, EdgeTimingSingleEdgeResult_init_zero, false, EdgeTimingSingleEdgeResult_init_zero, 0, _CpState_MIN}

/* Field tags (for use in manual encoding/decoding) */
#define KeepAlive_time_stamp_tag                 1
#define KeepAlive_hw_revision_major_tag          2
#define KeepAlive_hw_revision_minor_tag          3
#define KeepAlive_sw_version_string_tag          4
#define ACMeasInstant_Ua_tag                     1
#define ACMeasInstant_Ub_tag                     2
#define ACMeasInstant_Uc_tag                     3
#define ACPhaseStats_min_tag                     1
#define ACPhaseStats_max_tag                     2
#define ACPhaseStats_avg_tag                     3
#define ACMeasStats_Ua_tag                       1
#define ACMeasStats_Ub_tag                       2
#define ACMeasStats_Uc_tag                       3
#define ACMeasStats_sample_rate_ms_tag           4
#define ACMeasStats_window_len_samples_tag       5
#define DCMeasInstant_bus_voltage_tag            1
#define CalibrationValues_atm90_ua_gain_tag      1
#define CalibrationValues_atm90_ub_gain_tag      2
#define CalibrationValues_atm90_uc_gain_tag      3
#define CalibrationValues_atm90_ua_offset_tag    4
#define CalibrationValues_atm90_ub_offset_tag    5
#define CalibrationValues_atm90_uc_offset_tag    6
#define CalibrationValues_adc_cp_gain_tag        7
#define CalibrationValues_adc_cp_offset_tag      8
#define CalibrationValues_adc_pp_gain_tag        9
#define CalibrationValues_adc_pp_offset_tag      10
#define CalibrationValues_adc_dc_gain_tag        11
#define CalibrationValues_adc_dc_offset_tag      12
#define CalibrationValues_adc_cp_use_cal_tag     13
#define CalibrationValues_adc_pp_use_cal_tag     14
#define CalibrationValues_adc_dc_use_cal_tag     15
#define CalibrationValues_cp_load_9V_dac_val_tag 100
#define CalibrationValues_cp_load_6V_dac_val_tag 101
#define CalibrationValues_cp_load_3V_dac_val_tag 102
#define AC_Calibration_phase_tag                 1
#define AC_Calibration_offset_tag                2
#define AC_Calibration_gain_tag                  3
#define CalibrationRequest_ac_tag                1
#define CalibrationResponse_ac_tag               1
#define CalibrationResponse_value_tag            2
#define BasicChargingCommMeasInstant_pwm_running_tag 1
#define BasicChargingCommMeasInstant_pwm_duty_tag 2
#define BasicChargingCommMeasInstant_pwm_freq_tag 3
#define BasicChargingCommMeasInstant_cp_voltage_hi_tag 4
#define BasicChargingCommMeasInstant_cp_voltage_lo_tag 5
#define BasicChargingCommMeasInstant_pp_tag      6
#define BasicChargingCommMeasInstant_cp_state_tag 7
#define BasicChargingCommMeasInstant_cp_load_en_tag 8
#define BasicChargingCommMeasInstant_cp_short_to_gnd_en_tag 9
#define BasicChargingCommMeasInstant_cp_diode_fault_en_tag 10
#define Adc_Raw_channel_tag                      1
#define Adc_Raw_value_tag                        2
#define DacSweepResponse_cp_voltage_tag          1
#define DacSweepResponse_dac_input_tag           2
#define CpLUT_dac_values_tag                     1
#define EdgeTimingMeasArguments_num_periods_tag  1
#define EdgeTimingMeasArguments_force_start_tag  2
#define MeasRequest_type_tag                     1
#define MeasRequest_edge_timing_tag              2
#define EverestToMcu_reset_tag                   1
#define EverestToMcu_keep_alive_tag              2
#define EverestToMcu_config_response_tag         3
#define EverestToMcu_request_measurement_tag     4
#define EverestToMcu_get_calibration_tag         5
#define EverestToMcu_set_calibration_tag         6
#define EverestToMcu_request_calibration_tag     7
#define EverestToMcu_set_cp_state_tag            8
#define EverestToMcu_get_adc_raw_tag             9
#define EverestToMcu_sweep_cp_tag                10
#define EverestToMcu_set_cp_lut_tag              11
#define EverestToMcu_set_cp_voltage_tag          12
#define EverestToMcu_set_cp_load_en_tag          13
#define EverestToMcu_set_cp_short_to_gnd_en_tag  14
#define EverestToMcu_set_cp_diode_fault_en_tag   15
#define EdgeTimingSingleEdgeResult_duration_max_ns_tag 1
#define EdgeTimingSingleEdgeResult_duration_avg_ns_tag 2
#define EdgeTimingSingleEdgeResult_duration_min_ns_tag 3
#define EdgeTimingMeasResult_rising_tag          1
#define EdgeTimingMeasResult_falling_tag         2
#define EdgeTimingMeasResult_num_periods_tag     3
#define EdgeTimingMeasResult_cp_state_tag        4
#define McuToEverest_reset_tag                   1
#define McuToEverest_keep_alive_tag              2
#define McuToEverest_config_request_tag          3
#define McuToEverest_ac_meas_instant_tag         4
#define McuToEverest_ac_meas_statistics_tag      5
#define McuToEverest_calibration_values_tag      6
#define McuToEverest_response_calibration_tag    7
#define McuToEverest_basic_charging_meas_instant_tag 8
#define McuToEverest_adc_raw_response_tag        9
#define McuToEverest_dc_meas_instant_tag         10
#define McuToEverest_sweep_cp_response_tag       11
#define McuToEverest_edge_timing_statistics_tag  12

/* Struct field encoding specification for nanopb */
#define EverestToMcu_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    BOOL,     (payload,reset,payload.reset),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,keep_alive,payload.keep_alive),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,config_response,payload.config_response),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,request_measurement,payload.request_measurement),   4) \
X(a, STATIC,   ONEOF,    BOOL,     (payload,get_calibration,payload.get_calibration),   5) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,set_calibration,payload.set_calibration),   6) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,request_calibration,payload.request_calibration),   7) \
X(a, STATIC,   ONEOF,    UENUM,    (payload,set_cp_state,payload.set_cp_state),   8) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,get_adc_raw,payload.get_adc_raw),   9) \
X(a, STATIC,   ONEOF,    BOOL,     (payload,sweep_cp,payload.sweep_cp),  10) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,set_cp_lut,payload.set_cp_lut),  11) \
X(a, STATIC,   ONEOF,    FLOAT,    (payload,set_cp_voltage,payload.set_cp_voltage),  12) \
X(a, STATIC,   ONEOF,    BOOL,     (payload,set_cp_load_en,payload.set_cp_load_en),  13) \
X(a, STATIC,   ONEOF,    BOOL,     (payload,set_cp_short_to_gnd_en,payload.set_cp_short_to_gnd_en),  14) \
X(a, STATIC,   ONEOF,    BOOL,     (payload,set_cp_diode_fault_en,payload.set_cp_diode_fault_en),  15)
#define EverestToMcu_CALLBACK NULL
#define EverestToMcu_DEFAULT NULL
#define EverestToMcu_payload_keep_alive_MSGTYPE KeepAlive
#define EverestToMcu_payload_config_response_MSGTYPE BootConfigResponse
#define EverestToMcu_payload_request_measurement_MSGTYPE MeasRequest
#define EverestToMcu_payload_set_calibration_MSGTYPE CalibrationValues
#define EverestToMcu_payload_request_calibration_MSGTYPE CalibrationRequest
#define EverestToMcu_payload_get_adc_raw_MSGTYPE Adc_Raw
#define EverestToMcu_payload_set_cp_lut_MSGTYPE CpLUT

#define McuToEverest_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    UENUM,    (payload,reset,payload.reset),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,keep_alive,payload.keep_alive),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,config_request,payload.config_request),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,ac_meas_instant,payload.ac_meas_instant),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,ac_meas_statistics,payload.ac_meas_statistics),   5) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,calibration_values,payload.calibration_values),   6) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,response_calibration,payload.response_calibration),   7) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,basic_charging_meas_instant,payload.basic_charging_meas_instant),   8) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,adc_raw_response,payload.adc_raw_response),   9) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,dc_meas_instant,payload.dc_meas_instant),  10) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,sweep_cp_response,payload.sweep_cp_response),  11) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,edge_timing_statistics,payload.edge_timing_statistics),  12)
#define McuToEverest_CALLBACK NULL
#define McuToEverest_DEFAULT NULL
#define McuToEverest_payload_keep_alive_MSGTYPE KeepAlive
#define McuToEverest_payload_config_request_MSGTYPE BootConfigRequest
#define McuToEverest_payload_ac_meas_instant_MSGTYPE ACMeasInstant
#define McuToEverest_payload_ac_meas_statistics_MSGTYPE ACMeasStats
#define McuToEverest_payload_calibration_values_MSGTYPE CalibrationValues
#define McuToEverest_payload_response_calibration_MSGTYPE CalibrationResponse
#define McuToEverest_payload_basic_charging_meas_instant_MSGTYPE BasicChargingCommMeasInstant
#define McuToEverest_payload_adc_raw_response_MSGTYPE Adc_Raw
#define McuToEverest_payload_dc_meas_instant_MSGTYPE DCMeasInstant
#define McuToEverest_payload_sweep_cp_response_MSGTYPE DacSweepResponse
#define McuToEverest_payload_edge_timing_statistics_MSGTYPE EdgeTimingMeasResult

#define KeepAlive_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   time_stamp,        1) \
X(a, STATIC,   SINGULAR, UENUM,    hw_revision_major,   2) \
X(a, STATIC,   SINGULAR, UINT32,   hw_revision_minor,   3) \
X(a, STATIC,   SINGULAR, STRING,   sw_version_string,   4)
#define KeepAlive_CALLBACK NULL
#define KeepAlive_DEFAULT NULL

#define MeasRequest_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    type,              1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (arguments,edge_timing,arguments.edge_timing),   2)
#define MeasRequest_CALLBACK NULL
#define MeasRequest_DEFAULT NULL
#define MeasRequest_arguments_edge_timing_MSGTYPE EdgeTimingMeasArguments

#define ACMeasInstant_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, DOUBLE,   Ua,                1) \
X(a, STATIC,   SINGULAR, DOUBLE,   Ub,                2) \
X(a, STATIC,   SINGULAR, DOUBLE,   Uc,                3)
#define ACMeasInstant_CALLBACK NULL
#define ACMeasInstant_DEFAULT NULL

#define ACMeasStats_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  Ua,                1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  Ub,                2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  Uc,                3) \
X(a, STATIC,   SINGULAR, UINT32,   sample_rate_ms,    4) \
X(a, STATIC,   SINGULAR, UINT32,   window_len_samples,   5)
#define ACMeasStats_CALLBACK NULL
#define ACMeasStats_DEFAULT NULL
#define ACMeasStats_Ua_MSGTYPE ACPhaseStats
#define ACMeasStats_Ub_MSGTYPE ACPhaseStats
#define ACMeasStats_Uc_MSGTYPE ACPhaseStats

#define ACPhaseStats_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, DOUBLE,   min,               1) \
X(a, STATIC,   SINGULAR, DOUBLE,   max,               2) \
X(a, STATIC,   SINGULAR, DOUBLE,   avg,               3)
#define ACPhaseStats_CALLBACK NULL
#define ACPhaseStats_DEFAULT NULL

#define DCMeasInstant_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, DOUBLE,   bus_voltage,       1)
#define DCMeasInstant_CALLBACK NULL
#define DCMeasInstant_DEFAULT NULL

#define BootConfigRequest_FIELDLIST(X, a) \

#define BootConfigRequest_CALLBACK NULL
#define BootConfigRequest_DEFAULT NULL

#define BootConfigResponse_FIELDLIST(X, a) \

#define BootConfigResponse_CALLBACK NULL
#define BootConfigResponse_DEFAULT NULL

#define ErrorFlags_FIELDLIST(X, a) \

#define ErrorFlags_CALLBACK NULL
#define ErrorFlags_DEFAULT NULL

#define CalibrationRequest_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (calibration_type,ac,calibration_type.ac),   1)
#define CalibrationRequest_CALLBACK NULL
#define CalibrationRequest_DEFAULT NULL
#define CalibrationRequest_calibration_type_ac_MSGTYPE AC_Calibration

#define CalibrationResponse_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (calibration_type,ac,calibration_type.ac),   1) \
X(a, STATIC,   SINGULAR, UINT32,   value,             2)
#define CalibrationResponse_CALLBACK NULL
#define CalibrationResponse_DEFAULT NULL
#define CalibrationResponse_calibration_type_ac_MSGTYPE AC_Calibration

#define CalibrationValues_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   atm90_ua_gain,     1) \
X(a, STATIC,   SINGULAR, UINT32,   atm90_ub_gain,     2) \
X(a, STATIC,   SINGULAR, UINT32,   atm90_uc_gain,     3) \
X(a, STATIC,   SINGULAR, UINT32,   atm90_ua_offset,   4) \
X(a, STATIC,   SINGULAR, UINT32,   atm90_ub_offset,   5) \
X(a, STATIC,   SINGULAR, UINT32,   atm90_uc_offset,   6) \
X(a, STATIC,   SINGULAR, DOUBLE,   adc_cp_gain,       7) \
X(a, STATIC,   SINGULAR, DOUBLE,   adc_cp_offset,     8) \
X(a, STATIC,   SINGULAR, DOUBLE,   adc_pp_gain,       9) \
X(a, STATIC,   SINGULAR, DOUBLE,   adc_pp_offset,    10) \
X(a, STATIC,   SINGULAR, DOUBLE,   adc_dc_gain,      11) \
X(a, STATIC,   SINGULAR, DOUBLE,   adc_dc_offset,    12) \
X(a, STATIC,   SINGULAR, BOOL,     adc_cp_use_cal,   13) \
X(a, STATIC,   SINGULAR, BOOL,     adc_pp_use_cal,   14) \
X(a, STATIC,   SINGULAR, BOOL,     adc_dc_use_cal,   15) \
X(a, STATIC,   SINGULAR, UINT32,   cp_load_9V_dac_val, 100) \
X(a, STATIC,   SINGULAR, UINT32,   cp_load_6V_dac_val, 101) \
X(a, STATIC,   SINGULAR, UINT32,   cp_load_3V_dac_val, 102)
#define CalibrationValues_CALLBACK NULL
#define CalibrationValues_DEFAULT NULL

#define AC_Calibration_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    phase,             1) \
X(a, STATIC,   ONEOF,    BOOL,     (type,offset,type.offset),   2) \
X(a, STATIC,   ONEOF,    DOUBLE,   (type,gain,type.gain),   3)
#define AC_Calibration_CALLBACK NULL
#define AC_Calibration_DEFAULT NULL

#define BasicChargingCommMeasInstant_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     pwm_running,       1) \
X(a, STATIC,   SINGULAR, FLOAT,    pwm_duty,          2) \
X(a, STATIC,   SINGULAR, FLOAT,    pwm_freq,          3) \
X(a, STATIC,   SINGULAR, FLOAT,    cp_voltage_hi,     4) \
X(a, STATIC,   SINGULAR, FLOAT,    cp_voltage_lo,     5) \
X(a, STATIC,   SINGULAR, UENUM,    pp,                6) \
X(a, STATIC,   SINGULAR, UINT32,   cp_state,          7) \
X(a, STATIC,   SINGULAR, BOOL,     cp_load_en,        8) \
X(a, STATIC,   SINGULAR, BOOL,     cp_short_to_gnd_en,   9) \
X(a, STATIC,   SINGULAR, BOOL,     cp_diode_fault_en,  10)
#define BasicChargingCommMeasInstant_CALLBACK NULL
#define BasicChargingCommMeasInstant_DEFAULT NULL

#define Adc_Raw_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    channel,           1) \
X(a, STATIC,   SINGULAR, UINT32,   value,             2)
#define Adc_Raw_CALLBACK NULL
#define Adc_Raw_DEFAULT NULL

#define DacSweepResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, DOUBLE,   cp_voltage,        1) \
X(a, STATIC,   SINGULAR, UINT32,   dac_input,         2)
#define DacSweepResponse_CALLBACK NULL
#define DacSweepResponse_DEFAULT NULL

#define CpLUT_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, UINT32,   dac_values,        1)
#define CpLUT_CALLBACK NULL
#define CpLUT_DEFAULT NULL

#define EdgeTimingMeasArguments_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   num_periods,       1) \
X(a, STATIC,   SINGULAR, BOOL,     force_start,       2)
#define EdgeTimingMeasArguments_CALLBACK NULL
#define EdgeTimingMeasArguments_DEFAULT NULL

#define EdgeTimingSingleEdgeResult_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   duration_max_ns,   1) \
X(a, STATIC,   SINGULAR, UINT32,   duration_avg_ns,   2) \
X(a, STATIC,   SINGULAR, UINT32,   duration_min_ns,   3)
#define EdgeTimingSingleEdgeResult_CALLBACK NULL
#define EdgeTimingSingleEdgeResult_DEFAULT NULL

#define EdgeTimingMeasResult_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  rising,            1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  falling,           2) \
X(a, STATIC,   SINGULAR, UINT32,   num_periods,       3) \
X(a, STATIC,   SINGULAR, UENUM,    cp_state,          4)
#define EdgeTimingMeasResult_CALLBACK NULL
#define EdgeTimingMeasResult_DEFAULT NULL
#define EdgeTimingMeasResult_rising_MSGTYPE EdgeTimingSingleEdgeResult
#define EdgeTimingMeasResult_falling_MSGTYPE EdgeTimingSingleEdgeResult

extern const pb_msgdesc_t EverestToMcu_msg;
extern const pb_msgdesc_t McuToEverest_msg;
extern const pb_msgdesc_t KeepAlive_msg;
extern const pb_msgdesc_t MeasRequest_msg;
extern const pb_msgdesc_t ACMeasInstant_msg;
extern const pb_msgdesc_t ACMeasStats_msg;
extern const pb_msgdesc_t ACPhaseStats_msg;
extern const pb_msgdesc_t DCMeasInstant_msg;
extern const pb_msgdesc_t BootConfigRequest_msg;
extern const pb_msgdesc_t BootConfigResponse_msg;
extern const pb_msgdesc_t ErrorFlags_msg;
extern const pb_msgdesc_t CalibrationRequest_msg;
extern const pb_msgdesc_t CalibrationResponse_msg;
extern const pb_msgdesc_t CalibrationValues_msg;
extern const pb_msgdesc_t AC_Calibration_msg;
extern const pb_msgdesc_t BasicChargingCommMeasInstant_msg;
extern const pb_msgdesc_t Adc_Raw_msg;
extern const pb_msgdesc_t DacSweepResponse_msg;
extern const pb_msgdesc_t CpLUT_msg;
extern const pb_msgdesc_t EdgeTimingMeasArguments_msg;
extern const pb_msgdesc_t EdgeTimingSingleEdgeResult_msg;
extern const pb_msgdesc_t EdgeTimingMeasResult_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define EverestToMcu_fields &EverestToMcu_msg
#define McuToEverest_fields &McuToEverest_msg
#define KeepAlive_fields &KeepAlive_msg
#define MeasRequest_fields &MeasRequest_msg
#define ACMeasInstant_fields &ACMeasInstant_msg
#define ACMeasStats_fields &ACMeasStats_msg
#define ACPhaseStats_fields &ACPhaseStats_msg
#define DCMeasInstant_fields &DCMeasInstant_msg
#define BootConfigRequest_fields &BootConfigRequest_msg
#define BootConfigResponse_fields &BootConfigResponse_msg
#define ErrorFlags_fields &ErrorFlags_msg
#define CalibrationRequest_fields &CalibrationRequest_msg
#define CalibrationResponse_fields &CalibrationResponse_msg
#define CalibrationValues_fields &CalibrationValues_msg
#define AC_Calibration_fields &AC_Calibration_msg
#define BasicChargingCommMeasInstant_fields &BasicChargingCommMeasInstant_msg
#define Adc_Raw_fields &Adc_Raw_msg
#define DacSweepResponse_fields &DacSweepResponse_msg
#define CpLUT_fields &CpLUT_msg
#define EdgeTimingMeasArguments_fields &EdgeTimingMeasArguments_msg
#define EdgeTimingSingleEdgeResult_fields &EdgeTimingSingleEdgeResult_msg
#define EdgeTimingMeasResult_fields &EdgeTimingMeasResult_msg

/* Maximum encoded size of messages (where known) */
#define ACMeasInstant_size                       27
#define ACMeasStats_size                         99
#define ACPhaseStats_size                        27
#define AC_Calibration_size                      11
#define Adc_Raw_size                             8
#define BasicChargingCommMeasInstant_size        36
#define BootConfigRequest_size                   0
#define BootConfigResponse_size                  0
#define CalibrationRequest_size                  13
#define CalibrationResponse_size                 19
#define CalibrationValues_size                   99
#define CpLUT_size                               432
#define DCMeasInstant_size                       9
#define DacSweepResponse_size                    13
#define EdgeTimingMeasArguments_size             6
#define EdgeTimingMeasResult_size                46
#define EdgeTimingSingleEdgeResult_size          18
#define ErrorFlags_size                          0
#define EverestToMcu_size                        435
#define KeepAlive_size                           66
#define MMWCAR_PB_H_MAX_SIZE                     EverestToMcu_size
#define McuToEverest_size                        101
#define MeasRequest_size                         10

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
