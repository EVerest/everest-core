/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.5 */

#ifndef PB_HI2LO_PB_H_INCLUDED
#define PB_HI2LO_PB_H_INCLUDED
#include <pb.h>
#include "common.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _Disable { 
    char dummy_field;
} Disable;

typedef struct _Enable { 
    char dummy_field;
} Enable;

typedef struct _ForceUnlock { 
    char dummy_field;
} ForceUnlock;

typedef struct _PauseCharging { 
    char dummy_field;
} PauseCharging;

typedef struct _Reset { 
    char dummy_field;
} Reset;

typedef struct _Restart { 
    char dummy_field;
} Restart;

typedef struct _ResumeCharging { 
    char dummy_field;
} ResumeCharging;

typedef struct _AllowPowerOn { 
    bool p; 
} AllowPowerOn;

typedef struct _EnableRCD { 
    bool e; 
} EnableRCD;

typedef struct _EnableSimulation { 
    bool s; 
} EnableSimulation;

typedef struct _FirmwareUpdate { 
    bool invoke_rom_bootloader; 
} FirmwareUpdate;

typedef struct _KeepAliveHi { 
    uint32_t time_stamp; 
    uint32_t hw_type; 
    uint32_t hw_revision; 
    uint32_t protocol_version_major; 
    uint32_t protocol_version_minor; 
    char sw_version_string[51]; 
} KeepAliveHi;

typedef struct _Replug { 
    uint32_t time; 
} Replug;

typedef struct _SetAuth { 
    char userid[51]; 
} SetAuth;

typedef struct _SetControlMode { 
    InterfaceControlMode control_mode; 
} SetControlMode;

typedef struct _SetCountryCode { 
    char iso3166_alpha2_code[11]; 
} SetCountryCode;

typedef struct _SetHasVentilation { 
    bool v; 
} SetHasVentilation;

typedef struct _SetMaxCurrent { 
    float ampere; 
} SetMaxCurrent;

typedef struct _SetPWM { 
    int32_t mode; /* 0: OFF, 1: ON, 2: F */
    float duty_cycle; 
} SetPWM;

typedef struct _SetThreePhases { 
    bool n; 
} SetThreePhases;

typedef struct _SimulationData { 
    float cp_voltage; 
    float pp_resistor; 
    float currentL1; 
    float currentL2; 
    float currentL3; 
    float currentN; 
    float voltageL1; 
    float voltageL2; 
    float voltageL3; 
    float freqL1; 
    float freqL2; 
    float freqL3; 
    float rcd_current; 
    bool diode_fail; 
    bool error_e; 
} SimulationData;

typedef struct _SwitchThreePhasesWhileCharging { 
    bool n; 
} SwitchThreePhasesWhileCharging;

/* This container message is send from Hi Level to Low level and may contain any allowed message in that direction. */
typedef struct _HiToLo { 
    /* Common/configuration messages */
    pb_size_t which_payload;
    union {
        SetMaxCurrent set_max_current;
        SetThreePhases set_three_phases;
        SetHasVentilation set_has_ventilation;
        SetCountryCode set_country_code;
        Enable enable;
        Disable disable;
        SetAuth set_auth;
        SwitchThreePhasesWhileCharging switch_three_phases_while_charging;
        PauseCharging pause_charging;
        ResumeCharging resume_charging;
        EnableRCD enable_rcd;
        KeepAliveHi keep_alive;
        Restart restart;
        FirmwareUpdate firmware_update;
        EnableSimulation enable_simulation;
        SimulationData simulation_data;
        SetControlMode set_control_mode;
        SetPWM set_pwm;
        AllowPowerOn allow_power_on;
        ForceUnlock force_unlock;
        Reset reset;
        Replug replug;
    } payload; 
} HiToLo;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define HiToLo_init_default                      {0, {SetMaxCurrent_init_default}}
#define AllowPowerOn_init_default                {0}
#define SetPWM_init_default                      {0, 0}
#define FirmwareUpdate_init_default              {0}
#define EnableSimulation_init_default            {0}
#define SimulationData_init_default              {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define KeepAliveHi_init_default                 {0, 0, 0, 0, 0, ""}
#define SetMaxCurrent_init_default               {0}
#define Replug_init_default                      {0}
#define SetThreePhases_init_default              {0}
#define EnableRCD_init_default                   {0}
#define SetHasVentilation_init_default           {0}
#define SetCountryCode_init_default              {""}
#define SetControlMode_init_default              {_InterfaceControlMode_MIN}
#define SetAuth_init_default                     {""}
#define Enable_init_default                      {0}
#define Disable_init_default                     {0}
#define Reset_init_default                       {0}
#define SwitchThreePhasesWhileCharging_init_default {0}
#define PauseCharging_init_default               {0}
#define ResumeCharging_init_default              {0}
#define Restart_init_default                     {0}
#define ForceUnlock_init_default                 {0}
#define HiToLo_init_zero                         {0, {SetMaxCurrent_init_zero}}
#define AllowPowerOn_init_zero                   {0}
#define SetPWM_init_zero                         {0, 0}
#define FirmwareUpdate_init_zero                 {0}
#define EnableSimulation_init_zero               {0}
#define SimulationData_init_zero                 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define KeepAliveHi_init_zero                    {0, 0, 0, 0, 0, ""}
#define SetMaxCurrent_init_zero                  {0}
#define Replug_init_zero                         {0}
#define SetThreePhases_init_zero                 {0}
#define EnableRCD_init_zero                      {0}
#define SetHasVentilation_init_zero              {0}
#define SetCountryCode_init_zero                 {""}
#define SetControlMode_init_zero                 {_InterfaceControlMode_MIN}
#define SetAuth_init_zero                        {""}
#define Enable_init_zero                         {0}
#define Disable_init_zero                        {0}
#define Reset_init_zero                          {0}
#define SwitchThreePhasesWhileCharging_init_zero {0}
#define PauseCharging_init_zero                  {0}
#define ResumeCharging_init_zero                 {0}
#define Restart_init_zero                        {0}
#define ForceUnlock_init_zero                    {0}

/* Field tags (for use in manual encoding/decoding) */
#define AllowPowerOn_p_tag                       1
#define EnableRCD_e_tag                          1
#define EnableSimulation_s_tag                   1
#define FirmwareUpdate_invoke_rom_bootloader_tag 1
#define KeepAliveHi_time_stamp_tag               1
#define KeepAliveHi_hw_type_tag                  2
#define KeepAliveHi_hw_revision_tag              3
#define KeepAliveHi_protocol_version_major_tag   4
#define KeepAliveHi_protocol_version_minor_tag   5
#define KeepAliveHi_sw_version_string_tag        6
#define Replug_time_tag                          1
#define SetAuth_userid_tag                       1
#define SetControlMode_control_mode_tag          1
#define SetCountryCode_iso3166_alpha2_code_tag   1
#define SetHasVentilation_v_tag                  1
#define SetMaxCurrent_ampere_tag                 1
#define SetPWM_mode_tag                          1
#define SetPWM_duty_cycle_tag                    2
#define SetThreePhases_n_tag                     1
#define SimulationData_cp_voltage_tag            1
#define SimulationData_pp_resistor_tag           2
#define SimulationData_currentL1_tag             3
#define SimulationData_currentL2_tag             4
#define SimulationData_currentL3_tag             5
#define SimulationData_currentN_tag              6
#define SimulationData_voltageL1_tag             7
#define SimulationData_voltageL2_tag             8
#define SimulationData_voltageL3_tag             9
#define SimulationData_freqL1_tag                10
#define SimulationData_freqL2_tag                11
#define SimulationData_freqL3_tag                12
#define SimulationData_rcd_current_tag           13
#define SimulationData_diode_fail_tag            14
#define SimulationData_error_e_tag               15
#define SwitchThreePhasesWhileCharging_n_tag     1
#define HiToLo_set_max_current_tag               1
#define HiToLo_set_three_phases_tag              2
#define HiToLo_set_has_ventilation_tag           3
#define HiToLo_set_country_code_tag              4
#define HiToLo_enable_tag                        6
#define HiToLo_disable_tag                       7
#define HiToLo_set_auth_tag                      8
#define HiToLo_switch_three_phases_while_charging_tag 9
#define HiToLo_pause_charging_tag                10
#define HiToLo_resume_charging_tag               11
#define HiToLo_enable_rcd_tag                    12
#define HiToLo_keep_alive_tag                    13
#define HiToLo_restart_tag                       14
#define HiToLo_firmware_update_tag               16
#define HiToLo_enable_simulation_tag             17
#define HiToLo_simulation_data_tag               18
#define HiToLo_set_control_mode_tag              19
#define HiToLo_set_pwm_tag                       20
#define HiToLo_allow_power_on_tag                21
#define HiToLo_force_unlock_tag                  22
#define HiToLo_reset_tag                         23
#define HiToLo_replug_tag                        24

/* Struct field encoding specification for nanopb */
#define HiToLo_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,set_max_current,payload.set_max_current),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,set_three_phases,payload.set_three_phases),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,set_has_ventilation,payload.set_has_ventilation),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,set_country_code,payload.set_country_code),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,enable,payload.enable),   6) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,disable,payload.disable),   7) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,set_auth,payload.set_auth),   8) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,switch_three_phases_while_charging,payload.switch_three_phases_while_charging),   9) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,pause_charging,payload.pause_charging),  10) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,resume_charging,payload.resume_charging),  11) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,enable_rcd,payload.enable_rcd),  12) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,keep_alive,payload.keep_alive),  13) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,restart,payload.restart),  14) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,firmware_update,payload.firmware_update),  16) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,enable_simulation,payload.enable_simulation),  17) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,simulation_data,payload.simulation_data),  18) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,set_control_mode,payload.set_control_mode),  19) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,set_pwm,payload.set_pwm),  20) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,allow_power_on,payload.allow_power_on),  21) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,force_unlock,payload.force_unlock),  22) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,reset,payload.reset),  23) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,replug,payload.replug),  24)
#define HiToLo_CALLBACK NULL
#define HiToLo_DEFAULT NULL
#define HiToLo_payload_set_max_current_MSGTYPE SetMaxCurrent
#define HiToLo_payload_set_three_phases_MSGTYPE SetThreePhases
#define HiToLo_payload_set_has_ventilation_MSGTYPE SetHasVentilation
#define HiToLo_payload_set_country_code_MSGTYPE SetCountryCode
#define HiToLo_payload_enable_MSGTYPE Enable
#define HiToLo_payload_disable_MSGTYPE Disable
#define HiToLo_payload_set_auth_MSGTYPE SetAuth
#define HiToLo_payload_switch_three_phases_while_charging_MSGTYPE SwitchThreePhasesWhileCharging
#define HiToLo_payload_pause_charging_MSGTYPE PauseCharging
#define HiToLo_payload_resume_charging_MSGTYPE ResumeCharging
#define HiToLo_payload_enable_rcd_MSGTYPE EnableRCD
#define HiToLo_payload_keep_alive_MSGTYPE KeepAliveHi
#define HiToLo_payload_restart_MSGTYPE Restart
#define HiToLo_payload_firmware_update_MSGTYPE FirmwareUpdate
#define HiToLo_payload_enable_simulation_MSGTYPE EnableSimulation
#define HiToLo_payload_simulation_data_MSGTYPE SimulationData
#define HiToLo_payload_set_control_mode_MSGTYPE SetControlMode
#define HiToLo_payload_set_pwm_MSGTYPE SetPWM
#define HiToLo_payload_allow_power_on_MSGTYPE AllowPowerOn
#define HiToLo_payload_force_unlock_MSGTYPE ForceUnlock
#define HiToLo_payload_reset_MSGTYPE Reset
#define HiToLo_payload_replug_MSGTYPE Replug

#define AllowPowerOn_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     p,                 1)
#define AllowPowerOn_CALLBACK NULL
#define AllowPowerOn_DEFAULT NULL

#define SetPWM_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    mode,              1) \
X(a, STATIC,   SINGULAR, FLOAT,    duty_cycle,        2)
#define SetPWM_CALLBACK NULL
#define SetPWM_DEFAULT NULL

#define FirmwareUpdate_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     invoke_rom_bootloader,   1)
#define FirmwareUpdate_CALLBACK NULL
#define FirmwareUpdate_DEFAULT NULL

#define EnableSimulation_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     s,                 1)
#define EnableSimulation_CALLBACK NULL
#define EnableSimulation_DEFAULT NULL

#define SimulationData_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    cp_voltage,        1) \
X(a, STATIC,   SINGULAR, FLOAT,    pp_resistor,       2) \
X(a, STATIC,   SINGULAR, FLOAT,    currentL1,         3) \
X(a, STATIC,   SINGULAR, FLOAT,    currentL2,         4) \
X(a, STATIC,   SINGULAR, FLOAT,    currentL3,         5) \
X(a, STATIC,   SINGULAR, FLOAT,    currentN,          6) \
X(a, STATIC,   SINGULAR, FLOAT,    voltageL1,         7) \
X(a, STATIC,   SINGULAR, FLOAT,    voltageL2,         8) \
X(a, STATIC,   SINGULAR, FLOAT,    voltageL3,         9) \
X(a, STATIC,   SINGULAR, FLOAT,    freqL1,           10) \
X(a, STATIC,   SINGULAR, FLOAT,    freqL2,           11) \
X(a, STATIC,   SINGULAR, FLOAT,    freqL3,           12) \
X(a, STATIC,   SINGULAR, FLOAT,    rcd_current,      13) \
X(a, STATIC,   SINGULAR, BOOL,     diode_fail,       14) \
X(a, STATIC,   SINGULAR, BOOL,     error_e,          15)
#define SimulationData_CALLBACK NULL
#define SimulationData_DEFAULT NULL

#define KeepAliveHi_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   time_stamp,        1) \
X(a, STATIC,   SINGULAR, UINT32,   hw_type,           2) \
X(a, STATIC,   SINGULAR, UINT32,   hw_revision,       3) \
X(a, STATIC,   SINGULAR, UINT32,   protocol_version_major,   4) \
X(a, STATIC,   SINGULAR, UINT32,   protocol_version_minor,   5) \
X(a, STATIC,   SINGULAR, STRING,   sw_version_string,   6)
#define KeepAliveHi_CALLBACK NULL
#define KeepAliveHi_DEFAULT NULL

#define SetMaxCurrent_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    ampere,            1)
#define SetMaxCurrent_CALLBACK NULL
#define SetMaxCurrent_DEFAULT NULL

#define Replug_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   time,              1)
#define Replug_CALLBACK NULL
#define Replug_DEFAULT NULL

#define SetThreePhases_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     n,                 1)
#define SetThreePhases_CALLBACK NULL
#define SetThreePhases_DEFAULT NULL

#define EnableRCD_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     e,                 1)
#define EnableRCD_CALLBACK NULL
#define EnableRCD_DEFAULT NULL

#define SetHasVentilation_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     v,                 1)
#define SetHasVentilation_CALLBACK NULL
#define SetHasVentilation_DEFAULT NULL

#define SetCountryCode_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   iso3166_alpha2_code,   1)
#define SetCountryCode_CALLBACK NULL
#define SetCountryCode_DEFAULT NULL

#define SetControlMode_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    control_mode,      1)
#define SetControlMode_CALLBACK NULL
#define SetControlMode_DEFAULT NULL

#define SetAuth_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   userid,            1)
#define SetAuth_CALLBACK NULL
#define SetAuth_DEFAULT NULL

#define Enable_FIELDLIST(X, a) \

#define Enable_CALLBACK NULL
#define Enable_DEFAULT NULL

#define Disable_FIELDLIST(X, a) \

#define Disable_CALLBACK NULL
#define Disable_DEFAULT NULL

#define Reset_FIELDLIST(X, a) \

#define Reset_CALLBACK NULL
#define Reset_DEFAULT NULL

#define SwitchThreePhasesWhileCharging_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     n,                 1)
#define SwitchThreePhasesWhileCharging_CALLBACK NULL
#define SwitchThreePhasesWhileCharging_DEFAULT NULL

#define PauseCharging_FIELDLIST(X, a) \

#define PauseCharging_CALLBACK NULL
#define PauseCharging_DEFAULT NULL

#define ResumeCharging_FIELDLIST(X, a) \

#define ResumeCharging_CALLBACK NULL
#define ResumeCharging_DEFAULT NULL

#define Restart_FIELDLIST(X, a) \

#define Restart_CALLBACK NULL
#define Restart_DEFAULT NULL

#define ForceUnlock_FIELDLIST(X, a) \

#define ForceUnlock_CALLBACK NULL
#define ForceUnlock_DEFAULT NULL

extern const pb_msgdesc_t HiToLo_msg;
extern const pb_msgdesc_t AllowPowerOn_msg;
extern const pb_msgdesc_t SetPWM_msg;
extern const pb_msgdesc_t FirmwareUpdate_msg;
extern const pb_msgdesc_t EnableSimulation_msg;
extern const pb_msgdesc_t SimulationData_msg;
extern const pb_msgdesc_t KeepAliveHi_msg;
extern const pb_msgdesc_t SetMaxCurrent_msg;
extern const pb_msgdesc_t Replug_msg;
extern const pb_msgdesc_t SetThreePhases_msg;
extern const pb_msgdesc_t EnableRCD_msg;
extern const pb_msgdesc_t SetHasVentilation_msg;
extern const pb_msgdesc_t SetCountryCode_msg;
extern const pb_msgdesc_t SetControlMode_msg;
extern const pb_msgdesc_t SetAuth_msg;
extern const pb_msgdesc_t Enable_msg;
extern const pb_msgdesc_t Disable_msg;
extern const pb_msgdesc_t Reset_msg;
extern const pb_msgdesc_t SwitchThreePhasesWhileCharging_msg;
extern const pb_msgdesc_t PauseCharging_msg;
extern const pb_msgdesc_t ResumeCharging_msg;
extern const pb_msgdesc_t Restart_msg;
extern const pb_msgdesc_t ForceUnlock_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define HiToLo_fields &HiToLo_msg
#define AllowPowerOn_fields &AllowPowerOn_msg
#define SetPWM_fields &SetPWM_msg
#define FirmwareUpdate_fields &FirmwareUpdate_msg
#define EnableSimulation_fields &EnableSimulation_msg
#define SimulationData_fields &SimulationData_msg
#define KeepAliveHi_fields &KeepAliveHi_msg
#define SetMaxCurrent_fields &SetMaxCurrent_msg
#define Replug_fields &Replug_msg
#define SetThreePhases_fields &SetThreePhases_msg
#define EnableRCD_fields &EnableRCD_msg
#define SetHasVentilation_fields &SetHasVentilation_msg
#define SetCountryCode_fields &SetCountryCode_msg
#define SetControlMode_fields &SetControlMode_msg
#define SetAuth_fields &SetAuth_msg
#define Enable_fields &Enable_msg
#define Disable_fields &Disable_msg
#define Reset_fields &Reset_msg
#define SwitchThreePhasesWhileCharging_fields &SwitchThreePhasesWhileCharging_msg
#define PauseCharging_fields &PauseCharging_msg
#define ResumeCharging_fields &ResumeCharging_msg
#define Restart_fields &Restart_msg
#define ForceUnlock_fields &ForceUnlock_msg

/* Maximum encoded size of messages (where known) */
#define AllowPowerOn_size                        2
#define Disable_size                             0
#define EnableRCD_size                           2
#define EnableSimulation_size                    2
#define Enable_size                              0
#define FirmwareUpdate_size                      2
#define ForceUnlock_size                         0
#define HiToLo_size                              84
#define KeepAliveHi_size                         82
#define PauseCharging_size                       0
#define Replug_size                              6
#define Reset_size                               0
#define Restart_size                             0
#define ResumeCharging_size                      0
#define SetAuth_size                             52
#define SetControlMode_size                      2
#define SetCountryCode_size                      12
#define SetHasVentilation_size                   2
#define SetMaxCurrent_size                       5
#define SetPWM_size                              16
#define SetThreePhases_size                      2
#define SimulationData_size                      69
#define SwitchThreePhasesWhileCharging_size      2

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
