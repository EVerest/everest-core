syntax = "proto3";
import "common.proto";

/*
 This container message is send from Hi Level to Low level and may contain any allowed message in that direction.
*/
message HiToLo {
 oneof payload {
    // Common/configuration messages
    SetControlMode set_control_mode = 19;
    SetThreePhases set_three_phases = 2;
    SetHasVentilation set_has_ventilation = 3;
    SetCountryCode set_country_code = 4;
    Enable enable = 6;
    Disable disable = 7;
    SetAuth set_auth = 8; // available also in low level control to allow for signed meter values
    SwitchThreePhasesWhileCharging switch_three_phases_while_charging = 9;
    EnableRCD enable_rcd = 12;
    KeepAliveHi keep_alive = 13;
    FirmwareUpdate firmware_update = 16;
    ForceUnlock force_unlock = 22;
    // Commands only available in control_mode = 1 (high level control)
    SetMaxCurrent set_max_current = 1;
    PauseCharging pause_charging = 10;
    ResumeCharging resume_charging = 11;
    Restart restart = 14;
    // Commands only available in control_mode = 2 (direct low level control)
    SetPWM set_pwm = 20;
    AllowPowerOn allow_power_on = 21;
    // Commands for HIL simulator
    EnableSimulation enable_simulation = 17;
    SimulationData simulation_data = 18;
    Reset reset = 23;
    Replug replug = 24;
  }
}

message AllowPowerOn {
  bool p = 1;
}

message SetPWM {
  int32 mode = 1; // 0: OFF, 1: ON, 2: F
  float duty_cycle = 2;
}

message FirmwareUpdate {
  bool invoke_rom_bootloader = 1;
}

message EnableSimulation {
  bool s = 1;
}

message SimulationData {
  float cp_voltage = 1;
  float pp_resistor = 2;
  float currentL1 = 3;
  float currentL2 = 4;
  float currentL3 = 5;
  float currentN = 6;
  float voltageL1 = 7;
  float voltageL2 = 8;
  float voltageL3 = 9;
  float freqL1 = 10;
  float freqL2 = 11;
  float freqL3 = 12;
  float rcd_current = 13;
  bool diode_fail = 14;
  bool error_e = 15;
}


message KeepAliveHi {
  uint32 time_stamp = 1;
  uint32 hw_type = 2;
  uint32 hw_revision = 3;
  uint32 protocol_version_major = 4;
  uint32 protocol_version_minor = 5;
  string sw_version_string = 6;

}

message SetMaxCurrent {
  float ampere = 1;
}

message Replug {
  uint32 time = 1;
}

message SetThreePhases {
  bool n = 1;
}

message EnableRCD {
  bool e = 1;
}

message SetHasVentilation {
  bool v = 1;
}

message SetCountryCode {
  string iso3166_alpha2_code = 1;
}

message SetControlMode {
  InterfaceControlMode control_mode = 1;
}

message SetAuth {
  string userid = 1;
}

message Enable { }
message Disable { }
message Reset { }

message SwitchThreePhasesWhileCharging {
  bool n = 1;
}

message PauseCharging { }
message ResumeCharging { }
message Restart { }

message ForceUnlock { }
