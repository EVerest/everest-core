syntax = "proto3";
import "common.proto";

/*
 This container message is send from Lo Level to Hi level and may contain any allowed message in that direction.
*/
message LoToHi {
 oneof payload {
  // Common Packets
  KeepAliveLo keep_alive = 3;
  PowerMeter power_meter = 4;
  DebugUpdate debug_update = 2;
  ResetDone reset_done = 7;
  // Packets only available in control_mode = 1 (high level control)
  StateUpdate state_update = 1;
  // Packets only available in control_mode = 2 (low level control)
  Event event = 6;
  // HIL packets
  SimulationFeedback simulation_feedback = 5;
 }
}

message Event {
  enum InterfaceEvent {
    CAR_PLUGGED_IN = 0;
    CAR_REQUESTED_POWER = 1;
    POWER_ON = 2;
    POWER_OFF = 3;
    CAR_REQUESTED_STOP_POWER = 4;
    CAR_UNPLUGGED = 5;
    ERROR_E = 6;
    ERROR_DF = 7;
    ERROR_RELAIS = 8;
    ERROR_RCD = 9;
    ERROR_VENTILATION_NOT_AVAILABLE = 10;
    ERROR_OVER_CURRENT = 11;
    ENTER_BCD = 12;
    LEAVE_BCD = 13;
    PERMANENT_FAULT = 14;
  }
  InterfaceEvent type = 1;
}

message SimulationFeedback {
  float pwmDutyCycle = 1;
  float evse_pwm_voltage_hi = 2;
  float evse_pwm_voltage_lo = 3;
  bool evse_pwm_running = 4;
  uint32 relais_on = 5;
}

message PowerMeter {
  uint32 time_stamp = 1;
  float vrmsL1 = 2;
  float vrmsL2 = 3;
  float vrmsL3 = 4;
  float irmsL1 = 5;
  float irmsL2 = 6;
  float irmsL3 = 7;
  float irmsN = 8;
  float wattHrL1 = 9;
  float wattHrL2 = 10;
  float wattHrL3 = 11;
  float totalWattHr = 12;
  float tempL1 = 13;
  float tempL2 = 14;
  float tempL3 = 15;
  float tempN = 16;
  float wattL1 = 17;
  float wattL2 = 18;
  float wattL3 = 19;
  float freqL1 = 20;
  float freqL2 = 21;
  float freqL3 = 22;
  bool phaseSeqError = 23;
}

message KeepAliveLo {
  uint32 time_stamp = 1;
  uint32 hw_type = 2;
  uint32 hw_revision = 3;
  uint32 protocol_version_major = 4;
  uint32 protocol_version_minor = 5;
  string sw_version_string = 6;
  float hwcap_max_current = 7;
  float hwcap_min_current = 8;
  uint32 hwcap_max_phase_count = 9;
  uint32 hwcap_min_phase_count = 10;
  bool supports_changing_phases_during_charging = 11;
}

message StateUpdate {
  uint32 time_stamp = 1;
  enum State {
    DISABLED = 0;
    IDLE = 1;
    WAITING_FOR_AUTHENTICATION = 2;
    CHARGING = 3;
    CHARGING_PAUSED_EV = 4;
    CHARGING_PAUSED_EVSE = 5;
    CHARGING_FINSIHED = 6;
    ERROR = 7;
    FAULTED = 8;
  }
  State state = 2;
  oneof state_flags {
    ErrorFlags error_type = 3;
    ChargingFlags charging_flags = 4;
  }
}

message ErrorFlags {
  enum ErrorType {
    ERROR_F = 0;
    ERROR_E = 1;
    ERROR_DF = 2;
    ERROR_RELAIS = 3;
    ERROR_VENTILATION_NOT_AVAILABLE = 4;
    ERROR_RCD = 5;
    ERROR_OVER_CURRENT = 6;
  }
  ErrorType type = 1;
}

message ChargingFlags {
  bool ventilation = 1;
}

message ResetDone {
}

message DebugUpdate {
  uint32 time_stamp = 1;
  float evse_pwm_voltage_hi = 2;
  float evse_pwm_voltage_lo = 3;
  float supply_voltage_12V = 4;
  float supply_voltage_N12V = 5;
  enum LoLevelState {
    DISABLED = 0;
    A = 1;
    B = 2;
    C = 3;
    D = 4;
    E = 5;
    F = 6;
    DF = 7;
  }
  LoLevelState lowlevel_state = 6;
  bool evse_pwm_running = 7;
  bool ev_simplified_mode = 8;
  bool has_ventilation = 9;
  bool ventilated_charging_active = 10;
  bool rcd_reclosing_allowed = 12;
  InterfaceControlMode control_mode = 25;
  bool authorized = 15;
  float cpu_temperature = 17;
  bool rcd_enabled = 18;
  float evse_pp_voltage = 21;
  float max_current_cable = 22;
  uint32 watchdog_reset_count = 23;
  bool simulation = 24;
  float max_current = 26;
  bool use_three_phases = 27;
  float rcd_current = 28;
  bool relais_on = 29;
}

