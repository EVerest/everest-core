// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: control_service/control_service.proto

#include "control_service/control_service.pb.h"
#include "control_service/control_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace control_service {

static const char* ControlService_method_names[] = {
  "/control_service.ControlService/StartService",
  "/control_service.ControlService/StopService",
  "/control_service.ControlService/SetConfig",
  "/control_service.ControlService/StartSetup",
  "/control_service.ControlService/AddEntity",
  "/control_service.ControlService/RemoveEntity",
  "/control_service.ControlService/RegisterRemoteSki",
  "/control_service.ControlService/AddUseCase",
  "/control_service.ControlService/SubscribeUseCaseEvents",
};

std::unique_ptr< ControlService::Stub> ControlService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ControlService::Stub> stub(new ControlService::Stub(channel, options));
  return stub;
}

ControlService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_StartService_(ControlService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopService_(ControlService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetConfig_(ControlService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartSetup_(ControlService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddEntity_(ControlService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveEntity_(ControlService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RegisterRemoteSki_(ControlService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddUseCase_(ControlService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribeUseCaseEvents_(ControlService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status ControlService::Stub::StartService(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::control_service::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::control_service::EmptyRequest, ::control_service::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartService_, context, request, response);
}

void ControlService::Stub::async::StartService(::grpc::ClientContext* context, const ::control_service::EmptyRequest* request, ::control_service::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::control_service::EmptyRequest, ::control_service::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartService_, context, request, response, std::move(f));
}

void ControlService::Stub::async::StartService(::grpc::ClientContext* context, const ::control_service::EmptyRequest* request, ::control_service::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>* ControlService::Stub::PrepareAsyncStartServiceRaw(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::control_service::EmptyResponse, ::control_service::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartService_, context, request);
}

::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>* ControlService::Stub::AsyncStartServiceRaw(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartServiceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ControlService::Stub::StopService(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::control_service::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::control_service::EmptyRequest, ::control_service::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopService_, context, request, response);
}

void ControlService::Stub::async::StopService(::grpc::ClientContext* context, const ::control_service::EmptyRequest* request, ::control_service::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::control_service::EmptyRequest, ::control_service::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopService_, context, request, response, std::move(f));
}

void ControlService::Stub::async::StopService(::grpc::ClientContext* context, const ::control_service::EmptyRequest* request, ::control_service::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>* ControlService::Stub::PrepareAsyncStopServiceRaw(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::control_service::EmptyResponse, ::control_service::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopService_, context, request);
}

::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>* ControlService::Stub::AsyncStopServiceRaw(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopServiceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ControlService::Stub::SetConfig(::grpc::ClientContext* context, const ::control_service::SetConfigRequest& request, ::control_service::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::control_service::SetConfigRequest, ::control_service::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetConfig_, context, request, response);
}

void ControlService::Stub::async::SetConfig(::grpc::ClientContext* context, const ::control_service::SetConfigRequest* request, ::control_service::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::control_service::SetConfigRequest, ::control_service::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetConfig_, context, request, response, std::move(f));
}

void ControlService::Stub::async::SetConfig(::grpc::ClientContext* context, const ::control_service::SetConfigRequest* request, ::control_service::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>* ControlService::Stub::PrepareAsyncSetConfigRaw(::grpc::ClientContext* context, const ::control_service::SetConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::control_service::EmptyResponse, ::control_service::SetConfigRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>* ControlService::Stub::AsyncSetConfigRaw(::grpc::ClientContext* context, const ::control_service::SetConfigRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ControlService::Stub::StartSetup(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::control_service::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::control_service::EmptyRequest, ::control_service::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartSetup_, context, request, response);
}

void ControlService::Stub::async::StartSetup(::grpc::ClientContext* context, const ::control_service::EmptyRequest* request, ::control_service::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::control_service::EmptyRequest, ::control_service::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartSetup_, context, request, response, std::move(f));
}

void ControlService::Stub::async::StartSetup(::grpc::ClientContext* context, const ::control_service::EmptyRequest* request, ::control_service::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartSetup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>* ControlService::Stub::PrepareAsyncStartSetupRaw(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::control_service::EmptyResponse, ::control_service::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartSetup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>* ControlService::Stub::AsyncStartSetupRaw(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartSetupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ControlService::Stub::AddEntity(::grpc::ClientContext* context, const ::control_service::AddEntityRequest& request, ::control_service::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::control_service::AddEntityRequest, ::control_service::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddEntity_, context, request, response);
}

void ControlService::Stub::async::AddEntity(::grpc::ClientContext* context, const ::control_service::AddEntityRequest* request, ::control_service::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::control_service::AddEntityRequest, ::control_service::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddEntity_, context, request, response, std::move(f));
}

void ControlService::Stub::async::AddEntity(::grpc::ClientContext* context, const ::control_service::AddEntityRequest* request, ::control_service::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddEntity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>* ControlService::Stub::PrepareAsyncAddEntityRaw(::grpc::ClientContext* context, const ::control_service::AddEntityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::control_service::EmptyResponse, ::control_service::AddEntityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddEntity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>* ControlService::Stub::AsyncAddEntityRaw(::grpc::ClientContext* context, const ::control_service::AddEntityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddEntityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ControlService::Stub::RemoveEntity(::grpc::ClientContext* context, const ::control_service::RemoveEntityRequest& request, ::control_service::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::control_service::RemoveEntityRequest, ::control_service::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoveEntity_, context, request, response);
}

void ControlService::Stub::async::RemoveEntity(::grpc::ClientContext* context, const ::control_service::RemoveEntityRequest* request, ::control_service::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::control_service::RemoveEntityRequest, ::control_service::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveEntity_, context, request, response, std::move(f));
}

void ControlService::Stub::async::RemoveEntity(::grpc::ClientContext* context, const ::control_service::RemoveEntityRequest* request, ::control_service::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoveEntity_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>* ControlService::Stub::PrepareAsyncRemoveEntityRaw(::grpc::ClientContext* context, const ::control_service::RemoveEntityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::control_service::EmptyResponse, ::control_service::RemoveEntityRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoveEntity_, context, request);
}

::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>* ControlService::Stub::AsyncRemoveEntityRaw(::grpc::ClientContext* context, const ::control_service::RemoveEntityRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoveEntityRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ControlService::Stub::RegisterRemoteSki(::grpc::ClientContext* context, const ::control_service::RegisterRemoteSkiRequest& request, ::control_service::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::control_service::RegisterRemoteSkiRequest, ::control_service::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RegisterRemoteSki_, context, request, response);
}

void ControlService::Stub::async::RegisterRemoteSki(::grpc::ClientContext* context, const ::control_service::RegisterRemoteSkiRequest* request, ::control_service::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::control_service::RegisterRemoteSkiRequest, ::control_service::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterRemoteSki_, context, request, response, std::move(f));
}

void ControlService::Stub::async::RegisterRemoteSki(::grpc::ClientContext* context, const ::control_service::RegisterRemoteSkiRequest* request, ::control_service::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RegisterRemoteSki_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>* ControlService::Stub::PrepareAsyncRegisterRemoteSkiRaw(::grpc::ClientContext* context, const ::control_service::RegisterRemoteSkiRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::control_service::EmptyResponse, ::control_service::RegisterRemoteSkiRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RegisterRemoteSki_, context, request);
}

::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>* ControlService::Stub::AsyncRegisterRemoteSkiRaw(::grpc::ClientContext* context, const ::control_service::RegisterRemoteSkiRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterRemoteSkiRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ControlService::Stub::AddUseCase(::grpc::ClientContext* context, const ::control_service::AddUseCaseRequest& request, ::control_service::AddUseCaseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::control_service::AddUseCaseRequest, ::control_service::AddUseCaseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AddUseCase_, context, request, response);
}

void ControlService::Stub::async::AddUseCase(::grpc::ClientContext* context, const ::control_service::AddUseCaseRequest* request, ::control_service::AddUseCaseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::control_service::AddUseCaseRequest, ::control_service::AddUseCaseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddUseCase_, context, request, response, std::move(f));
}

void ControlService::Stub::async::AddUseCase(::grpc::ClientContext* context, const ::control_service::AddUseCaseRequest* request, ::control_service::AddUseCaseResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AddUseCase_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::control_service::AddUseCaseResponse>* ControlService::Stub::PrepareAsyncAddUseCaseRaw(::grpc::ClientContext* context, const ::control_service::AddUseCaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::control_service::AddUseCaseResponse, ::control_service::AddUseCaseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AddUseCase_, context, request);
}

::grpc::ClientAsyncResponseReader< ::control_service::AddUseCaseResponse>* ControlService::Stub::AsyncAddUseCaseRaw(::grpc::ClientContext* context, const ::control_service::AddUseCaseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAddUseCaseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::control_service::SubscribeUseCaseEventsResponse>* ControlService::Stub::SubscribeUseCaseEventsRaw(::grpc::ClientContext* context, const ::control_service::SubscribeUseCaseEventsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::control_service::SubscribeUseCaseEventsResponse>::Create(channel_.get(), rpcmethod_SubscribeUseCaseEvents_, context, request);
}

void ControlService::Stub::async::SubscribeUseCaseEvents(::grpc::ClientContext* context, const ::control_service::SubscribeUseCaseEventsRequest* request, ::grpc::ClientReadReactor< ::control_service::SubscribeUseCaseEventsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::control_service::SubscribeUseCaseEventsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeUseCaseEvents_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::control_service::SubscribeUseCaseEventsResponse>* ControlService::Stub::AsyncSubscribeUseCaseEventsRaw(::grpc::ClientContext* context, const ::control_service::SubscribeUseCaseEventsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::control_service::SubscribeUseCaseEventsResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeUseCaseEvents_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::control_service::SubscribeUseCaseEventsResponse>* ControlService::Stub::PrepareAsyncSubscribeUseCaseEventsRaw(::grpc::ClientContext* context, const ::control_service::SubscribeUseCaseEventsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::control_service::SubscribeUseCaseEventsResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeUseCaseEvents_, context, request, false, nullptr);
}

ControlService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ControlService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ControlService::Service, ::control_service::EmptyRequest, ::control_service::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::control_service::EmptyRequest* req,
             ::control_service::EmptyResponse* resp) {
               return service->StartService(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ControlService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ControlService::Service, ::control_service::EmptyRequest, ::control_service::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::control_service::EmptyRequest* req,
             ::control_service::EmptyResponse* resp) {
               return service->StopService(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ControlService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ControlService::Service, ::control_service::SetConfigRequest, ::control_service::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::control_service::SetConfigRequest* req,
             ::control_service::EmptyResponse* resp) {
               return service->SetConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ControlService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ControlService::Service, ::control_service::EmptyRequest, ::control_service::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::control_service::EmptyRequest* req,
             ::control_service::EmptyResponse* resp) {
               return service->StartSetup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ControlService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ControlService::Service, ::control_service::AddEntityRequest, ::control_service::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::control_service::AddEntityRequest* req,
             ::control_service::EmptyResponse* resp) {
               return service->AddEntity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ControlService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ControlService::Service, ::control_service::RemoveEntityRequest, ::control_service::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::control_service::RemoveEntityRequest* req,
             ::control_service::EmptyResponse* resp) {
               return service->RemoveEntity(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ControlService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ControlService::Service, ::control_service::RegisterRemoteSkiRequest, ::control_service::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::control_service::RegisterRemoteSkiRequest* req,
             ::control_service::EmptyResponse* resp) {
               return service->RegisterRemoteSki(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ControlService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ControlService::Service, ::control_service::AddUseCaseRequest, ::control_service::AddUseCaseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::control_service::AddUseCaseRequest* req,
             ::control_service::AddUseCaseResponse* resp) {
               return service->AddUseCase(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ControlService_method_names[8],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ControlService::Service, ::control_service::SubscribeUseCaseEventsRequest, ::control_service::SubscribeUseCaseEventsResponse>(
          [](ControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::control_service::SubscribeUseCaseEventsRequest* req,
             ::grpc::ServerWriter<::control_service::SubscribeUseCaseEventsResponse>* writer) {
               return service->SubscribeUseCaseEvents(ctx, req, writer);
             }, this)));
}

ControlService::Service::~Service() {
}

::grpc::Status ControlService::Service::StartService(::grpc::ServerContext* context, const ::control_service::EmptyRequest* request, ::control_service::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ControlService::Service::StopService(::grpc::ServerContext* context, const ::control_service::EmptyRequest* request, ::control_service::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ControlService::Service::SetConfig(::grpc::ServerContext* context, const ::control_service::SetConfigRequest* request, ::control_service::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ControlService::Service::StartSetup(::grpc::ServerContext* context, const ::control_service::EmptyRequest* request, ::control_service::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ControlService::Service::AddEntity(::grpc::ServerContext* context, const ::control_service::AddEntityRequest* request, ::control_service::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ControlService::Service::RemoveEntity(::grpc::ServerContext* context, const ::control_service::RemoveEntityRequest* request, ::control_service::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ControlService::Service::RegisterRemoteSki(::grpc::ServerContext* context, const ::control_service::RegisterRemoteSkiRequest* request, ::control_service::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ControlService::Service::AddUseCase(::grpc::ServerContext* context, const ::control_service::AddUseCaseRequest* request, ::control_service::AddUseCaseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ControlService::Service::SubscribeUseCaseEvents(::grpc::ServerContext* context, const ::control_service::SubscribeUseCaseEventsRequest* request, ::grpc::ServerWriter< ::control_service::SubscribeUseCaseEventsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace control_service

