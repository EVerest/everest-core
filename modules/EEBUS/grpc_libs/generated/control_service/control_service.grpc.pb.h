// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: control_service/control_service.proto
#ifndef GRPC_control_5fservice_2fcontrol_5fservice_2eproto__INCLUDED
#define GRPC_control_5fservice_2fcontrol_5fservice_2eproto__INCLUDED

#include "control_service/control_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace control_service {

class ControlService final {
 public:
  static constexpr char const* service_full_name() {
    return "control_service.ControlService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Starts the EEBus service
    virtual ::grpc::Status StartService(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::control_service::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>> AsyncStartService(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>>(AsyncStartServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>> PrepareAsyncStartService(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>>(PrepareAsyncStartServiceRaw(context, request, cq));
    }
    // Stops the EEBus service
    virtual ::grpc::Status StopService(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::control_service::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>> AsyncStopService(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>>(AsyncStopServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>> PrepareAsyncStopService(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>>(PrepareAsyncStopServiceRaw(context, request, cq));
    }
    // Set Config for the EEBus service
    // Each parameter is optional. If a parameter is not set, the current value is used.
    virtual ::grpc::Status SetConfig(::grpc::ClientContext* context, const ::control_service::SetConfigRequest& request, ::control_service::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>> AsyncSetConfig(::grpc::ClientContext* context, const ::control_service::SetConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>>(AsyncSetConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>> PrepareAsyncSetConfig(::grpc::ClientContext* context, const ::control_service::SetConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>>(PrepareAsyncSetConfigRaw(context, request, cq));
    }
    // Starts Setup() for the EEBus service
    virtual ::grpc::Status StartSetup(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::control_service::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>> AsyncStartSetup(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>>(AsyncStartSetupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>> PrepareAsyncStartSetup(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>>(PrepareAsyncStartSetupRaw(context, request, cq));
    }
    // Adds a new entity to the EEBus service
    virtual ::grpc::Status AddEntity(::grpc::ClientContext* context, const ::control_service::AddEntityRequest& request, ::control_service::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>> AsyncAddEntity(::grpc::ClientContext* context, const ::control_service::AddEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>>(AsyncAddEntityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>> PrepareAsyncAddEntity(::grpc::ClientContext* context, const ::control_service::AddEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>>(PrepareAsyncAddEntityRaw(context, request, cq));
    }
    // Removes an entity from the EEBus service
    virtual ::grpc::Status RemoveEntity(::grpc::ClientContext* context, const ::control_service::RemoveEntityRequest& request, ::control_service::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>> AsyncRemoveEntity(::grpc::ClientContext* context, const ::control_service::RemoveEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>>(AsyncRemoveEntityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>> PrepareAsyncRemoveEntity(::grpc::ClientContext* context, const ::control_service::RemoveEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>>(PrepareAsyncRemoveEntityRaw(context, request, cq));
    }
    // Register remote SKI to the EEBus service
    virtual ::grpc::Status RegisterRemoteSki(::grpc::ClientContext* context, const ::control_service::RegisterRemoteSkiRequest& request, ::control_service::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>> AsyncRegisterRemoteSki(::grpc::ClientContext* context, const ::control_service::RegisterRemoteSkiRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>>(AsyncRegisterRemoteSkiRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>> PrepareAsyncRegisterRemoteSki(::grpc::ClientContext* context, const ::control_service::RegisterRemoteSkiRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>>(PrepareAsyncRegisterRemoteSkiRaw(context, request, cq));
    }
    // Adds an usecase to the EEBus service
    virtual ::grpc::Status AddUseCase(::grpc::ClientContext* context, const ::control_service::AddUseCaseRequest& request, ::control_service::AddUseCaseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::control_service::AddUseCaseResponse>> AsyncAddUseCase(::grpc::ClientContext* context, const ::control_service::AddUseCaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::control_service::AddUseCaseResponse>>(AsyncAddUseCaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::control_service::AddUseCaseResponse>> PrepareAsyncAddUseCase(::grpc::ClientContext* context, const ::control_service::AddUseCaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::control_service::AddUseCaseResponse>>(PrepareAsyncAddUseCaseRaw(context, request, cq));
    }
    // Subscribes to usecase events
    std::unique_ptr< ::grpc::ClientReaderInterface< ::control_service::SubscribeUseCaseEventsResponse>> SubscribeUseCaseEvents(::grpc::ClientContext* context, const ::control_service::SubscribeUseCaseEventsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::control_service::SubscribeUseCaseEventsResponse>>(SubscribeUseCaseEventsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::control_service::SubscribeUseCaseEventsResponse>> AsyncSubscribeUseCaseEvents(::grpc::ClientContext* context, const ::control_service::SubscribeUseCaseEventsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::control_service::SubscribeUseCaseEventsResponse>>(AsyncSubscribeUseCaseEventsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::control_service::SubscribeUseCaseEventsResponse>> PrepareAsyncSubscribeUseCaseEvents(::grpc::ClientContext* context, const ::control_service::SubscribeUseCaseEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::control_service::SubscribeUseCaseEventsResponse>>(PrepareAsyncSubscribeUseCaseEventsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Starts the EEBus service
      virtual void StartService(::grpc::ClientContext* context, const ::control_service::EmptyRequest* request, ::control_service::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartService(::grpc::ClientContext* context, const ::control_service::EmptyRequest* request, ::control_service::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Stops the EEBus service
      virtual void StopService(::grpc::ClientContext* context, const ::control_service::EmptyRequest* request, ::control_service::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopService(::grpc::ClientContext* context, const ::control_service::EmptyRequest* request, ::control_service::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Set Config for the EEBus service
      // Each parameter is optional. If a parameter is not set, the current value is used.
      virtual void SetConfig(::grpc::ClientContext* context, const ::control_service::SetConfigRequest* request, ::control_service::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetConfig(::grpc::ClientContext* context, const ::control_service::SetConfigRequest* request, ::control_service::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Starts Setup() for the EEBus service
      virtual void StartSetup(::grpc::ClientContext* context, const ::control_service::EmptyRequest* request, ::control_service::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartSetup(::grpc::ClientContext* context, const ::control_service::EmptyRequest* request, ::control_service::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Adds a new entity to the EEBus service
      virtual void AddEntity(::grpc::ClientContext* context, const ::control_service::AddEntityRequest* request, ::control_service::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddEntity(::grpc::ClientContext* context, const ::control_service::AddEntityRequest* request, ::control_service::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Removes an entity from the EEBus service
      virtual void RemoveEntity(::grpc::ClientContext* context, const ::control_service::RemoveEntityRequest* request, ::control_service::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveEntity(::grpc::ClientContext* context, const ::control_service::RemoveEntityRequest* request, ::control_service::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Register remote SKI to the EEBus service
      virtual void RegisterRemoteSki(::grpc::ClientContext* context, const ::control_service::RegisterRemoteSkiRequest* request, ::control_service::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterRemoteSki(::grpc::ClientContext* context, const ::control_service::RegisterRemoteSkiRequest* request, ::control_service::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Adds an usecase to the EEBus service
      virtual void AddUseCase(::grpc::ClientContext* context, const ::control_service::AddUseCaseRequest* request, ::control_service::AddUseCaseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddUseCase(::grpc::ClientContext* context, const ::control_service::AddUseCaseRequest* request, ::control_service::AddUseCaseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Subscribes to usecase events
      virtual void SubscribeUseCaseEvents(::grpc::ClientContext* context, const ::control_service::SubscribeUseCaseEventsRequest* request, ::grpc::ClientReadReactor< ::control_service::SubscribeUseCaseEventsResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>* AsyncStartServiceRaw(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>* PrepareAsyncStartServiceRaw(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>* AsyncStopServiceRaw(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>* PrepareAsyncStopServiceRaw(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>* AsyncSetConfigRaw(::grpc::ClientContext* context, const ::control_service::SetConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>* PrepareAsyncSetConfigRaw(::grpc::ClientContext* context, const ::control_service::SetConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>* AsyncStartSetupRaw(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>* PrepareAsyncStartSetupRaw(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>* AsyncAddEntityRaw(::grpc::ClientContext* context, const ::control_service::AddEntityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>* PrepareAsyncAddEntityRaw(::grpc::ClientContext* context, const ::control_service::AddEntityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>* AsyncRemoveEntityRaw(::grpc::ClientContext* context, const ::control_service::RemoveEntityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>* PrepareAsyncRemoveEntityRaw(::grpc::ClientContext* context, const ::control_service::RemoveEntityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>* AsyncRegisterRemoteSkiRaw(::grpc::ClientContext* context, const ::control_service::RegisterRemoteSkiRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::control_service::EmptyResponse>* PrepareAsyncRegisterRemoteSkiRaw(::grpc::ClientContext* context, const ::control_service::RegisterRemoteSkiRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::control_service::AddUseCaseResponse>* AsyncAddUseCaseRaw(::grpc::ClientContext* context, const ::control_service::AddUseCaseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::control_service::AddUseCaseResponse>* PrepareAsyncAddUseCaseRaw(::grpc::ClientContext* context, const ::control_service::AddUseCaseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::control_service::SubscribeUseCaseEventsResponse>* SubscribeUseCaseEventsRaw(::grpc::ClientContext* context, const ::control_service::SubscribeUseCaseEventsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::control_service::SubscribeUseCaseEventsResponse>* AsyncSubscribeUseCaseEventsRaw(::grpc::ClientContext* context, const ::control_service::SubscribeUseCaseEventsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::control_service::SubscribeUseCaseEventsResponse>* PrepareAsyncSubscribeUseCaseEventsRaw(::grpc::ClientContext* context, const ::control_service::SubscribeUseCaseEventsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status StartService(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::control_service::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>> AsyncStartService(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>>(AsyncStartServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>> PrepareAsyncStartService(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>>(PrepareAsyncStartServiceRaw(context, request, cq));
    }
    ::grpc::Status StopService(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::control_service::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>> AsyncStopService(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>>(AsyncStopServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>> PrepareAsyncStopService(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>>(PrepareAsyncStopServiceRaw(context, request, cq));
    }
    ::grpc::Status SetConfig(::grpc::ClientContext* context, const ::control_service::SetConfigRequest& request, ::control_service::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>> AsyncSetConfig(::grpc::ClientContext* context, const ::control_service::SetConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>>(AsyncSetConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>> PrepareAsyncSetConfig(::grpc::ClientContext* context, const ::control_service::SetConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>>(PrepareAsyncSetConfigRaw(context, request, cq));
    }
    ::grpc::Status StartSetup(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::control_service::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>> AsyncStartSetup(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>>(AsyncStartSetupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>> PrepareAsyncStartSetup(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>>(PrepareAsyncStartSetupRaw(context, request, cq));
    }
    ::grpc::Status AddEntity(::grpc::ClientContext* context, const ::control_service::AddEntityRequest& request, ::control_service::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>> AsyncAddEntity(::grpc::ClientContext* context, const ::control_service::AddEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>>(AsyncAddEntityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>> PrepareAsyncAddEntity(::grpc::ClientContext* context, const ::control_service::AddEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>>(PrepareAsyncAddEntityRaw(context, request, cq));
    }
    ::grpc::Status RemoveEntity(::grpc::ClientContext* context, const ::control_service::RemoveEntityRequest& request, ::control_service::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>> AsyncRemoveEntity(::grpc::ClientContext* context, const ::control_service::RemoveEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>>(AsyncRemoveEntityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>> PrepareAsyncRemoveEntity(::grpc::ClientContext* context, const ::control_service::RemoveEntityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>>(PrepareAsyncRemoveEntityRaw(context, request, cq));
    }
    ::grpc::Status RegisterRemoteSki(::grpc::ClientContext* context, const ::control_service::RegisterRemoteSkiRequest& request, ::control_service::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>> AsyncRegisterRemoteSki(::grpc::ClientContext* context, const ::control_service::RegisterRemoteSkiRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>>(AsyncRegisterRemoteSkiRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>> PrepareAsyncRegisterRemoteSki(::grpc::ClientContext* context, const ::control_service::RegisterRemoteSkiRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>>(PrepareAsyncRegisterRemoteSkiRaw(context, request, cq));
    }
    ::grpc::Status AddUseCase(::grpc::ClientContext* context, const ::control_service::AddUseCaseRequest& request, ::control_service::AddUseCaseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::control_service::AddUseCaseResponse>> AsyncAddUseCase(::grpc::ClientContext* context, const ::control_service::AddUseCaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::control_service::AddUseCaseResponse>>(AsyncAddUseCaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::control_service::AddUseCaseResponse>> PrepareAsyncAddUseCase(::grpc::ClientContext* context, const ::control_service::AddUseCaseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::control_service::AddUseCaseResponse>>(PrepareAsyncAddUseCaseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::control_service::SubscribeUseCaseEventsResponse>> SubscribeUseCaseEvents(::grpc::ClientContext* context, const ::control_service::SubscribeUseCaseEventsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::control_service::SubscribeUseCaseEventsResponse>>(SubscribeUseCaseEventsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::control_service::SubscribeUseCaseEventsResponse>> AsyncSubscribeUseCaseEvents(::grpc::ClientContext* context, const ::control_service::SubscribeUseCaseEventsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::control_service::SubscribeUseCaseEventsResponse>>(AsyncSubscribeUseCaseEventsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::control_service::SubscribeUseCaseEventsResponse>> PrepareAsyncSubscribeUseCaseEvents(::grpc::ClientContext* context, const ::control_service::SubscribeUseCaseEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::control_service::SubscribeUseCaseEventsResponse>>(PrepareAsyncSubscribeUseCaseEventsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void StartService(::grpc::ClientContext* context, const ::control_service::EmptyRequest* request, ::control_service::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      void StartService(::grpc::ClientContext* context, const ::control_service::EmptyRequest* request, ::control_service::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StopService(::grpc::ClientContext* context, const ::control_service::EmptyRequest* request, ::control_service::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      void StopService(::grpc::ClientContext* context, const ::control_service::EmptyRequest* request, ::control_service::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetConfig(::grpc::ClientContext* context, const ::control_service::SetConfigRequest* request, ::control_service::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      void SetConfig(::grpc::ClientContext* context, const ::control_service::SetConfigRequest* request, ::control_service::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StartSetup(::grpc::ClientContext* context, const ::control_service::EmptyRequest* request, ::control_service::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      void StartSetup(::grpc::ClientContext* context, const ::control_service::EmptyRequest* request, ::control_service::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddEntity(::grpc::ClientContext* context, const ::control_service::AddEntityRequest* request, ::control_service::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      void AddEntity(::grpc::ClientContext* context, const ::control_service::AddEntityRequest* request, ::control_service::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RemoveEntity(::grpc::ClientContext* context, const ::control_service::RemoveEntityRequest* request, ::control_service::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      void RemoveEntity(::grpc::ClientContext* context, const ::control_service::RemoveEntityRequest* request, ::control_service::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RegisterRemoteSki(::grpc::ClientContext* context, const ::control_service::RegisterRemoteSkiRequest* request, ::control_service::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterRemoteSki(::grpc::ClientContext* context, const ::control_service::RegisterRemoteSkiRequest* request, ::control_service::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddUseCase(::grpc::ClientContext* context, const ::control_service::AddUseCaseRequest* request, ::control_service::AddUseCaseResponse* response, std::function<void(::grpc::Status)>) override;
      void AddUseCase(::grpc::ClientContext* context, const ::control_service::AddUseCaseRequest* request, ::control_service::AddUseCaseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SubscribeUseCaseEvents(::grpc::ClientContext* context, const ::control_service::SubscribeUseCaseEventsRequest* request, ::grpc::ClientReadReactor< ::control_service::SubscribeUseCaseEventsResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>* AsyncStartServiceRaw(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>* PrepareAsyncStartServiceRaw(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>* AsyncStopServiceRaw(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>* PrepareAsyncStopServiceRaw(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>* AsyncSetConfigRaw(::grpc::ClientContext* context, const ::control_service::SetConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>* PrepareAsyncSetConfigRaw(::grpc::ClientContext* context, const ::control_service::SetConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>* AsyncStartSetupRaw(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>* PrepareAsyncStartSetupRaw(::grpc::ClientContext* context, const ::control_service::EmptyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>* AsyncAddEntityRaw(::grpc::ClientContext* context, const ::control_service::AddEntityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>* PrepareAsyncAddEntityRaw(::grpc::ClientContext* context, const ::control_service::AddEntityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>* AsyncRemoveEntityRaw(::grpc::ClientContext* context, const ::control_service::RemoveEntityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>* PrepareAsyncRemoveEntityRaw(::grpc::ClientContext* context, const ::control_service::RemoveEntityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>* AsyncRegisterRemoteSkiRaw(::grpc::ClientContext* context, const ::control_service::RegisterRemoteSkiRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::control_service::EmptyResponse>* PrepareAsyncRegisterRemoteSkiRaw(::grpc::ClientContext* context, const ::control_service::RegisterRemoteSkiRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::control_service::AddUseCaseResponse>* AsyncAddUseCaseRaw(::grpc::ClientContext* context, const ::control_service::AddUseCaseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::control_service::AddUseCaseResponse>* PrepareAsyncAddUseCaseRaw(::grpc::ClientContext* context, const ::control_service::AddUseCaseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::control_service::SubscribeUseCaseEventsResponse>* SubscribeUseCaseEventsRaw(::grpc::ClientContext* context, const ::control_service::SubscribeUseCaseEventsRequest& request) override;
    ::grpc::ClientAsyncReader< ::control_service::SubscribeUseCaseEventsResponse>* AsyncSubscribeUseCaseEventsRaw(::grpc::ClientContext* context, const ::control_service::SubscribeUseCaseEventsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::control_service::SubscribeUseCaseEventsResponse>* PrepareAsyncSubscribeUseCaseEventsRaw(::grpc::ClientContext* context, const ::control_service::SubscribeUseCaseEventsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StartService_;
    const ::grpc::internal::RpcMethod rpcmethod_StopService_;
    const ::grpc::internal::RpcMethod rpcmethod_SetConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_StartSetup_;
    const ::grpc::internal::RpcMethod rpcmethod_AddEntity_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveEntity_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterRemoteSki_;
    const ::grpc::internal::RpcMethod rpcmethod_AddUseCase_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeUseCaseEvents_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Starts the EEBus service
    virtual ::grpc::Status StartService(::grpc::ServerContext* context, const ::control_service::EmptyRequest* request, ::control_service::EmptyResponse* response);
    // Stops the EEBus service
    virtual ::grpc::Status StopService(::grpc::ServerContext* context, const ::control_service::EmptyRequest* request, ::control_service::EmptyResponse* response);
    // Set Config for the EEBus service
    // Each parameter is optional. If a parameter is not set, the current value is used.
    virtual ::grpc::Status SetConfig(::grpc::ServerContext* context, const ::control_service::SetConfigRequest* request, ::control_service::EmptyResponse* response);
    // Starts Setup() for the EEBus service
    virtual ::grpc::Status StartSetup(::grpc::ServerContext* context, const ::control_service::EmptyRequest* request, ::control_service::EmptyResponse* response);
    // Adds a new entity to the EEBus service
    virtual ::grpc::Status AddEntity(::grpc::ServerContext* context, const ::control_service::AddEntityRequest* request, ::control_service::EmptyResponse* response);
    // Removes an entity from the EEBus service
    virtual ::grpc::Status RemoveEntity(::grpc::ServerContext* context, const ::control_service::RemoveEntityRequest* request, ::control_service::EmptyResponse* response);
    // Register remote SKI to the EEBus service
    virtual ::grpc::Status RegisterRemoteSki(::grpc::ServerContext* context, const ::control_service::RegisterRemoteSkiRequest* request, ::control_service::EmptyResponse* response);
    // Adds an usecase to the EEBus service
    virtual ::grpc::Status AddUseCase(::grpc::ServerContext* context, const ::control_service::AddUseCaseRequest* request, ::control_service::AddUseCaseResponse* response);
    // Subscribes to usecase events
    virtual ::grpc::Status SubscribeUseCaseEvents(::grpc::ServerContext* context, const ::control_service::SubscribeUseCaseEventsRequest* request, ::grpc::ServerWriter< ::control_service::SubscribeUseCaseEventsResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_StartService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartService() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StartService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartService(::grpc::ServerContext* /*context*/, const ::control_service::EmptyRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartService(::grpc::ServerContext* context, ::control_service::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::control_service::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StopService() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StopService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopService(::grpc::ServerContext* /*context*/, const ::control_service::EmptyRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopService(::grpc::ServerContext* context, ::control_service::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::control_service::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetConfig() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetConfig(::grpc::ServerContext* /*context*/, const ::control_service::SetConfigRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetConfig(::grpc::ServerContext* context, ::control_service::SetConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::control_service::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StartSetup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartSetup() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_StartSetup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartSetup(::grpc::ServerContext* /*context*/, const ::control_service::EmptyRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartSetup(::grpc::ServerContext* context, ::control_service::EmptyRequest* request, ::grpc::ServerAsyncResponseWriter< ::control_service::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddEntity() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_AddEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEntity(::grpc::ServerContext* /*context*/, const ::control_service::AddEntityRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddEntity(::grpc::ServerContext* context, ::control_service::AddEntityRequest* request, ::grpc::ServerAsyncResponseWriter< ::control_service::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveEntity() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_RemoveEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveEntity(::grpc::ServerContext* /*context*/, const ::control_service::RemoveEntityRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveEntity(::grpc::ServerContext* context, ::control_service::RemoveEntityRequest* request, ::grpc::ServerAsyncResponseWriter< ::control_service::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterRemoteSki : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterRemoteSki() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_RegisterRemoteSki() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterRemoteSki(::grpc::ServerContext* /*context*/, const ::control_service::RegisterRemoteSkiRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterRemoteSki(::grpc::ServerContext* context, ::control_service::RegisterRemoteSkiRequest* request, ::grpc::ServerAsyncResponseWriter< ::control_service::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddUseCase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddUseCase() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_AddUseCase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddUseCase(::grpc::ServerContext* /*context*/, const ::control_service::AddUseCaseRequest* /*request*/, ::control_service::AddUseCaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddUseCase(::grpc::ServerContext* context, ::control_service::AddUseCaseRequest* request, ::grpc::ServerAsyncResponseWriter< ::control_service::AddUseCaseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeUseCaseEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeUseCaseEvents() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SubscribeUseCaseEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeUseCaseEvents(::grpc::ServerContext* /*context*/, const ::control_service::SubscribeUseCaseEventsRequest* /*request*/, ::grpc::ServerWriter< ::control_service::SubscribeUseCaseEventsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeUseCaseEvents(::grpc::ServerContext* context, ::control_service::SubscribeUseCaseEventsRequest* request, ::grpc::ServerAsyncWriter< ::control_service::SubscribeUseCaseEventsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(8, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StartService<WithAsyncMethod_StopService<WithAsyncMethod_SetConfig<WithAsyncMethod_StartSetup<WithAsyncMethod_AddEntity<WithAsyncMethod_RemoveEntity<WithAsyncMethod_RegisterRemoteSki<WithAsyncMethod_AddUseCase<WithAsyncMethod_SubscribeUseCaseEvents<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_StartService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StartService() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::control_service::EmptyRequest, ::control_service::EmptyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::control_service::EmptyRequest* request, ::control_service::EmptyResponse* response) { return this->StartService(context, request, response); }));}
    void SetMessageAllocatorFor_StartService(
        ::grpc::MessageAllocator< ::control_service::EmptyRequest, ::control_service::EmptyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::control_service::EmptyRequest, ::control_service::EmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StartService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartService(::grpc::ServerContext* /*context*/, const ::control_service::EmptyRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartService(
      ::grpc::CallbackServerContext* /*context*/, const ::control_service::EmptyRequest* /*request*/, ::control_service::EmptyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StopService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StopService() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::control_service::EmptyRequest, ::control_service::EmptyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::control_service::EmptyRequest* request, ::control_service::EmptyResponse* response) { return this->StopService(context, request, response); }));}
    void SetMessageAllocatorFor_StopService(
        ::grpc::MessageAllocator< ::control_service::EmptyRequest, ::control_service::EmptyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::control_service::EmptyRequest, ::control_service::EmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StopService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopService(::grpc::ServerContext* /*context*/, const ::control_service::EmptyRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StopService(
      ::grpc::CallbackServerContext* /*context*/, const ::control_service::EmptyRequest* /*request*/, ::control_service::EmptyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetConfig() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::control_service::SetConfigRequest, ::control_service::EmptyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::control_service::SetConfigRequest* request, ::control_service::EmptyResponse* response) { return this->SetConfig(context, request, response); }));}
    void SetMessageAllocatorFor_SetConfig(
        ::grpc::MessageAllocator< ::control_service::SetConfigRequest, ::control_service::EmptyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::control_service::SetConfigRequest, ::control_service::EmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetConfig(::grpc::ServerContext* /*context*/, const ::control_service::SetConfigRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::control_service::SetConfigRequest* /*request*/, ::control_service::EmptyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StartSetup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StartSetup() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::control_service::EmptyRequest, ::control_service::EmptyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::control_service::EmptyRequest* request, ::control_service::EmptyResponse* response) { return this->StartSetup(context, request, response); }));}
    void SetMessageAllocatorFor_StartSetup(
        ::grpc::MessageAllocator< ::control_service::EmptyRequest, ::control_service::EmptyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::control_service::EmptyRequest, ::control_service::EmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StartSetup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartSetup(::grpc::ServerContext* /*context*/, const ::control_service::EmptyRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartSetup(
      ::grpc::CallbackServerContext* /*context*/, const ::control_service::EmptyRequest* /*request*/, ::control_service::EmptyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddEntity() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::control_service::AddEntityRequest, ::control_service::EmptyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::control_service::AddEntityRequest* request, ::control_service::EmptyResponse* response) { return this->AddEntity(context, request, response); }));}
    void SetMessageAllocatorFor_AddEntity(
        ::grpc::MessageAllocator< ::control_service::AddEntityRequest, ::control_service::EmptyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::control_service::AddEntityRequest, ::control_service::EmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEntity(::grpc::ServerContext* /*context*/, const ::control_service::AddEntityRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddEntity(
      ::grpc::CallbackServerContext* /*context*/, const ::control_service::AddEntityRequest* /*request*/, ::control_service::EmptyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RemoveEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RemoveEntity() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::control_service::RemoveEntityRequest, ::control_service::EmptyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::control_service::RemoveEntityRequest* request, ::control_service::EmptyResponse* response) { return this->RemoveEntity(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveEntity(
        ::grpc::MessageAllocator< ::control_service::RemoveEntityRequest, ::control_service::EmptyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::control_service::RemoveEntityRequest, ::control_service::EmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RemoveEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveEntity(::grpc::ServerContext* /*context*/, const ::control_service::RemoveEntityRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveEntity(
      ::grpc::CallbackServerContext* /*context*/, const ::control_service::RemoveEntityRequest* /*request*/, ::control_service::EmptyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RegisterRemoteSki : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterRemoteSki() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::control_service::RegisterRemoteSkiRequest, ::control_service::EmptyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::control_service::RegisterRemoteSkiRequest* request, ::control_service::EmptyResponse* response) { return this->RegisterRemoteSki(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterRemoteSki(
        ::grpc::MessageAllocator< ::control_service::RegisterRemoteSkiRequest, ::control_service::EmptyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::control_service::RegisterRemoteSkiRequest, ::control_service::EmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterRemoteSki() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterRemoteSki(::grpc::ServerContext* /*context*/, const ::control_service::RegisterRemoteSkiRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterRemoteSki(
      ::grpc::CallbackServerContext* /*context*/, const ::control_service::RegisterRemoteSkiRequest* /*request*/, ::control_service::EmptyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddUseCase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddUseCase() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::control_service::AddUseCaseRequest, ::control_service::AddUseCaseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::control_service::AddUseCaseRequest* request, ::control_service::AddUseCaseResponse* response) { return this->AddUseCase(context, request, response); }));}
    void SetMessageAllocatorFor_AddUseCase(
        ::grpc::MessageAllocator< ::control_service::AddUseCaseRequest, ::control_service::AddUseCaseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::control_service::AddUseCaseRequest, ::control_service::AddUseCaseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddUseCase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddUseCase(::grpc::ServerContext* /*context*/, const ::control_service::AddUseCaseRequest* /*request*/, ::control_service::AddUseCaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddUseCase(
      ::grpc::CallbackServerContext* /*context*/, const ::control_service::AddUseCaseRequest* /*request*/, ::control_service::AddUseCaseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SubscribeUseCaseEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SubscribeUseCaseEvents() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackServerStreamingHandler< ::control_service::SubscribeUseCaseEventsRequest, ::control_service::SubscribeUseCaseEventsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::control_service::SubscribeUseCaseEventsRequest* request) { return this->SubscribeUseCaseEvents(context, request); }));
    }
    ~WithCallbackMethod_SubscribeUseCaseEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeUseCaseEvents(::grpc::ServerContext* /*context*/, const ::control_service::SubscribeUseCaseEventsRequest* /*request*/, ::grpc::ServerWriter< ::control_service::SubscribeUseCaseEventsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::control_service::SubscribeUseCaseEventsResponse>* SubscribeUseCaseEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::control_service::SubscribeUseCaseEventsRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_StartService<WithCallbackMethod_StopService<WithCallbackMethod_SetConfig<WithCallbackMethod_StartSetup<WithCallbackMethod_AddEntity<WithCallbackMethod_RemoveEntity<WithCallbackMethod_RegisterRemoteSki<WithCallbackMethod_AddUseCase<WithCallbackMethod_SubscribeUseCaseEvents<Service > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StartService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartService() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StartService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartService(::grpc::ServerContext* /*context*/, const ::control_service::EmptyRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StopService() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StopService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopService(::grpc::ServerContext* /*context*/, const ::control_service::EmptyRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetConfig() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetConfig(::grpc::ServerContext* /*context*/, const ::control_service::SetConfigRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StartSetup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartSetup() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_StartSetup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartSetup(::grpc::ServerContext* /*context*/, const ::control_service::EmptyRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddEntity() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_AddEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEntity(::grpc::ServerContext* /*context*/, const ::control_service::AddEntityRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveEntity() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_RemoveEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveEntity(::grpc::ServerContext* /*context*/, const ::control_service::RemoveEntityRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterRemoteSki : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterRemoteSki() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_RegisterRemoteSki() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterRemoteSki(::grpc::ServerContext* /*context*/, const ::control_service::RegisterRemoteSkiRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddUseCase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddUseCase() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_AddUseCase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddUseCase(::grpc::ServerContext* /*context*/, const ::control_service::AddUseCaseRequest* /*request*/, ::control_service::AddUseCaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeUseCaseEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeUseCaseEvents() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SubscribeUseCaseEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeUseCaseEvents(::grpc::ServerContext* /*context*/, const ::control_service::SubscribeUseCaseEventsRequest* /*request*/, ::grpc::ServerWriter< ::control_service::SubscribeUseCaseEventsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartService() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StartService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartService(::grpc::ServerContext* /*context*/, const ::control_service::EmptyRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StopService() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StopService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopService(::grpc::ServerContext* /*context*/, const ::control_service::EmptyRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetConfig() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetConfig(::grpc::ServerContext* /*context*/, const ::control_service::SetConfigRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartSetup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartSetup() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_StartSetup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartSetup(::grpc::ServerContext* /*context*/, const ::control_service::EmptyRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartSetup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddEntity() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_AddEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEntity(::grpc::ServerContext* /*context*/, const ::control_service::AddEntityRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddEntity(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveEntity() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_RemoveEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveEntity(::grpc::ServerContext* /*context*/, const ::control_service::RemoveEntityRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveEntity(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterRemoteSki : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterRemoteSki() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_RegisterRemoteSki() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterRemoteSki(::grpc::ServerContext* /*context*/, const ::control_service::RegisterRemoteSkiRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterRemoteSki(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddUseCase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddUseCase() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_AddUseCase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddUseCase(::grpc::ServerContext* /*context*/, const ::control_service::AddUseCaseRequest* /*request*/, ::control_service::AddUseCaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddUseCase(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeUseCaseEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeUseCaseEvents() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_SubscribeUseCaseEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeUseCaseEvents(::grpc::ServerContext* /*context*/, const ::control_service::SubscribeUseCaseEventsRequest* /*request*/, ::grpc::ServerWriter< ::control_service::SubscribeUseCaseEventsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeUseCaseEvents(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(8, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StartService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StartService() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartService(context, request, response); }));
    }
    ~WithRawCallbackMethod_StartService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartService(::grpc::ServerContext* /*context*/, const ::control_service::EmptyRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StopService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StopService() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StopService(context, request, response); }));
    }
    ~WithRawCallbackMethod_StopService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopService(::grpc::ServerContext* /*context*/, const ::control_service::EmptyRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StopService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetConfig() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetConfig(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetConfig(::grpc::ServerContext* /*context*/, const ::control_service::SetConfigRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StartSetup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StartSetup() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartSetup(context, request, response); }));
    }
    ~WithRawCallbackMethod_StartSetup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartSetup(::grpc::ServerContext* /*context*/, const ::control_service::EmptyRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartSetup(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddEntity() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddEntity(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddEntity(::grpc::ServerContext* /*context*/, const ::control_service::AddEntityRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddEntity(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RemoveEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RemoveEntity() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveEntity(context, request, response); }));
    }
    ~WithRawCallbackMethod_RemoveEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveEntity(::grpc::ServerContext* /*context*/, const ::control_service::RemoveEntityRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveEntity(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterRemoteSki : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterRemoteSki() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterRemoteSki(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterRemoteSki() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterRemoteSki(::grpc::ServerContext* /*context*/, const ::control_service::RegisterRemoteSkiRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterRemoteSki(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddUseCase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddUseCase() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddUseCase(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddUseCase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddUseCase(::grpc::ServerContext* /*context*/, const ::control_service::AddUseCaseRequest* /*request*/, ::control_service::AddUseCaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddUseCase(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SubscribeUseCaseEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SubscribeUseCaseEvents() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->SubscribeUseCaseEvents(context, request); }));
    }
    ~WithRawCallbackMethod_SubscribeUseCaseEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeUseCaseEvents(::grpc::ServerContext* /*context*/, const ::control_service::SubscribeUseCaseEventsRequest* /*request*/, ::grpc::ServerWriter< ::control_service::SubscribeUseCaseEventsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeUseCaseEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartService() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::control_service::EmptyRequest, ::control_service::EmptyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::control_service::EmptyRequest, ::control_service::EmptyResponse>* streamer) {
                       return this->StreamedStartService(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StartService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartService(::grpc::ServerContext* /*context*/, const ::control_service::EmptyRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::control_service::EmptyRequest,::control_service::EmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StopService() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::control_service::EmptyRequest, ::control_service::EmptyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::control_service::EmptyRequest, ::control_service::EmptyResponse>* streamer) {
                       return this->StreamedStopService(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StopService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopService(::grpc::ServerContext* /*context*/, const ::control_service::EmptyRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::control_service::EmptyRequest,::control_service::EmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetConfig() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::control_service::SetConfigRequest, ::control_service::EmptyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::control_service::SetConfigRequest, ::control_service::EmptyResponse>* streamer) {
                       return this->StreamedSetConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetConfig(::grpc::ServerContext* /*context*/, const ::control_service::SetConfigRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::control_service::SetConfigRequest,::control_service::EmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartSetup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartSetup() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::control_service::EmptyRequest, ::control_service::EmptyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::control_service::EmptyRequest, ::control_service::EmptyResponse>* streamer) {
                       return this->StreamedStartSetup(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StartSetup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartSetup(::grpc::ServerContext* /*context*/, const ::control_service::EmptyRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartSetup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::control_service::EmptyRequest,::control_service::EmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddEntity() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::control_service::AddEntityRequest, ::control_service::EmptyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::control_service::AddEntityRequest, ::control_service::EmptyResponse>* streamer) {
                       return this->StreamedAddEntity(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddEntity(::grpc::ServerContext* /*context*/, const ::control_service::AddEntityRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddEntity(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::control_service::AddEntityRequest,::control_service::EmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveEntity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveEntity() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::control_service::RemoveEntityRequest, ::control_service::EmptyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::control_service::RemoveEntityRequest, ::control_service::EmptyResponse>* streamer) {
                       return this->StreamedRemoveEntity(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveEntity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveEntity(::grpc::ServerContext* /*context*/, const ::control_service::RemoveEntityRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveEntity(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::control_service::RemoveEntityRequest,::control_service::EmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterRemoteSki : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterRemoteSki() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::control_service::RegisterRemoteSkiRequest, ::control_service::EmptyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::control_service::RegisterRemoteSkiRequest, ::control_service::EmptyResponse>* streamer) {
                       return this->StreamedRegisterRemoteSki(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterRemoteSki() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterRemoteSki(::grpc::ServerContext* /*context*/, const ::control_service::RegisterRemoteSkiRequest* /*request*/, ::control_service::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterRemoteSki(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::control_service::RegisterRemoteSkiRequest,::control_service::EmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddUseCase : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddUseCase() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::control_service::AddUseCaseRequest, ::control_service::AddUseCaseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::control_service::AddUseCaseRequest, ::control_service::AddUseCaseResponse>* streamer) {
                       return this->StreamedAddUseCase(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddUseCase() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddUseCase(::grpc::ServerContext* /*context*/, const ::control_service::AddUseCaseRequest* /*request*/, ::control_service::AddUseCaseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddUseCase(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::control_service::AddUseCaseRequest,::control_service::AddUseCaseResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_StartService<WithStreamedUnaryMethod_StopService<WithStreamedUnaryMethod_SetConfig<WithStreamedUnaryMethod_StartSetup<WithStreamedUnaryMethod_AddEntity<WithStreamedUnaryMethod_RemoveEntity<WithStreamedUnaryMethod_RegisterRemoteSki<WithStreamedUnaryMethod_AddUseCase<Service > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeUseCaseEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeUseCaseEvents() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::control_service::SubscribeUseCaseEventsRequest, ::control_service::SubscribeUseCaseEventsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::control_service::SubscribeUseCaseEventsRequest, ::control_service::SubscribeUseCaseEventsResponse>* streamer) {
                       return this->StreamedSubscribeUseCaseEvents(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_SubscribeUseCaseEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeUseCaseEvents(::grpc::ServerContext* /*context*/, const ::control_service::SubscribeUseCaseEventsRequest* /*request*/, ::grpc::ServerWriter< ::control_service::SubscribeUseCaseEventsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeUseCaseEvents(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::control_service::SubscribeUseCaseEventsRequest,::control_service::SubscribeUseCaseEventsResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SubscribeUseCaseEvents<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_StartService<WithStreamedUnaryMethod_StopService<WithStreamedUnaryMethod_SetConfig<WithStreamedUnaryMethod_StartSetup<WithStreamedUnaryMethod_AddEntity<WithStreamedUnaryMethod_RemoveEntity<WithStreamedUnaryMethod_RegisterRemoteSki<WithStreamedUnaryMethod_AddUseCase<WithSplitStreamingMethod_SubscribeUseCaseEvents<Service > > > > > > > > > StreamedService;
};

}  // namespace control_service


#endif  // GRPC_control_5fservice_2fcontrol_5fservice_2eproto__INCLUDED
