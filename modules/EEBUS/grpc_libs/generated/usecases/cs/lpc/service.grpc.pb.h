// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: usecases/cs/lpc/service.proto
#ifndef GRPC_usecases_2fcs_2flpc_2fservice_2eproto__INCLUDED
#define GRPC_usecases_2fcs_2flpc_2fservice_2eproto__INCLUDED

#include "usecases/cs/lpc/service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace cs_lpc {

class ControllableSystemLPCControl final {
 public:
  static constexpr char const* service_full_name() {
    return "cs_lpc.ControllableSystemLPCControl";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::ConsumptionLimitRequest& request, ::cs_lpc::ConsumptionLimitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::ConsumptionLimitResponse>> AsyncConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::ConsumptionLimitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::ConsumptionLimitResponse>>(AsyncConsumptionLimitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::ConsumptionLimitResponse>> PrepareAsyncConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::ConsumptionLimitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::ConsumptionLimitResponse>>(PrepareAsyncConsumptionLimitRaw(context, request, cq));
    }
    virtual ::grpc::Status SetConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::SetConsumptionLimitRequest& request, ::cs_lpc::SetConsumptionLimitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::SetConsumptionLimitResponse>> AsyncSetConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::SetConsumptionLimitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::SetConsumptionLimitResponse>>(AsyncSetConsumptionLimitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::SetConsumptionLimitResponse>> PrepareAsyncSetConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::SetConsumptionLimitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::SetConsumptionLimitResponse>>(PrepareAsyncSetConsumptionLimitRaw(context, request, cq));
    }
    virtual ::grpc::Status PendingConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::PendingConsumptionLimitRequest& request, ::cs_lpc::PendingConsumptionLimitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::PendingConsumptionLimitResponse>> AsyncPendingConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::PendingConsumptionLimitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::PendingConsumptionLimitResponse>>(AsyncPendingConsumptionLimitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::PendingConsumptionLimitResponse>> PrepareAsyncPendingConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::PendingConsumptionLimitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::PendingConsumptionLimitResponse>>(PrepareAsyncPendingConsumptionLimitRaw(context, request, cq));
    }
    virtual ::grpc::Status ApproveOrDenyConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::ApproveOrDenyConsumptionLimitRequest& request, ::cs_lpc::ApproveOrDenyConsumptionLimitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::ApproveOrDenyConsumptionLimitResponse>> AsyncApproveOrDenyConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::ApproveOrDenyConsumptionLimitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::ApproveOrDenyConsumptionLimitResponse>>(AsyncApproveOrDenyConsumptionLimitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::ApproveOrDenyConsumptionLimitResponse>> PrepareAsyncApproveOrDenyConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::ApproveOrDenyConsumptionLimitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::ApproveOrDenyConsumptionLimitResponse>>(PrepareAsyncApproveOrDenyConsumptionLimitRaw(context, request, cq));
    }
    virtual ::grpc::Status FailsafeConsumptionActivePowerLimit(::grpc::ClientContext* context, const ::cs_lpc::FailsafeConsumptionActivePowerLimitRequest& request, ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse>> AsyncFailsafeConsumptionActivePowerLimit(::grpc::ClientContext* context, const ::cs_lpc::FailsafeConsumptionActivePowerLimitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse>>(AsyncFailsafeConsumptionActivePowerLimitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse>> PrepareAsyncFailsafeConsumptionActivePowerLimit(::grpc::ClientContext* context, const ::cs_lpc::FailsafeConsumptionActivePowerLimitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse>>(PrepareAsyncFailsafeConsumptionActivePowerLimitRaw(context, request, cq));
    }
    virtual ::grpc::Status SetFailsafeConsumptionActivePowerLimit(::grpc::ClientContext* context, const ::cs_lpc::SetFailsafeConsumptionActivePowerLimitRequest& request, ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse>> AsyncSetFailsafeConsumptionActivePowerLimit(::grpc::ClientContext* context, const ::cs_lpc::SetFailsafeConsumptionActivePowerLimitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse>>(AsyncSetFailsafeConsumptionActivePowerLimitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse>> PrepareAsyncSetFailsafeConsumptionActivePowerLimit(::grpc::ClientContext* context, const ::cs_lpc::SetFailsafeConsumptionActivePowerLimitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse>>(PrepareAsyncSetFailsafeConsumptionActivePowerLimitRaw(context, request, cq));
    }
    virtual ::grpc::Status FailsafeDurationMinimum(::grpc::ClientContext* context, const ::cs_lpc::FailsafeDurationMinimumRequest& request, ::cs_lpc::FailsafeDurationMinimumResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::FailsafeDurationMinimumResponse>> AsyncFailsafeDurationMinimum(::grpc::ClientContext* context, const ::cs_lpc::FailsafeDurationMinimumRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::FailsafeDurationMinimumResponse>>(AsyncFailsafeDurationMinimumRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::FailsafeDurationMinimumResponse>> PrepareAsyncFailsafeDurationMinimum(::grpc::ClientContext* context, const ::cs_lpc::FailsafeDurationMinimumRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::FailsafeDurationMinimumResponse>>(PrepareAsyncFailsafeDurationMinimumRaw(context, request, cq));
    }
    virtual ::grpc::Status SetFailsafeDurationMinimum(::grpc::ClientContext* context, const ::cs_lpc::SetFailsafeDurationMinimumRequest& request, ::cs_lpc::SetFailsafeDurationMinimumResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::SetFailsafeDurationMinimumResponse>> AsyncSetFailsafeDurationMinimum(::grpc::ClientContext* context, const ::cs_lpc::SetFailsafeDurationMinimumRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::SetFailsafeDurationMinimumResponse>>(AsyncSetFailsafeDurationMinimumRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::SetFailsafeDurationMinimumResponse>> PrepareAsyncSetFailsafeDurationMinimum(::grpc::ClientContext* context, const ::cs_lpc::SetFailsafeDurationMinimumRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::SetFailsafeDurationMinimumResponse>>(PrepareAsyncSetFailsafeDurationMinimumRaw(context, request, cq));
    }
    virtual ::grpc::Status StartHeartbeat(::grpc::ClientContext* context, const ::cs_lpc::StartHeartbeatRequest& request, ::cs_lpc::StartHeartbeatResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::StartHeartbeatResponse>> AsyncStartHeartbeat(::grpc::ClientContext* context, const ::cs_lpc::StartHeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::StartHeartbeatResponse>>(AsyncStartHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::StartHeartbeatResponse>> PrepareAsyncStartHeartbeat(::grpc::ClientContext* context, const ::cs_lpc::StartHeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::StartHeartbeatResponse>>(PrepareAsyncStartHeartbeatRaw(context, request, cq));
    }
    virtual ::grpc::Status StopHeartbeat(::grpc::ClientContext* context, const ::cs_lpc::StopHeartbeatRequest& request, ::cs_lpc::StopHeartbeatResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::StopHeartbeatResponse>> AsyncStopHeartbeat(::grpc::ClientContext* context, const ::cs_lpc::StopHeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::StopHeartbeatResponse>>(AsyncStopHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::StopHeartbeatResponse>> PrepareAsyncStopHeartbeat(::grpc::ClientContext* context, const ::cs_lpc::StopHeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::StopHeartbeatResponse>>(PrepareAsyncStopHeartbeatRaw(context, request, cq));
    }
    virtual ::grpc::Status IsHeartbeatWithinDuration(::grpc::ClientContext* context, const ::cs_lpc::IsHeartbeatWithinDurationRequest& request, ::cs_lpc::IsHeartbeatWithinDurationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::IsHeartbeatWithinDurationResponse>> AsyncIsHeartbeatWithinDuration(::grpc::ClientContext* context, const ::cs_lpc::IsHeartbeatWithinDurationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::IsHeartbeatWithinDurationResponse>>(AsyncIsHeartbeatWithinDurationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::IsHeartbeatWithinDurationResponse>> PrepareAsyncIsHeartbeatWithinDuration(::grpc::ClientContext* context, const ::cs_lpc::IsHeartbeatWithinDurationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::IsHeartbeatWithinDurationResponse>>(PrepareAsyncIsHeartbeatWithinDurationRaw(context, request, cq));
    }
    virtual ::grpc::Status ConsumptionNominalMax(::grpc::ClientContext* context, const ::cs_lpc::ConsumptionNominalMaxRequest& request, ::cs_lpc::ConsumptionNominalMaxResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::ConsumptionNominalMaxResponse>> AsyncConsumptionNominalMax(::grpc::ClientContext* context, const ::cs_lpc::ConsumptionNominalMaxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::ConsumptionNominalMaxResponse>>(AsyncConsumptionNominalMaxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::ConsumptionNominalMaxResponse>> PrepareAsyncConsumptionNominalMax(::grpc::ClientContext* context, const ::cs_lpc::ConsumptionNominalMaxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::ConsumptionNominalMaxResponse>>(PrepareAsyncConsumptionNominalMaxRaw(context, request, cq));
    }
    virtual ::grpc::Status SetConsumptionNominalMax(::grpc::ClientContext* context, const ::cs_lpc::SetConsumptionNominalMaxRequest& request, ::cs_lpc::SetConsumptionNominalMaxResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::SetConsumptionNominalMaxResponse>> AsyncSetConsumptionNominalMax(::grpc::ClientContext* context, const ::cs_lpc::SetConsumptionNominalMaxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::SetConsumptionNominalMaxResponse>>(AsyncSetConsumptionNominalMaxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::SetConsumptionNominalMaxResponse>> PrepareAsyncSetConsumptionNominalMax(::grpc::ClientContext* context, const ::cs_lpc::SetConsumptionNominalMaxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::SetConsumptionNominalMaxResponse>>(PrepareAsyncSetConsumptionNominalMaxRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void ConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::ConsumptionLimitRequest* request, ::cs_lpc::ConsumptionLimitResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::ConsumptionLimitRequest* request, ::cs_lpc::ConsumptionLimitResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::SetConsumptionLimitRequest* request, ::cs_lpc::SetConsumptionLimitResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::SetConsumptionLimitRequest* request, ::cs_lpc::SetConsumptionLimitResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PendingConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::PendingConsumptionLimitRequest* request, ::cs_lpc::PendingConsumptionLimitResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PendingConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::PendingConsumptionLimitRequest* request, ::cs_lpc::PendingConsumptionLimitResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ApproveOrDenyConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::ApproveOrDenyConsumptionLimitRequest* request, ::cs_lpc::ApproveOrDenyConsumptionLimitResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ApproveOrDenyConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::ApproveOrDenyConsumptionLimitRequest* request, ::cs_lpc::ApproveOrDenyConsumptionLimitResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FailsafeConsumptionActivePowerLimit(::grpc::ClientContext* context, const ::cs_lpc::FailsafeConsumptionActivePowerLimitRequest* request, ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FailsafeConsumptionActivePowerLimit(::grpc::ClientContext* context, const ::cs_lpc::FailsafeConsumptionActivePowerLimitRequest* request, ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetFailsafeConsumptionActivePowerLimit(::grpc::ClientContext* context, const ::cs_lpc::SetFailsafeConsumptionActivePowerLimitRequest* request, ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetFailsafeConsumptionActivePowerLimit(::grpc::ClientContext* context, const ::cs_lpc::SetFailsafeConsumptionActivePowerLimitRequest* request, ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FailsafeDurationMinimum(::grpc::ClientContext* context, const ::cs_lpc::FailsafeDurationMinimumRequest* request, ::cs_lpc::FailsafeDurationMinimumResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FailsafeDurationMinimum(::grpc::ClientContext* context, const ::cs_lpc::FailsafeDurationMinimumRequest* request, ::cs_lpc::FailsafeDurationMinimumResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetFailsafeDurationMinimum(::grpc::ClientContext* context, const ::cs_lpc::SetFailsafeDurationMinimumRequest* request, ::cs_lpc::SetFailsafeDurationMinimumResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetFailsafeDurationMinimum(::grpc::ClientContext* context, const ::cs_lpc::SetFailsafeDurationMinimumRequest* request, ::cs_lpc::SetFailsafeDurationMinimumResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StartHeartbeat(::grpc::ClientContext* context, const ::cs_lpc::StartHeartbeatRequest* request, ::cs_lpc::StartHeartbeatResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartHeartbeat(::grpc::ClientContext* context, const ::cs_lpc::StartHeartbeatRequest* request, ::cs_lpc::StartHeartbeatResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StopHeartbeat(::grpc::ClientContext* context, const ::cs_lpc::StopHeartbeatRequest* request, ::cs_lpc::StopHeartbeatResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopHeartbeat(::grpc::ClientContext* context, const ::cs_lpc::StopHeartbeatRequest* request, ::cs_lpc::StopHeartbeatResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void IsHeartbeatWithinDuration(::grpc::ClientContext* context, const ::cs_lpc::IsHeartbeatWithinDurationRequest* request, ::cs_lpc::IsHeartbeatWithinDurationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IsHeartbeatWithinDuration(::grpc::ClientContext* context, const ::cs_lpc::IsHeartbeatWithinDurationRequest* request, ::cs_lpc::IsHeartbeatWithinDurationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ConsumptionNominalMax(::grpc::ClientContext* context, const ::cs_lpc::ConsumptionNominalMaxRequest* request, ::cs_lpc::ConsumptionNominalMaxResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ConsumptionNominalMax(::grpc::ClientContext* context, const ::cs_lpc::ConsumptionNominalMaxRequest* request, ::cs_lpc::ConsumptionNominalMaxResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetConsumptionNominalMax(::grpc::ClientContext* context, const ::cs_lpc::SetConsumptionNominalMaxRequest* request, ::cs_lpc::SetConsumptionNominalMaxResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetConsumptionNominalMax(::grpc::ClientContext* context, const ::cs_lpc::SetConsumptionNominalMaxRequest* request, ::cs_lpc::SetConsumptionNominalMaxResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::ConsumptionLimitResponse>* AsyncConsumptionLimitRaw(::grpc::ClientContext* context, const ::cs_lpc::ConsumptionLimitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::ConsumptionLimitResponse>* PrepareAsyncConsumptionLimitRaw(::grpc::ClientContext* context, const ::cs_lpc::ConsumptionLimitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::SetConsumptionLimitResponse>* AsyncSetConsumptionLimitRaw(::grpc::ClientContext* context, const ::cs_lpc::SetConsumptionLimitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::SetConsumptionLimitResponse>* PrepareAsyncSetConsumptionLimitRaw(::grpc::ClientContext* context, const ::cs_lpc::SetConsumptionLimitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::PendingConsumptionLimitResponse>* AsyncPendingConsumptionLimitRaw(::grpc::ClientContext* context, const ::cs_lpc::PendingConsumptionLimitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::PendingConsumptionLimitResponse>* PrepareAsyncPendingConsumptionLimitRaw(::grpc::ClientContext* context, const ::cs_lpc::PendingConsumptionLimitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::ApproveOrDenyConsumptionLimitResponse>* AsyncApproveOrDenyConsumptionLimitRaw(::grpc::ClientContext* context, const ::cs_lpc::ApproveOrDenyConsumptionLimitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::ApproveOrDenyConsumptionLimitResponse>* PrepareAsyncApproveOrDenyConsumptionLimitRaw(::grpc::ClientContext* context, const ::cs_lpc::ApproveOrDenyConsumptionLimitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse>* AsyncFailsafeConsumptionActivePowerLimitRaw(::grpc::ClientContext* context, const ::cs_lpc::FailsafeConsumptionActivePowerLimitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse>* PrepareAsyncFailsafeConsumptionActivePowerLimitRaw(::grpc::ClientContext* context, const ::cs_lpc::FailsafeConsumptionActivePowerLimitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse>* AsyncSetFailsafeConsumptionActivePowerLimitRaw(::grpc::ClientContext* context, const ::cs_lpc::SetFailsafeConsumptionActivePowerLimitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse>* PrepareAsyncSetFailsafeConsumptionActivePowerLimitRaw(::grpc::ClientContext* context, const ::cs_lpc::SetFailsafeConsumptionActivePowerLimitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::FailsafeDurationMinimumResponse>* AsyncFailsafeDurationMinimumRaw(::grpc::ClientContext* context, const ::cs_lpc::FailsafeDurationMinimumRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::FailsafeDurationMinimumResponse>* PrepareAsyncFailsafeDurationMinimumRaw(::grpc::ClientContext* context, const ::cs_lpc::FailsafeDurationMinimumRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::SetFailsafeDurationMinimumResponse>* AsyncSetFailsafeDurationMinimumRaw(::grpc::ClientContext* context, const ::cs_lpc::SetFailsafeDurationMinimumRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::SetFailsafeDurationMinimumResponse>* PrepareAsyncSetFailsafeDurationMinimumRaw(::grpc::ClientContext* context, const ::cs_lpc::SetFailsafeDurationMinimumRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::StartHeartbeatResponse>* AsyncStartHeartbeatRaw(::grpc::ClientContext* context, const ::cs_lpc::StartHeartbeatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::StartHeartbeatResponse>* PrepareAsyncStartHeartbeatRaw(::grpc::ClientContext* context, const ::cs_lpc::StartHeartbeatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::StopHeartbeatResponse>* AsyncStopHeartbeatRaw(::grpc::ClientContext* context, const ::cs_lpc::StopHeartbeatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::StopHeartbeatResponse>* PrepareAsyncStopHeartbeatRaw(::grpc::ClientContext* context, const ::cs_lpc::StopHeartbeatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::IsHeartbeatWithinDurationResponse>* AsyncIsHeartbeatWithinDurationRaw(::grpc::ClientContext* context, const ::cs_lpc::IsHeartbeatWithinDurationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::IsHeartbeatWithinDurationResponse>* PrepareAsyncIsHeartbeatWithinDurationRaw(::grpc::ClientContext* context, const ::cs_lpc::IsHeartbeatWithinDurationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::ConsumptionNominalMaxResponse>* AsyncConsumptionNominalMaxRaw(::grpc::ClientContext* context, const ::cs_lpc::ConsumptionNominalMaxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::ConsumptionNominalMaxResponse>* PrepareAsyncConsumptionNominalMaxRaw(::grpc::ClientContext* context, const ::cs_lpc::ConsumptionNominalMaxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::SetConsumptionNominalMaxResponse>* AsyncSetConsumptionNominalMaxRaw(::grpc::ClientContext* context, const ::cs_lpc::SetConsumptionNominalMaxRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cs_lpc::SetConsumptionNominalMaxResponse>* PrepareAsyncSetConsumptionNominalMaxRaw(::grpc::ClientContext* context, const ::cs_lpc::SetConsumptionNominalMaxRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::ConsumptionLimitRequest& request, ::cs_lpc::ConsumptionLimitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::ConsumptionLimitResponse>> AsyncConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::ConsumptionLimitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::ConsumptionLimitResponse>>(AsyncConsumptionLimitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::ConsumptionLimitResponse>> PrepareAsyncConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::ConsumptionLimitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::ConsumptionLimitResponse>>(PrepareAsyncConsumptionLimitRaw(context, request, cq));
    }
    ::grpc::Status SetConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::SetConsumptionLimitRequest& request, ::cs_lpc::SetConsumptionLimitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::SetConsumptionLimitResponse>> AsyncSetConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::SetConsumptionLimitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::SetConsumptionLimitResponse>>(AsyncSetConsumptionLimitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::SetConsumptionLimitResponse>> PrepareAsyncSetConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::SetConsumptionLimitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::SetConsumptionLimitResponse>>(PrepareAsyncSetConsumptionLimitRaw(context, request, cq));
    }
    ::grpc::Status PendingConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::PendingConsumptionLimitRequest& request, ::cs_lpc::PendingConsumptionLimitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::PendingConsumptionLimitResponse>> AsyncPendingConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::PendingConsumptionLimitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::PendingConsumptionLimitResponse>>(AsyncPendingConsumptionLimitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::PendingConsumptionLimitResponse>> PrepareAsyncPendingConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::PendingConsumptionLimitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::PendingConsumptionLimitResponse>>(PrepareAsyncPendingConsumptionLimitRaw(context, request, cq));
    }
    ::grpc::Status ApproveOrDenyConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::ApproveOrDenyConsumptionLimitRequest& request, ::cs_lpc::ApproveOrDenyConsumptionLimitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::ApproveOrDenyConsumptionLimitResponse>> AsyncApproveOrDenyConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::ApproveOrDenyConsumptionLimitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::ApproveOrDenyConsumptionLimitResponse>>(AsyncApproveOrDenyConsumptionLimitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::ApproveOrDenyConsumptionLimitResponse>> PrepareAsyncApproveOrDenyConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::ApproveOrDenyConsumptionLimitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::ApproveOrDenyConsumptionLimitResponse>>(PrepareAsyncApproveOrDenyConsumptionLimitRaw(context, request, cq));
    }
    ::grpc::Status FailsafeConsumptionActivePowerLimit(::grpc::ClientContext* context, const ::cs_lpc::FailsafeConsumptionActivePowerLimitRequest& request, ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse>> AsyncFailsafeConsumptionActivePowerLimit(::grpc::ClientContext* context, const ::cs_lpc::FailsafeConsumptionActivePowerLimitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse>>(AsyncFailsafeConsumptionActivePowerLimitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse>> PrepareAsyncFailsafeConsumptionActivePowerLimit(::grpc::ClientContext* context, const ::cs_lpc::FailsafeConsumptionActivePowerLimitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse>>(PrepareAsyncFailsafeConsumptionActivePowerLimitRaw(context, request, cq));
    }
    ::grpc::Status SetFailsafeConsumptionActivePowerLimit(::grpc::ClientContext* context, const ::cs_lpc::SetFailsafeConsumptionActivePowerLimitRequest& request, ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse>> AsyncSetFailsafeConsumptionActivePowerLimit(::grpc::ClientContext* context, const ::cs_lpc::SetFailsafeConsumptionActivePowerLimitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse>>(AsyncSetFailsafeConsumptionActivePowerLimitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse>> PrepareAsyncSetFailsafeConsumptionActivePowerLimit(::grpc::ClientContext* context, const ::cs_lpc::SetFailsafeConsumptionActivePowerLimitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse>>(PrepareAsyncSetFailsafeConsumptionActivePowerLimitRaw(context, request, cq));
    }
    ::grpc::Status FailsafeDurationMinimum(::grpc::ClientContext* context, const ::cs_lpc::FailsafeDurationMinimumRequest& request, ::cs_lpc::FailsafeDurationMinimumResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::FailsafeDurationMinimumResponse>> AsyncFailsafeDurationMinimum(::grpc::ClientContext* context, const ::cs_lpc::FailsafeDurationMinimumRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::FailsafeDurationMinimumResponse>>(AsyncFailsafeDurationMinimumRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::FailsafeDurationMinimumResponse>> PrepareAsyncFailsafeDurationMinimum(::grpc::ClientContext* context, const ::cs_lpc::FailsafeDurationMinimumRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::FailsafeDurationMinimumResponse>>(PrepareAsyncFailsafeDurationMinimumRaw(context, request, cq));
    }
    ::grpc::Status SetFailsafeDurationMinimum(::grpc::ClientContext* context, const ::cs_lpc::SetFailsafeDurationMinimumRequest& request, ::cs_lpc::SetFailsafeDurationMinimumResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::SetFailsafeDurationMinimumResponse>> AsyncSetFailsafeDurationMinimum(::grpc::ClientContext* context, const ::cs_lpc::SetFailsafeDurationMinimumRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::SetFailsafeDurationMinimumResponse>>(AsyncSetFailsafeDurationMinimumRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::SetFailsafeDurationMinimumResponse>> PrepareAsyncSetFailsafeDurationMinimum(::grpc::ClientContext* context, const ::cs_lpc::SetFailsafeDurationMinimumRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::SetFailsafeDurationMinimumResponse>>(PrepareAsyncSetFailsafeDurationMinimumRaw(context, request, cq));
    }
    ::grpc::Status StartHeartbeat(::grpc::ClientContext* context, const ::cs_lpc::StartHeartbeatRequest& request, ::cs_lpc::StartHeartbeatResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::StartHeartbeatResponse>> AsyncStartHeartbeat(::grpc::ClientContext* context, const ::cs_lpc::StartHeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::StartHeartbeatResponse>>(AsyncStartHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::StartHeartbeatResponse>> PrepareAsyncStartHeartbeat(::grpc::ClientContext* context, const ::cs_lpc::StartHeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::StartHeartbeatResponse>>(PrepareAsyncStartHeartbeatRaw(context, request, cq));
    }
    ::grpc::Status StopHeartbeat(::grpc::ClientContext* context, const ::cs_lpc::StopHeartbeatRequest& request, ::cs_lpc::StopHeartbeatResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::StopHeartbeatResponse>> AsyncStopHeartbeat(::grpc::ClientContext* context, const ::cs_lpc::StopHeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::StopHeartbeatResponse>>(AsyncStopHeartbeatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::StopHeartbeatResponse>> PrepareAsyncStopHeartbeat(::grpc::ClientContext* context, const ::cs_lpc::StopHeartbeatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::StopHeartbeatResponse>>(PrepareAsyncStopHeartbeatRaw(context, request, cq));
    }
    ::grpc::Status IsHeartbeatWithinDuration(::grpc::ClientContext* context, const ::cs_lpc::IsHeartbeatWithinDurationRequest& request, ::cs_lpc::IsHeartbeatWithinDurationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::IsHeartbeatWithinDurationResponse>> AsyncIsHeartbeatWithinDuration(::grpc::ClientContext* context, const ::cs_lpc::IsHeartbeatWithinDurationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::IsHeartbeatWithinDurationResponse>>(AsyncIsHeartbeatWithinDurationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::IsHeartbeatWithinDurationResponse>> PrepareAsyncIsHeartbeatWithinDuration(::grpc::ClientContext* context, const ::cs_lpc::IsHeartbeatWithinDurationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::IsHeartbeatWithinDurationResponse>>(PrepareAsyncIsHeartbeatWithinDurationRaw(context, request, cq));
    }
    ::grpc::Status ConsumptionNominalMax(::grpc::ClientContext* context, const ::cs_lpc::ConsumptionNominalMaxRequest& request, ::cs_lpc::ConsumptionNominalMaxResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::ConsumptionNominalMaxResponse>> AsyncConsumptionNominalMax(::grpc::ClientContext* context, const ::cs_lpc::ConsumptionNominalMaxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::ConsumptionNominalMaxResponse>>(AsyncConsumptionNominalMaxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::ConsumptionNominalMaxResponse>> PrepareAsyncConsumptionNominalMax(::grpc::ClientContext* context, const ::cs_lpc::ConsumptionNominalMaxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::ConsumptionNominalMaxResponse>>(PrepareAsyncConsumptionNominalMaxRaw(context, request, cq));
    }
    ::grpc::Status SetConsumptionNominalMax(::grpc::ClientContext* context, const ::cs_lpc::SetConsumptionNominalMaxRequest& request, ::cs_lpc::SetConsumptionNominalMaxResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::SetConsumptionNominalMaxResponse>> AsyncSetConsumptionNominalMax(::grpc::ClientContext* context, const ::cs_lpc::SetConsumptionNominalMaxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::SetConsumptionNominalMaxResponse>>(AsyncSetConsumptionNominalMaxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::SetConsumptionNominalMaxResponse>> PrepareAsyncSetConsumptionNominalMax(::grpc::ClientContext* context, const ::cs_lpc::SetConsumptionNominalMaxRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cs_lpc::SetConsumptionNominalMaxResponse>>(PrepareAsyncSetConsumptionNominalMaxRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::ConsumptionLimitRequest* request, ::cs_lpc::ConsumptionLimitResponse* response, std::function<void(::grpc::Status)>) override;
      void ConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::ConsumptionLimitRequest* request, ::cs_lpc::ConsumptionLimitResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::SetConsumptionLimitRequest* request, ::cs_lpc::SetConsumptionLimitResponse* response, std::function<void(::grpc::Status)>) override;
      void SetConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::SetConsumptionLimitRequest* request, ::cs_lpc::SetConsumptionLimitResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PendingConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::PendingConsumptionLimitRequest* request, ::cs_lpc::PendingConsumptionLimitResponse* response, std::function<void(::grpc::Status)>) override;
      void PendingConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::PendingConsumptionLimitRequest* request, ::cs_lpc::PendingConsumptionLimitResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ApproveOrDenyConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::ApproveOrDenyConsumptionLimitRequest* request, ::cs_lpc::ApproveOrDenyConsumptionLimitResponse* response, std::function<void(::grpc::Status)>) override;
      void ApproveOrDenyConsumptionLimit(::grpc::ClientContext* context, const ::cs_lpc::ApproveOrDenyConsumptionLimitRequest* request, ::cs_lpc::ApproveOrDenyConsumptionLimitResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FailsafeConsumptionActivePowerLimit(::grpc::ClientContext* context, const ::cs_lpc::FailsafeConsumptionActivePowerLimitRequest* request, ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse* response, std::function<void(::grpc::Status)>) override;
      void FailsafeConsumptionActivePowerLimit(::grpc::ClientContext* context, const ::cs_lpc::FailsafeConsumptionActivePowerLimitRequest* request, ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetFailsafeConsumptionActivePowerLimit(::grpc::ClientContext* context, const ::cs_lpc::SetFailsafeConsumptionActivePowerLimitRequest* request, ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse* response, std::function<void(::grpc::Status)>) override;
      void SetFailsafeConsumptionActivePowerLimit(::grpc::ClientContext* context, const ::cs_lpc::SetFailsafeConsumptionActivePowerLimitRequest* request, ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FailsafeDurationMinimum(::grpc::ClientContext* context, const ::cs_lpc::FailsafeDurationMinimumRequest* request, ::cs_lpc::FailsafeDurationMinimumResponse* response, std::function<void(::grpc::Status)>) override;
      void FailsafeDurationMinimum(::grpc::ClientContext* context, const ::cs_lpc::FailsafeDurationMinimumRequest* request, ::cs_lpc::FailsafeDurationMinimumResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetFailsafeDurationMinimum(::grpc::ClientContext* context, const ::cs_lpc::SetFailsafeDurationMinimumRequest* request, ::cs_lpc::SetFailsafeDurationMinimumResponse* response, std::function<void(::grpc::Status)>) override;
      void SetFailsafeDurationMinimum(::grpc::ClientContext* context, const ::cs_lpc::SetFailsafeDurationMinimumRequest* request, ::cs_lpc::SetFailsafeDurationMinimumResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StartHeartbeat(::grpc::ClientContext* context, const ::cs_lpc::StartHeartbeatRequest* request, ::cs_lpc::StartHeartbeatResponse* response, std::function<void(::grpc::Status)>) override;
      void StartHeartbeat(::grpc::ClientContext* context, const ::cs_lpc::StartHeartbeatRequest* request, ::cs_lpc::StartHeartbeatResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StopHeartbeat(::grpc::ClientContext* context, const ::cs_lpc::StopHeartbeatRequest* request, ::cs_lpc::StopHeartbeatResponse* response, std::function<void(::grpc::Status)>) override;
      void StopHeartbeat(::grpc::ClientContext* context, const ::cs_lpc::StopHeartbeatRequest* request, ::cs_lpc::StopHeartbeatResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void IsHeartbeatWithinDuration(::grpc::ClientContext* context, const ::cs_lpc::IsHeartbeatWithinDurationRequest* request, ::cs_lpc::IsHeartbeatWithinDurationResponse* response, std::function<void(::grpc::Status)>) override;
      void IsHeartbeatWithinDuration(::grpc::ClientContext* context, const ::cs_lpc::IsHeartbeatWithinDurationRequest* request, ::cs_lpc::IsHeartbeatWithinDurationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ConsumptionNominalMax(::grpc::ClientContext* context, const ::cs_lpc::ConsumptionNominalMaxRequest* request, ::cs_lpc::ConsumptionNominalMaxResponse* response, std::function<void(::grpc::Status)>) override;
      void ConsumptionNominalMax(::grpc::ClientContext* context, const ::cs_lpc::ConsumptionNominalMaxRequest* request, ::cs_lpc::ConsumptionNominalMaxResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetConsumptionNominalMax(::grpc::ClientContext* context, const ::cs_lpc::SetConsumptionNominalMaxRequest* request, ::cs_lpc::SetConsumptionNominalMaxResponse* response, std::function<void(::grpc::Status)>) override;
      void SetConsumptionNominalMax(::grpc::ClientContext* context, const ::cs_lpc::SetConsumptionNominalMaxRequest* request, ::cs_lpc::SetConsumptionNominalMaxResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cs_lpc::ConsumptionLimitResponse>* AsyncConsumptionLimitRaw(::grpc::ClientContext* context, const ::cs_lpc::ConsumptionLimitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cs_lpc::ConsumptionLimitResponse>* PrepareAsyncConsumptionLimitRaw(::grpc::ClientContext* context, const ::cs_lpc::ConsumptionLimitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cs_lpc::SetConsumptionLimitResponse>* AsyncSetConsumptionLimitRaw(::grpc::ClientContext* context, const ::cs_lpc::SetConsumptionLimitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cs_lpc::SetConsumptionLimitResponse>* PrepareAsyncSetConsumptionLimitRaw(::grpc::ClientContext* context, const ::cs_lpc::SetConsumptionLimitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cs_lpc::PendingConsumptionLimitResponse>* AsyncPendingConsumptionLimitRaw(::grpc::ClientContext* context, const ::cs_lpc::PendingConsumptionLimitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cs_lpc::PendingConsumptionLimitResponse>* PrepareAsyncPendingConsumptionLimitRaw(::grpc::ClientContext* context, const ::cs_lpc::PendingConsumptionLimitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cs_lpc::ApproveOrDenyConsumptionLimitResponse>* AsyncApproveOrDenyConsumptionLimitRaw(::grpc::ClientContext* context, const ::cs_lpc::ApproveOrDenyConsumptionLimitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cs_lpc::ApproveOrDenyConsumptionLimitResponse>* PrepareAsyncApproveOrDenyConsumptionLimitRaw(::grpc::ClientContext* context, const ::cs_lpc::ApproveOrDenyConsumptionLimitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse>* AsyncFailsafeConsumptionActivePowerLimitRaw(::grpc::ClientContext* context, const ::cs_lpc::FailsafeConsumptionActivePowerLimitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse>* PrepareAsyncFailsafeConsumptionActivePowerLimitRaw(::grpc::ClientContext* context, const ::cs_lpc::FailsafeConsumptionActivePowerLimitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse>* AsyncSetFailsafeConsumptionActivePowerLimitRaw(::grpc::ClientContext* context, const ::cs_lpc::SetFailsafeConsumptionActivePowerLimitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse>* PrepareAsyncSetFailsafeConsumptionActivePowerLimitRaw(::grpc::ClientContext* context, const ::cs_lpc::SetFailsafeConsumptionActivePowerLimitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cs_lpc::FailsafeDurationMinimumResponse>* AsyncFailsafeDurationMinimumRaw(::grpc::ClientContext* context, const ::cs_lpc::FailsafeDurationMinimumRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cs_lpc::FailsafeDurationMinimumResponse>* PrepareAsyncFailsafeDurationMinimumRaw(::grpc::ClientContext* context, const ::cs_lpc::FailsafeDurationMinimumRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cs_lpc::SetFailsafeDurationMinimumResponse>* AsyncSetFailsafeDurationMinimumRaw(::grpc::ClientContext* context, const ::cs_lpc::SetFailsafeDurationMinimumRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cs_lpc::SetFailsafeDurationMinimumResponse>* PrepareAsyncSetFailsafeDurationMinimumRaw(::grpc::ClientContext* context, const ::cs_lpc::SetFailsafeDurationMinimumRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cs_lpc::StartHeartbeatResponse>* AsyncStartHeartbeatRaw(::grpc::ClientContext* context, const ::cs_lpc::StartHeartbeatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cs_lpc::StartHeartbeatResponse>* PrepareAsyncStartHeartbeatRaw(::grpc::ClientContext* context, const ::cs_lpc::StartHeartbeatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cs_lpc::StopHeartbeatResponse>* AsyncStopHeartbeatRaw(::grpc::ClientContext* context, const ::cs_lpc::StopHeartbeatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cs_lpc::StopHeartbeatResponse>* PrepareAsyncStopHeartbeatRaw(::grpc::ClientContext* context, const ::cs_lpc::StopHeartbeatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cs_lpc::IsHeartbeatWithinDurationResponse>* AsyncIsHeartbeatWithinDurationRaw(::grpc::ClientContext* context, const ::cs_lpc::IsHeartbeatWithinDurationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cs_lpc::IsHeartbeatWithinDurationResponse>* PrepareAsyncIsHeartbeatWithinDurationRaw(::grpc::ClientContext* context, const ::cs_lpc::IsHeartbeatWithinDurationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cs_lpc::ConsumptionNominalMaxResponse>* AsyncConsumptionNominalMaxRaw(::grpc::ClientContext* context, const ::cs_lpc::ConsumptionNominalMaxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cs_lpc::ConsumptionNominalMaxResponse>* PrepareAsyncConsumptionNominalMaxRaw(::grpc::ClientContext* context, const ::cs_lpc::ConsumptionNominalMaxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cs_lpc::SetConsumptionNominalMaxResponse>* AsyncSetConsumptionNominalMaxRaw(::grpc::ClientContext* context, const ::cs_lpc::SetConsumptionNominalMaxRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cs_lpc::SetConsumptionNominalMaxResponse>* PrepareAsyncSetConsumptionNominalMaxRaw(::grpc::ClientContext* context, const ::cs_lpc::SetConsumptionNominalMaxRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ConsumptionLimit_;
    const ::grpc::internal::RpcMethod rpcmethod_SetConsumptionLimit_;
    const ::grpc::internal::RpcMethod rpcmethod_PendingConsumptionLimit_;
    const ::grpc::internal::RpcMethod rpcmethod_ApproveOrDenyConsumptionLimit_;
    const ::grpc::internal::RpcMethod rpcmethod_FailsafeConsumptionActivePowerLimit_;
    const ::grpc::internal::RpcMethod rpcmethod_SetFailsafeConsumptionActivePowerLimit_;
    const ::grpc::internal::RpcMethod rpcmethod_FailsafeDurationMinimum_;
    const ::grpc::internal::RpcMethod rpcmethod_SetFailsafeDurationMinimum_;
    const ::grpc::internal::RpcMethod rpcmethod_StartHeartbeat_;
    const ::grpc::internal::RpcMethod rpcmethod_StopHeartbeat_;
    const ::grpc::internal::RpcMethod rpcmethod_IsHeartbeatWithinDuration_;
    const ::grpc::internal::RpcMethod rpcmethod_ConsumptionNominalMax_;
    const ::grpc::internal::RpcMethod rpcmethod_SetConsumptionNominalMax_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ConsumptionLimit(::grpc::ServerContext* context, const ::cs_lpc::ConsumptionLimitRequest* request, ::cs_lpc::ConsumptionLimitResponse* response);
    virtual ::grpc::Status SetConsumptionLimit(::grpc::ServerContext* context, const ::cs_lpc::SetConsumptionLimitRequest* request, ::cs_lpc::SetConsumptionLimitResponse* response);
    virtual ::grpc::Status PendingConsumptionLimit(::grpc::ServerContext* context, const ::cs_lpc::PendingConsumptionLimitRequest* request, ::cs_lpc::PendingConsumptionLimitResponse* response);
    virtual ::grpc::Status ApproveOrDenyConsumptionLimit(::grpc::ServerContext* context, const ::cs_lpc::ApproveOrDenyConsumptionLimitRequest* request, ::cs_lpc::ApproveOrDenyConsumptionLimitResponse* response);
    virtual ::grpc::Status FailsafeConsumptionActivePowerLimit(::grpc::ServerContext* context, const ::cs_lpc::FailsafeConsumptionActivePowerLimitRequest* request, ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse* response);
    virtual ::grpc::Status SetFailsafeConsumptionActivePowerLimit(::grpc::ServerContext* context, const ::cs_lpc::SetFailsafeConsumptionActivePowerLimitRequest* request, ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse* response);
    virtual ::grpc::Status FailsafeDurationMinimum(::grpc::ServerContext* context, const ::cs_lpc::FailsafeDurationMinimumRequest* request, ::cs_lpc::FailsafeDurationMinimumResponse* response);
    virtual ::grpc::Status SetFailsafeDurationMinimum(::grpc::ServerContext* context, const ::cs_lpc::SetFailsafeDurationMinimumRequest* request, ::cs_lpc::SetFailsafeDurationMinimumResponse* response);
    virtual ::grpc::Status StartHeartbeat(::grpc::ServerContext* context, const ::cs_lpc::StartHeartbeatRequest* request, ::cs_lpc::StartHeartbeatResponse* response);
    virtual ::grpc::Status StopHeartbeat(::grpc::ServerContext* context, const ::cs_lpc::StopHeartbeatRequest* request, ::cs_lpc::StopHeartbeatResponse* response);
    virtual ::grpc::Status IsHeartbeatWithinDuration(::grpc::ServerContext* context, const ::cs_lpc::IsHeartbeatWithinDurationRequest* request, ::cs_lpc::IsHeartbeatWithinDurationResponse* response);
    virtual ::grpc::Status ConsumptionNominalMax(::grpc::ServerContext* context, const ::cs_lpc::ConsumptionNominalMaxRequest* request, ::cs_lpc::ConsumptionNominalMaxResponse* response);
    virtual ::grpc::Status SetConsumptionNominalMax(::grpc::ServerContext* context, const ::cs_lpc::SetConsumptionNominalMaxRequest* request, ::cs_lpc::SetConsumptionNominalMaxResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ConsumptionLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ConsumptionLimit() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ConsumptionLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsumptionLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::ConsumptionLimitRequest* /*request*/, ::cs_lpc::ConsumptionLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConsumptionLimit(::grpc::ServerContext* context, ::cs_lpc::ConsumptionLimitRequest* request, ::grpc::ServerAsyncResponseWriter< ::cs_lpc::ConsumptionLimitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetConsumptionLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetConsumptionLimit() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SetConsumptionLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetConsumptionLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::SetConsumptionLimitRequest* /*request*/, ::cs_lpc::SetConsumptionLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetConsumptionLimit(::grpc::ServerContext* context, ::cs_lpc::SetConsumptionLimitRequest* request, ::grpc::ServerAsyncResponseWriter< ::cs_lpc::SetConsumptionLimitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PendingConsumptionLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PendingConsumptionLimit() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_PendingConsumptionLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PendingConsumptionLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::PendingConsumptionLimitRequest* /*request*/, ::cs_lpc::PendingConsumptionLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPendingConsumptionLimit(::grpc::ServerContext* context, ::cs_lpc::PendingConsumptionLimitRequest* request, ::grpc::ServerAsyncResponseWriter< ::cs_lpc::PendingConsumptionLimitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ApproveOrDenyConsumptionLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ApproveOrDenyConsumptionLimit() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ApproveOrDenyConsumptionLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApproveOrDenyConsumptionLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::ApproveOrDenyConsumptionLimitRequest* /*request*/, ::cs_lpc::ApproveOrDenyConsumptionLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestApproveOrDenyConsumptionLimit(::grpc::ServerContext* context, ::cs_lpc::ApproveOrDenyConsumptionLimitRequest* request, ::grpc::ServerAsyncResponseWriter< ::cs_lpc::ApproveOrDenyConsumptionLimitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FailsafeConsumptionActivePowerLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FailsafeConsumptionActivePowerLimit() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_FailsafeConsumptionActivePowerLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FailsafeConsumptionActivePowerLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::FailsafeConsumptionActivePowerLimitRequest* /*request*/, ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFailsafeConsumptionActivePowerLimit(::grpc::ServerContext* context, ::cs_lpc::FailsafeConsumptionActivePowerLimitRequest* request, ::grpc::ServerAsyncResponseWriter< ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetFailsafeConsumptionActivePowerLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetFailsafeConsumptionActivePowerLimit() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SetFailsafeConsumptionActivePowerLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFailsafeConsumptionActivePowerLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::SetFailsafeConsumptionActivePowerLimitRequest* /*request*/, ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetFailsafeConsumptionActivePowerLimit(::grpc::ServerContext* context, ::cs_lpc::SetFailsafeConsumptionActivePowerLimitRequest* request, ::grpc::ServerAsyncResponseWriter< ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FailsafeDurationMinimum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FailsafeDurationMinimum() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_FailsafeDurationMinimum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FailsafeDurationMinimum(::grpc::ServerContext* /*context*/, const ::cs_lpc::FailsafeDurationMinimumRequest* /*request*/, ::cs_lpc::FailsafeDurationMinimumResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFailsafeDurationMinimum(::grpc::ServerContext* context, ::cs_lpc::FailsafeDurationMinimumRequest* request, ::grpc::ServerAsyncResponseWriter< ::cs_lpc::FailsafeDurationMinimumResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetFailsafeDurationMinimum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetFailsafeDurationMinimum() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SetFailsafeDurationMinimum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFailsafeDurationMinimum(::grpc::ServerContext* /*context*/, const ::cs_lpc::SetFailsafeDurationMinimumRequest* /*request*/, ::cs_lpc::SetFailsafeDurationMinimumResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetFailsafeDurationMinimum(::grpc::ServerContext* context, ::cs_lpc::SetFailsafeDurationMinimumRequest* request, ::grpc::ServerAsyncResponseWriter< ::cs_lpc::SetFailsafeDurationMinimumResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StartHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartHeartbeat() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_StartHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartHeartbeat(::grpc::ServerContext* /*context*/, const ::cs_lpc::StartHeartbeatRequest* /*request*/, ::cs_lpc::StartHeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartHeartbeat(::grpc::ServerContext* context, ::cs_lpc::StartHeartbeatRequest* request, ::grpc::ServerAsyncResponseWriter< ::cs_lpc::StartHeartbeatResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StopHeartbeat() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_StopHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopHeartbeat(::grpc::ServerContext* /*context*/, const ::cs_lpc::StopHeartbeatRequest* /*request*/, ::cs_lpc::StopHeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopHeartbeat(::grpc::ServerContext* context, ::cs_lpc::StopHeartbeatRequest* request, ::grpc::ServerAsyncResponseWriter< ::cs_lpc::StopHeartbeatResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IsHeartbeatWithinDuration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IsHeartbeatWithinDuration() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_IsHeartbeatWithinDuration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsHeartbeatWithinDuration(::grpc::ServerContext* /*context*/, const ::cs_lpc::IsHeartbeatWithinDurationRequest* /*request*/, ::cs_lpc::IsHeartbeatWithinDurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsHeartbeatWithinDuration(::grpc::ServerContext* context, ::cs_lpc::IsHeartbeatWithinDurationRequest* request, ::grpc::ServerAsyncResponseWriter< ::cs_lpc::IsHeartbeatWithinDurationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ConsumptionNominalMax : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ConsumptionNominalMax() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_ConsumptionNominalMax() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsumptionNominalMax(::grpc::ServerContext* /*context*/, const ::cs_lpc::ConsumptionNominalMaxRequest* /*request*/, ::cs_lpc::ConsumptionNominalMaxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConsumptionNominalMax(::grpc::ServerContext* context, ::cs_lpc::ConsumptionNominalMaxRequest* request, ::grpc::ServerAsyncResponseWriter< ::cs_lpc::ConsumptionNominalMaxResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetConsumptionNominalMax : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetConsumptionNominalMax() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_SetConsumptionNominalMax() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetConsumptionNominalMax(::grpc::ServerContext* /*context*/, const ::cs_lpc::SetConsumptionNominalMaxRequest* /*request*/, ::cs_lpc::SetConsumptionNominalMaxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetConsumptionNominalMax(::grpc::ServerContext* context, ::cs_lpc::SetConsumptionNominalMaxRequest* request, ::grpc::ServerAsyncResponseWriter< ::cs_lpc::SetConsumptionNominalMaxResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ConsumptionLimit<WithAsyncMethod_SetConsumptionLimit<WithAsyncMethod_PendingConsumptionLimit<WithAsyncMethod_ApproveOrDenyConsumptionLimit<WithAsyncMethod_FailsafeConsumptionActivePowerLimit<WithAsyncMethod_SetFailsafeConsumptionActivePowerLimit<WithAsyncMethod_FailsafeDurationMinimum<WithAsyncMethod_SetFailsafeDurationMinimum<WithAsyncMethod_StartHeartbeat<WithAsyncMethod_StopHeartbeat<WithAsyncMethod_IsHeartbeatWithinDuration<WithAsyncMethod_ConsumptionNominalMax<WithAsyncMethod_SetConsumptionNominalMax<Service > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ConsumptionLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ConsumptionLimit() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::cs_lpc::ConsumptionLimitRequest, ::cs_lpc::ConsumptionLimitResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cs_lpc::ConsumptionLimitRequest* request, ::cs_lpc::ConsumptionLimitResponse* response) { return this->ConsumptionLimit(context, request, response); }));}
    void SetMessageAllocatorFor_ConsumptionLimit(
        ::grpc::MessageAllocator< ::cs_lpc::ConsumptionLimitRequest, ::cs_lpc::ConsumptionLimitResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cs_lpc::ConsumptionLimitRequest, ::cs_lpc::ConsumptionLimitResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ConsumptionLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsumptionLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::ConsumptionLimitRequest* /*request*/, ::cs_lpc::ConsumptionLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ConsumptionLimit(
      ::grpc::CallbackServerContext* /*context*/, const ::cs_lpc::ConsumptionLimitRequest* /*request*/, ::cs_lpc::ConsumptionLimitResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetConsumptionLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetConsumptionLimit() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::cs_lpc::SetConsumptionLimitRequest, ::cs_lpc::SetConsumptionLimitResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cs_lpc::SetConsumptionLimitRequest* request, ::cs_lpc::SetConsumptionLimitResponse* response) { return this->SetConsumptionLimit(context, request, response); }));}
    void SetMessageAllocatorFor_SetConsumptionLimit(
        ::grpc::MessageAllocator< ::cs_lpc::SetConsumptionLimitRequest, ::cs_lpc::SetConsumptionLimitResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cs_lpc::SetConsumptionLimitRequest, ::cs_lpc::SetConsumptionLimitResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetConsumptionLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetConsumptionLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::SetConsumptionLimitRequest* /*request*/, ::cs_lpc::SetConsumptionLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetConsumptionLimit(
      ::grpc::CallbackServerContext* /*context*/, const ::cs_lpc::SetConsumptionLimitRequest* /*request*/, ::cs_lpc::SetConsumptionLimitResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PendingConsumptionLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PendingConsumptionLimit() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::cs_lpc::PendingConsumptionLimitRequest, ::cs_lpc::PendingConsumptionLimitResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cs_lpc::PendingConsumptionLimitRequest* request, ::cs_lpc::PendingConsumptionLimitResponse* response) { return this->PendingConsumptionLimit(context, request, response); }));}
    void SetMessageAllocatorFor_PendingConsumptionLimit(
        ::grpc::MessageAllocator< ::cs_lpc::PendingConsumptionLimitRequest, ::cs_lpc::PendingConsumptionLimitResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cs_lpc::PendingConsumptionLimitRequest, ::cs_lpc::PendingConsumptionLimitResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PendingConsumptionLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PendingConsumptionLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::PendingConsumptionLimitRequest* /*request*/, ::cs_lpc::PendingConsumptionLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PendingConsumptionLimit(
      ::grpc::CallbackServerContext* /*context*/, const ::cs_lpc::PendingConsumptionLimitRequest* /*request*/, ::cs_lpc::PendingConsumptionLimitResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ApproveOrDenyConsumptionLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ApproveOrDenyConsumptionLimit() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::cs_lpc::ApproveOrDenyConsumptionLimitRequest, ::cs_lpc::ApproveOrDenyConsumptionLimitResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cs_lpc::ApproveOrDenyConsumptionLimitRequest* request, ::cs_lpc::ApproveOrDenyConsumptionLimitResponse* response) { return this->ApproveOrDenyConsumptionLimit(context, request, response); }));}
    void SetMessageAllocatorFor_ApproveOrDenyConsumptionLimit(
        ::grpc::MessageAllocator< ::cs_lpc::ApproveOrDenyConsumptionLimitRequest, ::cs_lpc::ApproveOrDenyConsumptionLimitResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cs_lpc::ApproveOrDenyConsumptionLimitRequest, ::cs_lpc::ApproveOrDenyConsumptionLimitResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ApproveOrDenyConsumptionLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApproveOrDenyConsumptionLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::ApproveOrDenyConsumptionLimitRequest* /*request*/, ::cs_lpc::ApproveOrDenyConsumptionLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ApproveOrDenyConsumptionLimit(
      ::grpc::CallbackServerContext* /*context*/, const ::cs_lpc::ApproveOrDenyConsumptionLimitRequest* /*request*/, ::cs_lpc::ApproveOrDenyConsumptionLimitResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FailsafeConsumptionActivePowerLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FailsafeConsumptionActivePowerLimit() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::cs_lpc::FailsafeConsumptionActivePowerLimitRequest, ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cs_lpc::FailsafeConsumptionActivePowerLimitRequest* request, ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse* response) { return this->FailsafeConsumptionActivePowerLimit(context, request, response); }));}
    void SetMessageAllocatorFor_FailsafeConsumptionActivePowerLimit(
        ::grpc::MessageAllocator< ::cs_lpc::FailsafeConsumptionActivePowerLimitRequest, ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cs_lpc::FailsafeConsumptionActivePowerLimitRequest, ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FailsafeConsumptionActivePowerLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FailsafeConsumptionActivePowerLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::FailsafeConsumptionActivePowerLimitRequest* /*request*/, ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FailsafeConsumptionActivePowerLimit(
      ::grpc::CallbackServerContext* /*context*/, const ::cs_lpc::FailsafeConsumptionActivePowerLimitRequest* /*request*/, ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetFailsafeConsumptionActivePowerLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetFailsafeConsumptionActivePowerLimit() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::cs_lpc::SetFailsafeConsumptionActivePowerLimitRequest, ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cs_lpc::SetFailsafeConsumptionActivePowerLimitRequest* request, ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse* response) { return this->SetFailsafeConsumptionActivePowerLimit(context, request, response); }));}
    void SetMessageAllocatorFor_SetFailsafeConsumptionActivePowerLimit(
        ::grpc::MessageAllocator< ::cs_lpc::SetFailsafeConsumptionActivePowerLimitRequest, ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cs_lpc::SetFailsafeConsumptionActivePowerLimitRequest, ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetFailsafeConsumptionActivePowerLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFailsafeConsumptionActivePowerLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::SetFailsafeConsumptionActivePowerLimitRequest* /*request*/, ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetFailsafeConsumptionActivePowerLimit(
      ::grpc::CallbackServerContext* /*context*/, const ::cs_lpc::SetFailsafeConsumptionActivePowerLimitRequest* /*request*/, ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FailsafeDurationMinimum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FailsafeDurationMinimum() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::cs_lpc::FailsafeDurationMinimumRequest, ::cs_lpc::FailsafeDurationMinimumResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cs_lpc::FailsafeDurationMinimumRequest* request, ::cs_lpc::FailsafeDurationMinimumResponse* response) { return this->FailsafeDurationMinimum(context, request, response); }));}
    void SetMessageAllocatorFor_FailsafeDurationMinimum(
        ::grpc::MessageAllocator< ::cs_lpc::FailsafeDurationMinimumRequest, ::cs_lpc::FailsafeDurationMinimumResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cs_lpc::FailsafeDurationMinimumRequest, ::cs_lpc::FailsafeDurationMinimumResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FailsafeDurationMinimum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FailsafeDurationMinimum(::grpc::ServerContext* /*context*/, const ::cs_lpc::FailsafeDurationMinimumRequest* /*request*/, ::cs_lpc::FailsafeDurationMinimumResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FailsafeDurationMinimum(
      ::grpc::CallbackServerContext* /*context*/, const ::cs_lpc::FailsafeDurationMinimumRequest* /*request*/, ::cs_lpc::FailsafeDurationMinimumResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetFailsafeDurationMinimum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetFailsafeDurationMinimum() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::cs_lpc::SetFailsafeDurationMinimumRequest, ::cs_lpc::SetFailsafeDurationMinimumResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cs_lpc::SetFailsafeDurationMinimumRequest* request, ::cs_lpc::SetFailsafeDurationMinimumResponse* response) { return this->SetFailsafeDurationMinimum(context, request, response); }));}
    void SetMessageAllocatorFor_SetFailsafeDurationMinimum(
        ::grpc::MessageAllocator< ::cs_lpc::SetFailsafeDurationMinimumRequest, ::cs_lpc::SetFailsafeDurationMinimumResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cs_lpc::SetFailsafeDurationMinimumRequest, ::cs_lpc::SetFailsafeDurationMinimumResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetFailsafeDurationMinimum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFailsafeDurationMinimum(::grpc::ServerContext* /*context*/, const ::cs_lpc::SetFailsafeDurationMinimumRequest* /*request*/, ::cs_lpc::SetFailsafeDurationMinimumResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetFailsafeDurationMinimum(
      ::grpc::CallbackServerContext* /*context*/, const ::cs_lpc::SetFailsafeDurationMinimumRequest* /*request*/, ::cs_lpc::SetFailsafeDurationMinimumResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StartHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StartHeartbeat() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::cs_lpc::StartHeartbeatRequest, ::cs_lpc::StartHeartbeatResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cs_lpc::StartHeartbeatRequest* request, ::cs_lpc::StartHeartbeatResponse* response) { return this->StartHeartbeat(context, request, response); }));}
    void SetMessageAllocatorFor_StartHeartbeat(
        ::grpc::MessageAllocator< ::cs_lpc::StartHeartbeatRequest, ::cs_lpc::StartHeartbeatResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cs_lpc::StartHeartbeatRequest, ::cs_lpc::StartHeartbeatResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StartHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartHeartbeat(::grpc::ServerContext* /*context*/, const ::cs_lpc::StartHeartbeatRequest* /*request*/, ::cs_lpc::StartHeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartHeartbeat(
      ::grpc::CallbackServerContext* /*context*/, const ::cs_lpc::StartHeartbeatRequest* /*request*/, ::cs_lpc::StartHeartbeatResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StopHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StopHeartbeat() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::cs_lpc::StopHeartbeatRequest, ::cs_lpc::StopHeartbeatResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cs_lpc::StopHeartbeatRequest* request, ::cs_lpc::StopHeartbeatResponse* response) { return this->StopHeartbeat(context, request, response); }));}
    void SetMessageAllocatorFor_StopHeartbeat(
        ::grpc::MessageAllocator< ::cs_lpc::StopHeartbeatRequest, ::cs_lpc::StopHeartbeatResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cs_lpc::StopHeartbeatRequest, ::cs_lpc::StopHeartbeatResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StopHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopHeartbeat(::grpc::ServerContext* /*context*/, const ::cs_lpc::StopHeartbeatRequest* /*request*/, ::cs_lpc::StopHeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StopHeartbeat(
      ::grpc::CallbackServerContext* /*context*/, const ::cs_lpc::StopHeartbeatRequest* /*request*/, ::cs_lpc::StopHeartbeatResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_IsHeartbeatWithinDuration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_IsHeartbeatWithinDuration() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::cs_lpc::IsHeartbeatWithinDurationRequest, ::cs_lpc::IsHeartbeatWithinDurationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cs_lpc::IsHeartbeatWithinDurationRequest* request, ::cs_lpc::IsHeartbeatWithinDurationResponse* response) { return this->IsHeartbeatWithinDuration(context, request, response); }));}
    void SetMessageAllocatorFor_IsHeartbeatWithinDuration(
        ::grpc::MessageAllocator< ::cs_lpc::IsHeartbeatWithinDurationRequest, ::cs_lpc::IsHeartbeatWithinDurationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cs_lpc::IsHeartbeatWithinDurationRequest, ::cs_lpc::IsHeartbeatWithinDurationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_IsHeartbeatWithinDuration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsHeartbeatWithinDuration(::grpc::ServerContext* /*context*/, const ::cs_lpc::IsHeartbeatWithinDurationRequest* /*request*/, ::cs_lpc::IsHeartbeatWithinDurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsHeartbeatWithinDuration(
      ::grpc::CallbackServerContext* /*context*/, const ::cs_lpc::IsHeartbeatWithinDurationRequest* /*request*/, ::cs_lpc::IsHeartbeatWithinDurationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ConsumptionNominalMax : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ConsumptionNominalMax() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::cs_lpc::ConsumptionNominalMaxRequest, ::cs_lpc::ConsumptionNominalMaxResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cs_lpc::ConsumptionNominalMaxRequest* request, ::cs_lpc::ConsumptionNominalMaxResponse* response) { return this->ConsumptionNominalMax(context, request, response); }));}
    void SetMessageAllocatorFor_ConsumptionNominalMax(
        ::grpc::MessageAllocator< ::cs_lpc::ConsumptionNominalMaxRequest, ::cs_lpc::ConsumptionNominalMaxResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cs_lpc::ConsumptionNominalMaxRequest, ::cs_lpc::ConsumptionNominalMaxResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ConsumptionNominalMax() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsumptionNominalMax(::grpc::ServerContext* /*context*/, const ::cs_lpc::ConsumptionNominalMaxRequest* /*request*/, ::cs_lpc::ConsumptionNominalMaxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ConsumptionNominalMax(
      ::grpc::CallbackServerContext* /*context*/, const ::cs_lpc::ConsumptionNominalMaxRequest* /*request*/, ::cs_lpc::ConsumptionNominalMaxResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetConsumptionNominalMax : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetConsumptionNominalMax() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::cs_lpc::SetConsumptionNominalMaxRequest, ::cs_lpc::SetConsumptionNominalMaxResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cs_lpc::SetConsumptionNominalMaxRequest* request, ::cs_lpc::SetConsumptionNominalMaxResponse* response) { return this->SetConsumptionNominalMax(context, request, response); }));}
    void SetMessageAllocatorFor_SetConsumptionNominalMax(
        ::grpc::MessageAllocator< ::cs_lpc::SetConsumptionNominalMaxRequest, ::cs_lpc::SetConsumptionNominalMaxResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cs_lpc::SetConsumptionNominalMaxRequest, ::cs_lpc::SetConsumptionNominalMaxResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetConsumptionNominalMax() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetConsumptionNominalMax(::grpc::ServerContext* /*context*/, const ::cs_lpc::SetConsumptionNominalMaxRequest* /*request*/, ::cs_lpc::SetConsumptionNominalMaxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetConsumptionNominalMax(
      ::grpc::CallbackServerContext* /*context*/, const ::cs_lpc::SetConsumptionNominalMaxRequest* /*request*/, ::cs_lpc::SetConsumptionNominalMaxResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ConsumptionLimit<WithCallbackMethod_SetConsumptionLimit<WithCallbackMethod_PendingConsumptionLimit<WithCallbackMethod_ApproveOrDenyConsumptionLimit<WithCallbackMethod_FailsafeConsumptionActivePowerLimit<WithCallbackMethod_SetFailsafeConsumptionActivePowerLimit<WithCallbackMethod_FailsafeDurationMinimum<WithCallbackMethod_SetFailsafeDurationMinimum<WithCallbackMethod_StartHeartbeat<WithCallbackMethod_StopHeartbeat<WithCallbackMethod_IsHeartbeatWithinDuration<WithCallbackMethod_ConsumptionNominalMax<WithCallbackMethod_SetConsumptionNominalMax<Service > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ConsumptionLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ConsumptionLimit() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ConsumptionLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsumptionLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::ConsumptionLimitRequest* /*request*/, ::cs_lpc::ConsumptionLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetConsumptionLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetConsumptionLimit() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SetConsumptionLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetConsumptionLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::SetConsumptionLimitRequest* /*request*/, ::cs_lpc::SetConsumptionLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PendingConsumptionLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PendingConsumptionLimit() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_PendingConsumptionLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PendingConsumptionLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::PendingConsumptionLimitRequest* /*request*/, ::cs_lpc::PendingConsumptionLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ApproveOrDenyConsumptionLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ApproveOrDenyConsumptionLimit() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ApproveOrDenyConsumptionLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApproveOrDenyConsumptionLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::ApproveOrDenyConsumptionLimitRequest* /*request*/, ::cs_lpc::ApproveOrDenyConsumptionLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FailsafeConsumptionActivePowerLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FailsafeConsumptionActivePowerLimit() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_FailsafeConsumptionActivePowerLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FailsafeConsumptionActivePowerLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::FailsafeConsumptionActivePowerLimitRequest* /*request*/, ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetFailsafeConsumptionActivePowerLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetFailsafeConsumptionActivePowerLimit() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SetFailsafeConsumptionActivePowerLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFailsafeConsumptionActivePowerLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::SetFailsafeConsumptionActivePowerLimitRequest* /*request*/, ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FailsafeDurationMinimum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FailsafeDurationMinimum() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_FailsafeDurationMinimum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FailsafeDurationMinimum(::grpc::ServerContext* /*context*/, const ::cs_lpc::FailsafeDurationMinimumRequest* /*request*/, ::cs_lpc::FailsafeDurationMinimumResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetFailsafeDurationMinimum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetFailsafeDurationMinimum() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SetFailsafeDurationMinimum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFailsafeDurationMinimum(::grpc::ServerContext* /*context*/, const ::cs_lpc::SetFailsafeDurationMinimumRequest* /*request*/, ::cs_lpc::SetFailsafeDurationMinimumResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StartHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartHeartbeat() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_StartHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartHeartbeat(::grpc::ServerContext* /*context*/, const ::cs_lpc::StartHeartbeatRequest* /*request*/, ::cs_lpc::StartHeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StopHeartbeat() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_StopHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopHeartbeat(::grpc::ServerContext* /*context*/, const ::cs_lpc::StopHeartbeatRequest* /*request*/, ::cs_lpc::StopHeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IsHeartbeatWithinDuration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IsHeartbeatWithinDuration() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_IsHeartbeatWithinDuration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsHeartbeatWithinDuration(::grpc::ServerContext* /*context*/, const ::cs_lpc::IsHeartbeatWithinDurationRequest* /*request*/, ::cs_lpc::IsHeartbeatWithinDurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ConsumptionNominalMax : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ConsumptionNominalMax() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_ConsumptionNominalMax() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsumptionNominalMax(::grpc::ServerContext* /*context*/, const ::cs_lpc::ConsumptionNominalMaxRequest* /*request*/, ::cs_lpc::ConsumptionNominalMaxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetConsumptionNominalMax : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetConsumptionNominalMax() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_SetConsumptionNominalMax() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetConsumptionNominalMax(::grpc::ServerContext* /*context*/, const ::cs_lpc::SetConsumptionNominalMaxRequest* /*request*/, ::cs_lpc::SetConsumptionNominalMaxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConsumptionLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ConsumptionLimit() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ConsumptionLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsumptionLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::ConsumptionLimitRequest* /*request*/, ::cs_lpc::ConsumptionLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConsumptionLimit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetConsumptionLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetConsumptionLimit() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SetConsumptionLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetConsumptionLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::SetConsumptionLimitRequest* /*request*/, ::cs_lpc::SetConsumptionLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetConsumptionLimit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PendingConsumptionLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PendingConsumptionLimit() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_PendingConsumptionLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PendingConsumptionLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::PendingConsumptionLimitRequest* /*request*/, ::cs_lpc::PendingConsumptionLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPendingConsumptionLimit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ApproveOrDenyConsumptionLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ApproveOrDenyConsumptionLimit() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ApproveOrDenyConsumptionLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApproveOrDenyConsumptionLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::ApproveOrDenyConsumptionLimitRequest* /*request*/, ::cs_lpc::ApproveOrDenyConsumptionLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestApproveOrDenyConsumptionLimit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FailsafeConsumptionActivePowerLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FailsafeConsumptionActivePowerLimit() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_FailsafeConsumptionActivePowerLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FailsafeConsumptionActivePowerLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::FailsafeConsumptionActivePowerLimitRequest* /*request*/, ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFailsafeConsumptionActivePowerLimit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetFailsafeConsumptionActivePowerLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetFailsafeConsumptionActivePowerLimit() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SetFailsafeConsumptionActivePowerLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFailsafeConsumptionActivePowerLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::SetFailsafeConsumptionActivePowerLimitRequest* /*request*/, ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetFailsafeConsumptionActivePowerLimit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FailsafeDurationMinimum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FailsafeDurationMinimum() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_FailsafeDurationMinimum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FailsafeDurationMinimum(::grpc::ServerContext* /*context*/, const ::cs_lpc::FailsafeDurationMinimumRequest* /*request*/, ::cs_lpc::FailsafeDurationMinimumResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFailsafeDurationMinimum(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetFailsafeDurationMinimum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetFailsafeDurationMinimum() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SetFailsafeDurationMinimum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFailsafeDurationMinimum(::grpc::ServerContext* /*context*/, const ::cs_lpc::SetFailsafeDurationMinimumRequest* /*request*/, ::cs_lpc::SetFailsafeDurationMinimumResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetFailsafeDurationMinimum(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartHeartbeat() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_StartHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartHeartbeat(::grpc::ServerContext* /*context*/, const ::cs_lpc::StartHeartbeatRequest* /*request*/, ::cs_lpc::StartHeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartHeartbeat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StopHeartbeat() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_StopHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopHeartbeat(::grpc::ServerContext* /*context*/, const ::cs_lpc::StopHeartbeatRequest* /*request*/, ::cs_lpc::StopHeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopHeartbeat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsHeartbeatWithinDuration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IsHeartbeatWithinDuration() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_IsHeartbeatWithinDuration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsHeartbeatWithinDuration(::grpc::ServerContext* /*context*/, const ::cs_lpc::IsHeartbeatWithinDurationRequest* /*request*/, ::cs_lpc::IsHeartbeatWithinDurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsHeartbeatWithinDuration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConsumptionNominalMax : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ConsumptionNominalMax() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_ConsumptionNominalMax() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsumptionNominalMax(::grpc::ServerContext* /*context*/, const ::cs_lpc::ConsumptionNominalMaxRequest* /*request*/, ::cs_lpc::ConsumptionNominalMaxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConsumptionNominalMax(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetConsumptionNominalMax : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetConsumptionNominalMax() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_SetConsumptionNominalMax() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetConsumptionNominalMax(::grpc::ServerContext* /*context*/, const ::cs_lpc::SetConsumptionNominalMaxRequest* /*request*/, ::cs_lpc::SetConsumptionNominalMaxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetConsumptionNominalMax(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ConsumptionLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ConsumptionLimit() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ConsumptionLimit(context, request, response); }));
    }
    ~WithRawCallbackMethod_ConsumptionLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsumptionLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::ConsumptionLimitRequest* /*request*/, ::cs_lpc::ConsumptionLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ConsumptionLimit(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetConsumptionLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetConsumptionLimit() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetConsumptionLimit(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetConsumptionLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetConsumptionLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::SetConsumptionLimitRequest* /*request*/, ::cs_lpc::SetConsumptionLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetConsumptionLimit(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PendingConsumptionLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PendingConsumptionLimit() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PendingConsumptionLimit(context, request, response); }));
    }
    ~WithRawCallbackMethod_PendingConsumptionLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PendingConsumptionLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::PendingConsumptionLimitRequest* /*request*/, ::cs_lpc::PendingConsumptionLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PendingConsumptionLimit(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ApproveOrDenyConsumptionLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ApproveOrDenyConsumptionLimit() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ApproveOrDenyConsumptionLimit(context, request, response); }));
    }
    ~WithRawCallbackMethod_ApproveOrDenyConsumptionLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApproveOrDenyConsumptionLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::ApproveOrDenyConsumptionLimitRequest* /*request*/, ::cs_lpc::ApproveOrDenyConsumptionLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ApproveOrDenyConsumptionLimit(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FailsafeConsumptionActivePowerLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FailsafeConsumptionActivePowerLimit() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FailsafeConsumptionActivePowerLimit(context, request, response); }));
    }
    ~WithRawCallbackMethod_FailsafeConsumptionActivePowerLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FailsafeConsumptionActivePowerLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::FailsafeConsumptionActivePowerLimitRequest* /*request*/, ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FailsafeConsumptionActivePowerLimit(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetFailsafeConsumptionActivePowerLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetFailsafeConsumptionActivePowerLimit() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetFailsafeConsumptionActivePowerLimit(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetFailsafeConsumptionActivePowerLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFailsafeConsumptionActivePowerLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::SetFailsafeConsumptionActivePowerLimitRequest* /*request*/, ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetFailsafeConsumptionActivePowerLimit(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FailsafeDurationMinimum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FailsafeDurationMinimum() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FailsafeDurationMinimum(context, request, response); }));
    }
    ~WithRawCallbackMethod_FailsafeDurationMinimum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FailsafeDurationMinimum(::grpc::ServerContext* /*context*/, const ::cs_lpc::FailsafeDurationMinimumRequest* /*request*/, ::cs_lpc::FailsafeDurationMinimumResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FailsafeDurationMinimum(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetFailsafeDurationMinimum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetFailsafeDurationMinimum() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetFailsafeDurationMinimum(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetFailsafeDurationMinimum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetFailsafeDurationMinimum(::grpc::ServerContext* /*context*/, const ::cs_lpc::SetFailsafeDurationMinimumRequest* /*request*/, ::cs_lpc::SetFailsafeDurationMinimumResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetFailsafeDurationMinimum(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StartHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StartHeartbeat() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartHeartbeat(context, request, response); }));
    }
    ~WithRawCallbackMethod_StartHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartHeartbeat(::grpc::ServerContext* /*context*/, const ::cs_lpc::StartHeartbeatRequest* /*request*/, ::cs_lpc::StartHeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartHeartbeat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StopHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StopHeartbeat() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StopHeartbeat(context, request, response); }));
    }
    ~WithRawCallbackMethod_StopHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopHeartbeat(::grpc::ServerContext* /*context*/, const ::cs_lpc::StopHeartbeatRequest* /*request*/, ::cs_lpc::StopHeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StopHeartbeat(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_IsHeartbeatWithinDuration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_IsHeartbeatWithinDuration() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IsHeartbeatWithinDuration(context, request, response); }));
    }
    ~WithRawCallbackMethod_IsHeartbeatWithinDuration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsHeartbeatWithinDuration(::grpc::ServerContext* /*context*/, const ::cs_lpc::IsHeartbeatWithinDurationRequest* /*request*/, ::cs_lpc::IsHeartbeatWithinDurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsHeartbeatWithinDuration(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ConsumptionNominalMax : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ConsumptionNominalMax() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ConsumptionNominalMax(context, request, response); }));
    }
    ~WithRawCallbackMethod_ConsumptionNominalMax() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsumptionNominalMax(::grpc::ServerContext* /*context*/, const ::cs_lpc::ConsumptionNominalMaxRequest* /*request*/, ::cs_lpc::ConsumptionNominalMaxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ConsumptionNominalMax(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetConsumptionNominalMax : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetConsumptionNominalMax() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetConsumptionNominalMax(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetConsumptionNominalMax() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetConsumptionNominalMax(::grpc::ServerContext* /*context*/, const ::cs_lpc::SetConsumptionNominalMaxRequest* /*request*/, ::cs_lpc::SetConsumptionNominalMaxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetConsumptionNominalMax(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ConsumptionLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ConsumptionLimit() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cs_lpc::ConsumptionLimitRequest, ::cs_lpc::ConsumptionLimitResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cs_lpc::ConsumptionLimitRequest, ::cs_lpc::ConsumptionLimitResponse>* streamer) {
                       return this->StreamedConsumptionLimit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ConsumptionLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ConsumptionLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::ConsumptionLimitRequest* /*request*/, ::cs_lpc::ConsumptionLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConsumptionLimit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cs_lpc::ConsumptionLimitRequest,::cs_lpc::ConsumptionLimitResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetConsumptionLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetConsumptionLimit() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cs_lpc::SetConsumptionLimitRequest, ::cs_lpc::SetConsumptionLimitResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cs_lpc::SetConsumptionLimitRequest, ::cs_lpc::SetConsumptionLimitResponse>* streamer) {
                       return this->StreamedSetConsumptionLimit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetConsumptionLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetConsumptionLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::SetConsumptionLimitRequest* /*request*/, ::cs_lpc::SetConsumptionLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetConsumptionLimit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cs_lpc::SetConsumptionLimitRequest,::cs_lpc::SetConsumptionLimitResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PendingConsumptionLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PendingConsumptionLimit() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cs_lpc::PendingConsumptionLimitRequest, ::cs_lpc::PendingConsumptionLimitResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cs_lpc::PendingConsumptionLimitRequest, ::cs_lpc::PendingConsumptionLimitResponse>* streamer) {
                       return this->StreamedPendingConsumptionLimit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PendingConsumptionLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PendingConsumptionLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::PendingConsumptionLimitRequest* /*request*/, ::cs_lpc::PendingConsumptionLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPendingConsumptionLimit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cs_lpc::PendingConsumptionLimitRequest,::cs_lpc::PendingConsumptionLimitResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ApproveOrDenyConsumptionLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ApproveOrDenyConsumptionLimit() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cs_lpc::ApproveOrDenyConsumptionLimitRequest, ::cs_lpc::ApproveOrDenyConsumptionLimitResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cs_lpc::ApproveOrDenyConsumptionLimitRequest, ::cs_lpc::ApproveOrDenyConsumptionLimitResponse>* streamer) {
                       return this->StreamedApproveOrDenyConsumptionLimit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ApproveOrDenyConsumptionLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ApproveOrDenyConsumptionLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::ApproveOrDenyConsumptionLimitRequest* /*request*/, ::cs_lpc::ApproveOrDenyConsumptionLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedApproveOrDenyConsumptionLimit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cs_lpc::ApproveOrDenyConsumptionLimitRequest,::cs_lpc::ApproveOrDenyConsumptionLimitResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FailsafeConsumptionActivePowerLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FailsafeConsumptionActivePowerLimit() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cs_lpc::FailsafeConsumptionActivePowerLimitRequest, ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cs_lpc::FailsafeConsumptionActivePowerLimitRequest, ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse>* streamer) {
                       return this->StreamedFailsafeConsumptionActivePowerLimit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FailsafeConsumptionActivePowerLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FailsafeConsumptionActivePowerLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::FailsafeConsumptionActivePowerLimitRequest* /*request*/, ::cs_lpc::FailsafeConsumptionActivePowerLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFailsafeConsumptionActivePowerLimit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cs_lpc::FailsafeConsumptionActivePowerLimitRequest,::cs_lpc::FailsafeConsumptionActivePowerLimitResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetFailsafeConsumptionActivePowerLimit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetFailsafeConsumptionActivePowerLimit() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cs_lpc::SetFailsafeConsumptionActivePowerLimitRequest, ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cs_lpc::SetFailsafeConsumptionActivePowerLimitRequest, ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse>* streamer) {
                       return this->StreamedSetFailsafeConsumptionActivePowerLimit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetFailsafeConsumptionActivePowerLimit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetFailsafeConsumptionActivePowerLimit(::grpc::ServerContext* /*context*/, const ::cs_lpc::SetFailsafeConsumptionActivePowerLimitRequest* /*request*/, ::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetFailsafeConsumptionActivePowerLimit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cs_lpc::SetFailsafeConsumptionActivePowerLimitRequest,::cs_lpc::SetFailsafeConsumptionActivePowerLimitResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FailsafeDurationMinimum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FailsafeDurationMinimum() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cs_lpc::FailsafeDurationMinimumRequest, ::cs_lpc::FailsafeDurationMinimumResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cs_lpc::FailsafeDurationMinimumRequest, ::cs_lpc::FailsafeDurationMinimumResponse>* streamer) {
                       return this->StreamedFailsafeDurationMinimum(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FailsafeDurationMinimum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FailsafeDurationMinimum(::grpc::ServerContext* /*context*/, const ::cs_lpc::FailsafeDurationMinimumRequest* /*request*/, ::cs_lpc::FailsafeDurationMinimumResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFailsafeDurationMinimum(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cs_lpc::FailsafeDurationMinimumRequest,::cs_lpc::FailsafeDurationMinimumResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetFailsafeDurationMinimum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetFailsafeDurationMinimum() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cs_lpc::SetFailsafeDurationMinimumRequest, ::cs_lpc::SetFailsafeDurationMinimumResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cs_lpc::SetFailsafeDurationMinimumRequest, ::cs_lpc::SetFailsafeDurationMinimumResponse>* streamer) {
                       return this->StreamedSetFailsafeDurationMinimum(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetFailsafeDurationMinimum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetFailsafeDurationMinimum(::grpc::ServerContext* /*context*/, const ::cs_lpc::SetFailsafeDurationMinimumRequest* /*request*/, ::cs_lpc::SetFailsafeDurationMinimumResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetFailsafeDurationMinimum(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cs_lpc::SetFailsafeDurationMinimumRequest,::cs_lpc::SetFailsafeDurationMinimumResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartHeartbeat() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cs_lpc::StartHeartbeatRequest, ::cs_lpc::StartHeartbeatResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cs_lpc::StartHeartbeatRequest, ::cs_lpc::StartHeartbeatResponse>* streamer) {
                       return this->StreamedStartHeartbeat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StartHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartHeartbeat(::grpc::ServerContext* /*context*/, const ::cs_lpc::StartHeartbeatRequest* /*request*/, ::cs_lpc::StartHeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartHeartbeat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cs_lpc::StartHeartbeatRequest,::cs_lpc::StartHeartbeatResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopHeartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StopHeartbeat() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cs_lpc::StopHeartbeatRequest, ::cs_lpc::StopHeartbeatResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cs_lpc::StopHeartbeatRequest, ::cs_lpc::StopHeartbeatResponse>* streamer) {
                       return this->StreamedStopHeartbeat(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StopHeartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopHeartbeat(::grpc::ServerContext* /*context*/, const ::cs_lpc::StopHeartbeatRequest* /*request*/, ::cs_lpc::StopHeartbeatResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopHeartbeat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cs_lpc::StopHeartbeatRequest,::cs_lpc::StopHeartbeatResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsHeartbeatWithinDuration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IsHeartbeatWithinDuration() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cs_lpc::IsHeartbeatWithinDurationRequest, ::cs_lpc::IsHeartbeatWithinDurationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cs_lpc::IsHeartbeatWithinDurationRequest, ::cs_lpc::IsHeartbeatWithinDurationResponse>* streamer) {
                       return this->StreamedIsHeartbeatWithinDuration(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IsHeartbeatWithinDuration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsHeartbeatWithinDuration(::grpc::ServerContext* /*context*/, const ::cs_lpc::IsHeartbeatWithinDurationRequest* /*request*/, ::cs_lpc::IsHeartbeatWithinDurationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsHeartbeatWithinDuration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cs_lpc::IsHeartbeatWithinDurationRequest,::cs_lpc::IsHeartbeatWithinDurationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ConsumptionNominalMax : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ConsumptionNominalMax() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cs_lpc::ConsumptionNominalMaxRequest, ::cs_lpc::ConsumptionNominalMaxResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cs_lpc::ConsumptionNominalMaxRequest, ::cs_lpc::ConsumptionNominalMaxResponse>* streamer) {
                       return this->StreamedConsumptionNominalMax(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ConsumptionNominalMax() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ConsumptionNominalMax(::grpc::ServerContext* /*context*/, const ::cs_lpc::ConsumptionNominalMaxRequest* /*request*/, ::cs_lpc::ConsumptionNominalMaxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConsumptionNominalMax(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cs_lpc::ConsumptionNominalMaxRequest,::cs_lpc::ConsumptionNominalMaxResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetConsumptionNominalMax : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetConsumptionNominalMax() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cs_lpc::SetConsumptionNominalMaxRequest, ::cs_lpc::SetConsumptionNominalMaxResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cs_lpc::SetConsumptionNominalMaxRequest, ::cs_lpc::SetConsumptionNominalMaxResponse>* streamer) {
                       return this->StreamedSetConsumptionNominalMax(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetConsumptionNominalMax() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetConsumptionNominalMax(::grpc::ServerContext* /*context*/, const ::cs_lpc::SetConsumptionNominalMaxRequest* /*request*/, ::cs_lpc::SetConsumptionNominalMaxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetConsumptionNominalMax(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cs_lpc::SetConsumptionNominalMaxRequest,::cs_lpc::SetConsumptionNominalMaxResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ConsumptionLimit<WithStreamedUnaryMethod_SetConsumptionLimit<WithStreamedUnaryMethod_PendingConsumptionLimit<WithStreamedUnaryMethod_ApproveOrDenyConsumptionLimit<WithStreamedUnaryMethod_FailsafeConsumptionActivePowerLimit<WithStreamedUnaryMethod_SetFailsafeConsumptionActivePowerLimit<WithStreamedUnaryMethod_FailsafeDurationMinimum<WithStreamedUnaryMethod_SetFailsafeDurationMinimum<WithStreamedUnaryMethod_StartHeartbeat<WithStreamedUnaryMethod_StopHeartbeat<WithStreamedUnaryMethod_IsHeartbeatWithinDuration<WithStreamedUnaryMethod_ConsumptionNominalMax<WithStreamedUnaryMethod_SetConsumptionNominalMax<Service > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ConsumptionLimit<WithStreamedUnaryMethod_SetConsumptionLimit<WithStreamedUnaryMethod_PendingConsumptionLimit<WithStreamedUnaryMethod_ApproveOrDenyConsumptionLimit<WithStreamedUnaryMethod_FailsafeConsumptionActivePowerLimit<WithStreamedUnaryMethod_SetFailsafeConsumptionActivePowerLimit<WithStreamedUnaryMethod_FailsafeDurationMinimum<WithStreamedUnaryMethod_SetFailsafeDurationMinimum<WithStreamedUnaryMethod_StartHeartbeat<WithStreamedUnaryMethod_StopHeartbeat<WithStreamedUnaryMethod_IsHeartbeatWithinDuration<WithStreamedUnaryMethod_ConsumptionNominalMax<WithStreamedUnaryMethod_SetConsumptionNominalMax<Service > > > > > > > > > > > > > StreamedService;
};

}  // namespace cs_lpc


#endif  // GRPC_usecases_2fcs_2flpc_2fservice_2eproto__INCLUDED
