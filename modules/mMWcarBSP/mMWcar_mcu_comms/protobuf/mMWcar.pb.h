/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_MMWCAR_PB_H_INCLUDED
#define PB_MMWCAR_PB_H_INCLUDED
#include <everest/3rd_party/nanopb/pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _ResetReason {
    ResetReason_UNKNOWN = 0,
    ResetReason_USER = 1,
    ResetReason_WDG = 2
} ResetReason;

typedef enum _ConfigHardwareRevisionMajor {
    ConfigHardwareRevisionMajor_HW_MAJOR_REV_UNKNOWN = 0,
    ConfigHardwareRevisionMajor_HW_MAJOR_REV_A = 1
} ConfigHardwareRevisionMajor;

typedef enum _MeasRequest {
    MeasRequest_MEAS_UNKNOWN = 0,
    MeasRequest_AC_INSTANT = 1,
    MeasRequest_AC_STATISTICS = 2,
    MeasRequest_DC_INSTANT = 3,
    MeasRequest_DC_STATISTICS = 4,
    MeasRequest_BASIC_CHARGE_COMMS_INSTANT = 5
} MeasRequest;

/* Nominal CP states */
typedef enum _CpState {
    CpState_STATE_A = 0,
    CpState_STATE_B = 1,
    CpState_STATE_C = 2,
    CpState_STATE_D = 3,
    CpState_STATE_E = 4,
    CpState_STATE_F = 5
} CpState;

/* Nominal PP states */
typedef enum _PpState {
    PpState_STATE_NC = 0,
    PpState_STATE_13A = 1,
    PpState_STATE_20A = 2,
    PpState_STATE_32A = 3,
    PpState_STATE_70A = 4,
    PpState_STATE_FAULT = 5
} PpState;

typedef enum _ACPhase {
    ACPhase_Ua = 0,
    ACPhase_Ub = 1,
    ACPhase_Uc = 2
} ACPhase;

/* Struct definitions */
typedef struct _KeepAlive {
    uint32_t time_stamp;
    ConfigHardwareRevisionMajor hw_revision_major;
    uint32_t hw_revision_minor;
    char sw_version_string[51];
} KeepAlive;

typedef struct _ACMeasInstant {
    double Ua;
    double Ub;
    double Uc;
} ACMeasInstant;

typedef struct _ACPhaseStats {
    double min;
    double max;
    double avg;
} ACPhaseStats;

typedef struct _ACMeasStats {
    bool has_Ua;
    ACPhaseStats Ua;
    bool has_Ub;
    ACPhaseStats Ub;
    bool has_Uc;
    ACPhaseStats Uc;
    uint32_t sample_rate_ms;
    uint32_t window_len_samples;
} ACMeasStats;

typedef struct _BootConfigRequest { /* TODO */
    char dummy_field;
} BootConfigRequest;

typedef struct _BootConfigResponse { /* TODO */
    char dummy_field;
} BootConfigResponse;

typedef struct _ErrorFlags { /* TODO */
    char dummy_field;
} ErrorFlags;

typedef struct _CalibrationValues {
    uint16_t atm90_ua_gain;
    uint16_t atm90_ub_gain;
    uint16_t atm90_uc_gain;
    uint16_t atm90_ua_offset;
    uint16_t atm90_ub_offset;
    uint16_t atm90_uc_offset;
} CalibrationValues;

typedef struct _AC_Calibration {
    ACPhase phase;
    pb_size_t which_type;
    union {
        bool offset; /* unused for now, MCU will detect calibration on offset by which_type */
        double gain; /* use this value as reference voltage passed to calibration routine */
    } type;
} AC_Calibration;

typedef struct _CalibrationRequest {
    pb_size_t which_calibration_type;
    union {
        AC_Calibration ac;
    } calibration_type;
} CalibrationRequest;

/* This container message is send from EVerest to MCU and may contain any allowed message in that direction. */
typedef struct _EverestToMcu {
    pb_size_t which_payload;
    union {
        bool reset;
        KeepAlive keep_alive;
        BootConfigResponse config_response;
        MeasRequest request_measurement;
        bool get_calibration;
        CalibrationValues set_calibration;
        CalibrationRequest request_calibration;
        CpState set_cp_state;
    } payload;
} EverestToMcu;

typedef struct _CalibrationResponse {
    pb_size_t which_calibration_type;
    union {
        AC_Calibration ac;
    } calibration_type;
    uint32_t value;
} CalibrationResponse;

/* This container message is send from MCU to EVerest and may contain any allowed message in that direction. */
typedef struct _McuToEverest {
    pb_size_t which_payload;
    union {
        ResetReason reset;
        KeepAlive keep_alive;
        BootConfigRequest config_request;
        ACMeasInstant ac_meas_instant;
        ACMeasStats ac_meas_statistics;
        CalibrationValues calibration_values;
        CalibrationResponse response_calibration;
    } payload;
} McuToEverest;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _ResetReason_MIN ResetReason_UNKNOWN
#define _ResetReason_MAX ResetReason_WDG
#define _ResetReason_ARRAYSIZE ((ResetReason)(ResetReason_WDG+1))

#define _ConfigHardwareRevisionMajor_MIN ConfigHardwareRevisionMajor_HW_MAJOR_REV_UNKNOWN
#define _ConfigHardwareRevisionMajor_MAX ConfigHardwareRevisionMajor_HW_MAJOR_REV_A
#define _ConfigHardwareRevisionMajor_ARRAYSIZE ((ConfigHardwareRevisionMajor)(ConfigHardwareRevisionMajor_HW_MAJOR_REV_A+1))

#define _MeasRequest_MIN MeasRequest_MEAS_UNKNOWN
#define _MeasRequest_MAX MeasRequest_BASIC_CHARGE_COMMS_INSTANT
#define _MeasRequest_ARRAYSIZE ((MeasRequest)(MeasRequest_BASIC_CHARGE_COMMS_INSTANT+1))

#define _CpState_MIN CpState_STATE_A
#define _CpState_MAX CpState_STATE_F
#define _CpState_ARRAYSIZE ((CpState)(CpState_STATE_F+1))

#define _PpState_MIN PpState_STATE_NC
#define _PpState_MAX PpState_STATE_FAULT
#define _PpState_ARRAYSIZE ((PpState)(PpState_STATE_FAULT+1))

#define _ACPhase_MIN ACPhase_Ua
#define _ACPhase_MAX ACPhase_Uc
#define _ACPhase_ARRAYSIZE ((ACPhase)(ACPhase_Uc+1))

#define EverestToMcu_payload_request_measurement_ENUMTYPE MeasRequest
#define EverestToMcu_payload_set_cp_state_ENUMTYPE CpState

#define McuToEverest_payload_reset_ENUMTYPE ResetReason

#define KeepAlive_hw_revision_major_ENUMTYPE ConfigHardwareRevisionMajor










#define AC_Calibration_phase_ENUMTYPE ACPhase


/* Initializer values for message structs */
#define EverestToMcu_init_default                {0, {0}}
#define McuToEverest_init_default                {0, {_ResetReason_MIN}}
#define KeepAlive_init_default                   {0, _ConfigHardwareRevisionMajor_MIN, 0, ""}
#define ACMeasInstant_init_default               {0, 0, 0}
#define ACMeasStats_init_default                 {false, ACPhaseStats_init_default, false, ACPhaseStats_init_default, false, ACPhaseStats_init_default, 0, 0}
#define ACPhaseStats_init_default                {0, 0, 0}
#define BootConfigRequest_init_default           {0}
#define BootConfigResponse_init_default          {0}
#define ErrorFlags_init_default                  {0}
#define CalibrationRequest_init_default          {0, {AC_Calibration_init_default}}
#define CalibrationResponse_init_default         {0, {AC_Calibration_init_default}, 0}
#define CalibrationValues_init_default           {0, 0, 0, 0, 0, 0}
#define AC_Calibration_init_default              {_ACPhase_MIN, 0, {0}}
#define EverestToMcu_init_zero                   {0, {0}}
#define McuToEverest_init_zero                   {0, {_ResetReason_MIN}}
#define KeepAlive_init_zero                      {0, _ConfigHardwareRevisionMajor_MIN, 0, ""}
#define ACMeasInstant_init_zero                  {0, 0, 0}
#define ACMeasStats_init_zero                    {false, ACPhaseStats_init_zero, false, ACPhaseStats_init_zero, false, ACPhaseStats_init_zero, 0, 0}
#define ACPhaseStats_init_zero                   {0, 0, 0}
#define BootConfigRequest_init_zero              {0}
#define BootConfigResponse_init_zero             {0}
#define ErrorFlags_init_zero                     {0}
#define CalibrationRequest_init_zero             {0, {AC_Calibration_init_zero}}
#define CalibrationResponse_init_zero            {0, {AC_Calibration_init_zero}, 0}
#define CalibrationValues_init_zero              {0, 0, 0, 0, 0, 0}
#define AC_Calibration_init_zero                 {_ACPhase_MIN, 0, {0}}

/* Field tags (for use in manual encoding/decoding) */
#define KeepAlive_time_stamp_tag                 1
#define KeepAlive_hw_revision_major_tag          2
#define KeepAlive_hw_revision_minor_tag          3
#define KeepAlive_sw_version_string_tag          4
#define ACMeasInstant_Ua_tag                     1
#define ACMeasInstant_Ub_tag                     2
#define ACMeasInstant_Uc_tag                     3
#define ACPhaseStats_min_tag                     1
#define ACPhaseStats_max_tag                     2
#define ACPhaseStats_avg_tag                     3
#define ACMeasStats_Ua_tag                       1
#define ACMeasStats_Ub_tag                       2
#define ACMeasStats_Uc_tag                       3
#define ACMeasStats_sample_rate_ms_tag           4
#define ACMeasStats_window_len_samples_tag       5
#define CalibrationValues_atm90_ua_gain_tag      1
#define CalibrationValues_atm90_ub_gain_tag      2
#define CalibrationValues_atm90_uc_gain_tag      3
#define CalibrationValues_atm90_ua_offset_tag    4
#define CalibrationValues_atm90_ub_offset_tag    5
#define CalibrationValues_atm90_uc_offset_tag    6
#define AC_Calibration_phase_tag                 1
#define AC_Calibration_offset_tag                2
#define AC_Calibration_gain_tag                  3
#define CalibrationRequest_ac_tag                1
#define EverestToMcu_reset_tag                   1
#define EverestToMcu_keep_alive_tag              2
#define EverestToMcu_config_response_tag         3
#define EverestToMcu_request_measurement_tag     4
#define EverestToMcu_get_calibration_tag         5
#define EverestToMcu_set_calibration_tag         6
#define EverestToMcu_request_calibration_tag     7
#define EverestToMcu_set_cp_state_tag            8
#define CalibrationResponse_ac_tag               1
#define CalibrationResponse_value_tag            2
#define McuToEverest_reset_tag                   1
#define McuToEverest_keep_alive_tag              2
#define McuToEverest_config_request_tag          3
#define McuToEverest_ac_meas_instant_tag         4
#define McuToEverest_ac_meas_statistics_tag      5
#define McuToEverest_calibration_values_tag      6
#define McuToEverest_response_calibration_tag    7

/* Struct field encoding specification for nanopb */
#define EverestToMcu_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    BOOL,     (payload,reset,payload.reset),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,keep_alive,payload.keep_alive),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,config_response,payload.config_response),   3) \
X(a, STATIC,   ONEOF,    UENUM,    (payload,request_measurement,payload.request_measurement),   4) \
X(a, STATIC,   ONEOF,    BOOL,     (payload,get_calibration,payload.get_calibration),   5) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,set_calibration,payload.set_calibration),   6) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,request_calibration,payload.request_calibration),   7) \
X(a, STATIC,   ONEOF,    UENUM,    (payload,set_cp_state,payload.set_cp_state),   8)
#define EverestToMcu_CALLBACK NULL
#define EverestToMcu_DEFAULT NULL
#define EverestToMcu_payload_keep_alive_MSGTYPE KeepAlive
#define EverestToMcu_payload_config_response_MSGTYPE BootConfigResponse
#define EverestToMcu_payload_set_calibration_MSGTYPE CalibrationValues
#define EverestToMcu_payload_request_calibration_MSGTYPE CalibrationRequest

#define McuToEverest_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    UENUM,    (payload,reset,payload.reset),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,keep_alive,payload.keep_alive),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,config_request,payload.config_request),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,ac_meas_instant,payload.ac_meas_instant),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,ac_meas_statistics,payload.ac_meas_statistics),   5) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,calibration_values,payload.calibration_values),   6) \
X(a, STATIC,   ONEOF,    MESSAGE,  (payload,response_calibration,payload.response_calibration),   7)
#define McuToEverest_CALLBACK NULL
#define McuToEverest_DEFAULT NULL
#define McuToEverest_payload_keep_alive_MSGTYPE KeepAlive
#define McuToEverest_payload_config_request_MSGTYPE BootConfigRequest
#define McuToEverest_payload_ac_meas_instant_MSGTYPE ACMeasInstant
#define McuToEverest_payload_ac_meas_statistics_MSGTYPE ACMeasStats
#define McuToEverest_payload_calibration_values_MSGTYPE CalibrationValues
#define McuToEverest_payload_response_calibration_MSGTYPE CalibrationResponse

#define KeepAlive_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   time_stamp,        1) \
X(a, STATIC,   SINGULAR, UENUM,    hw_revision_major,   2) \
X(a, STATIC,   SINGULAR, UINT32,   hw_revision_minor,   3) \
X(a, STATIC,   SINGULAR, STRING,   sw_version_string,   4)
#define KeepAlive_CALLBACK NULL
#define KeepAlive_DEFAULT NULL

#define ACMeasInstant_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, DOUBLE,   Ua,                1) \
X(a, STATIC,   SINGULAR, DOUBLE,   Ub,                2) \
X(a, STATIC,   SINGULAR, DOUBLE,   Uc,                3)
#define ACMeasInstant_CALLBACK NULL
#define ACMeasInstant_DEFAULT NULL

#define ACMeasStats_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  Ua,                1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  Ub,                2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  Uc,                3) \
X(a, STATIC,   SINGULAR, UINT32,   sample_rate_ms,    4) \
X(a, STATIC,   SINGULAR, UINT32,   window_len_samples,   5)
#define ACMeasStats_CALLBACK NULL
#define ACMeasStats_DEFAULT NULL
#define ACMeasStats_Ua_MSGTYPE ACPhaseStats
#define ACMeasStats_Ub_MSGTYPE ACPhaseStats
#define ACMeasStats_Uc_MSGTYPE ACPhaseStats

#define ACPhaseStats_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, DOUBLE,   min,               1) \
X(a, STATIC,   SINGULAR, DOUBLE,   max,               2) \
X(a, STATIC,   SINGULAR, DOUBLE,   avg,               3)
#define ACPhaseStats_CALLBACK NULL
#define ACPhaseStats_DEFAULT NULL

#define BootConfigRequest_FIELDLIST(X, a) \

#define BootConfigRequest_CALLBACK NULL
#define BootConfigRequest_DEFAULT NULL

#define BootConfigResponse_FIELDLIST(X, a) \

#define BootConfigResponse_CALLBACK NULL
#define BootConfigResponse_DEFAULT NULL

#define ErrorFlags_FIELDLIST(X, a) \

#define ErrorFlags_CALLBACK NULL
#define ErrorFlags_DEFAULT NULL

#define CalibrationRequest_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (calibration_type,ac,calibration_type.ac),   1)
#define CalibrationRequest_CALLBACK NULL
#define CalibrationRequest_DEFAULT NULL
#define CalibrationRequest_calibration_type_ac_MSGTYPE AC_Calibration

#define CalibrationResponse_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (calibration_type,ac,calibration_type.ac),   1) \
X(a, STATIC,   SINGULAR, UINT32,   value,             2)
#define CalibrationResponse_CALLBACK NULL
#define CalibrationResponse_DEFAULT NULL
#define CalibrationResponse_calibration_type_ac_MSGTYPE AC_Calibration

#define CalibrationValues_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   atm90_ua_gain,     1) \
X(a, STATIC,   SINGULAR, UINT32,   atm90_ub_gain,     2) \
X(a, STATIC,   SINGULAR, UINT32,   atm90_uc_gain,     3) \
X(a, STATIC,   SINGULAR, UINT32,   atm90_ua_offset,   4) \
X(a, STATIC,   SINGULAR, UINT32,   atm90_ub_offset,   5) \
X(a, STATIC,   SINGULAR, UINT32,   atm90_uc_offset,   6)
#define CalibrationValues_CALLBACK NULL
#define CalibrationValues_DEFAULT NULL

#define AC_Calibration_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    phase,             1) \
X(a, STATIC,   ONEOF,    BOOL,     (type,offset,type.offset),   2) \
X(a, STATIC,   ONEOF,    DOUBLE,   (type,gain,type.gain),   3)
#define AC_Calibration_CALLBACK NULL
#define AC_Calibration_DEFAULT NULL

extern const pb_msgdesc_t EverestToMcu_msg;
extern const pb_msgdesc_t McuToEverest_msg;
extern const pb_msgdesc_t KeepAlive_msg;
extern const pb_msgdesc_t ACMeasInstant_msg;
extern const pb_msgdesc_t ACMeasStats_msg;
extern const pb_msgdesc_t ACPhaseStats_msg;
extern const pb_msgdesc_t BootConfigRequest_msg;
extern const pb_msgdesc_t BootConfigResponse_msg;
extern const pb_msgdesc_t ErrorFlags_msg;
extern const pb_msgdesc_t CalibrationRequest_msg;
extern const pb_msgdesc_t CalibrationResponse_msg;
extern const pb_msgdesc_t CalibrationValues_msg;
extern const pb_msgdesc_t AC_Calibration_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define EverestToMcu_fields &EverestToMcu_msg
#define McuToEverest_fields &McuToEverest_msg
#define KeepAlive_fields &KeepAlive_msg
#define ACMeasInstant_fields &ACMeasInstant_msg
#define ACMeasStats_fields &ACMeasStats_msg
#define ACPhaseStats_fields &ACPhaseStats_msg
#define BootConfigRequest_fields &BootConfigRequest_msg
#define BootConfigResponse_fields &BootConfigResponse_msg
#define ErrorFlags_fields &ErrorFlags_msg
#define CalibrationRequest_fields &CalibrationRequest_msg
#define CalibrationResponse_fields &CalibrationResponse_msg
#define CalibrationValues_fields &CalibrationValues_msg
#define AC_Calibration_fields &AC_Calibration_msg

/* Maximum encoded size of messages (where known) */
#define ACMeasInstant_size                       27
#define ACMeasStats_size                         99
#define ACPhaseStats_size                        27
#define AC_Calibration_size                      11
#define BootConfigRequest_size                   0
#define BootConfigResponse_size                  0
#define CalibrationRequest_size                  13
#define CalibrationResponse_size                 19
#define CalibrationValues_size                   24
#define ErrorFlags_size                          0
#define EverestToMcu_size                        68
#define KeepAlive_size                           66
#define MMWCAR_PB_H_MAX_SIZE                     McuToEverest_size
#define McuToEverest_size                        101

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
