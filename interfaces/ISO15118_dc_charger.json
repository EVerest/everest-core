{
    "description": "This interface defines an ISO15118 DC Charger",
    "cmds": {
        "MISSING_set_evse_energy_to_be_delivered":{
            "description": "Optional: Amount of energy to be delivered by the EVSE.",
            "arguments": {
                "energy": {
                    "description": "Energy in Watthours",
                    "type": "number",
                    "minimum": 0,
                    "maximum": 200000
                }
            }
        },
        "set_evse_peak_current_ripple":{
            "description": "Peak-to-peak magnitude of the current ripple of the EVSE",
            "arguments": {
                "current": {
                    "description": "Current in Ampere",
                    "type": "number",
                    "minimum": 0,
                    "maximum": 400
                }
            }
        },
        "MISSING_set_evse_current_regulation_tolerance":{
            "description": "Optional: Sets the absolute magnitude of the current regulation tolerance of the EVSE",
            "arguments": {
                "current": {
                    "description": "Current in Ampere",
                    "type": "number",
                    "minimum": 0,
                    "maximum": 400
                }
            }
        },
        "set_evse_minimum_voltage_limit":{
            "description": "Sets the minimum voltage the EVSE can deliver with the expected accuracy",
            "arguments": {
                "min_voltage": {
                    "description": "Minimum voltage in Volt",
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1000
                }
            }
        },
        "set_evse_minimum_current_limit":{
            "description": "Sets the minimum current the EVSE can deliver with the expected accuracy.",
            "arguments": {
                "min_current": {
                    "description": "Minimum current in Ampere",
                    "type": "number",
                    "minimum": 0,
                    "maximum": 400
                }
            }
        },
        "set_evse_maximum_voltage_limit":{
            "description": "Optional: Sets the maximum voltage the EVSE can deliver.",
            "arguments": {
                "max_voltage": {
                    "description": "Maximum voltage in Volt",
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1000
                }
            }
        },
        "set_evse_maximum_current_limit":{
            "description": "Optional: Sets the maximum current the EVSE can deliver.",
            "arguments": {
                "max_current": {
                    "description": "Maximum current in Ampere",
                    "type": "number",
                    "minimum": 0,
                    "maximum": 400
                }
            }
        },
        "set_evse_maximum_power_limit":{
            "description": "Optional: Sets the maximum power the EVSE can deliver.",
            "arguments": {
                "max_power": {
                    "description": "Maximum power in Watt",
                    "type": "number",
                    "minimum": 0,
                    "maximum": 200000
                }
            }
        },
        "set_evse_current_limit_achieved": {
            "description": "Sets the EVSECurrentLimitAchieved flag that indicates whether the EVSE has reached its current limit.",
            "arguments": {
                "current_limit_achieved": {
                    "description": "True, if the EVSE has reached its current limit, false otherwise",
                    "type": "boolean"
                }
            }
        },
        "set_evse_voltage_limit_achieved": {
            "description": "Sets the EVSEVoltageLimitAchieved flag that indicates whether the EVSE has reached its voltage limit.",
            "arguments": {
                "voltage_limit_achieved": {
                    "description": "True, if the EVSE has reached its voltage limit, false otherwise",
                    "type": "boolean"
                }
            }
        },
        "set_evse_power_limit_achieved": {
            "description": "Sets the EVSEPowerLimitAchieved flag that indicates whether the EVSE has reached its power limit.",
            "arguments": {
                "power_limit_achieved": {
                    "description": "True, if the EVSE has reached its power limit, false otherwise",
                    "type": "boolean"
                }
            }
        },
        "set_evse_present_voltage":{
            "description": "Sets the output voltage of the EVSE.",
            "arguments" : {
                "voltage": {
                    "description": "Output voltage in Volt",
                    "type": "number",
                    "minimum": 0,
                    "maximum": 1000
                }
            }
        },
        "set_evse_present_current":{
            "description": "Sets the output current of the EVSE",
            "arguments": {
                "current": {
                    "description": "Output current in Ampere",
                    "type": "number",
                    "minimum": 0,
                    "maximum": 400
                }
            }
        },
        "set_evseid": {
            "description": "Sets the ID that uniquely identifies the EVSE. The EVSEID shall match the following structure: <EVSEID> = <Country Code> <S> <EVSE Operator ID> <S> <ID Type> <Power Outlet ID>",
            "arguments" : {
                "id": {
                    "description": "EVSE ID",
                    "type": "string"
                }
            }
        },
        "set_meter_reading": {
            "description": "Sets the current meter reading in Watthours from the EVSE.",
            "arguments" : {
                "id": {
                    "description": "Meter ID",
                    "type": "string",
                    "pattern": "/^[A-Za-z0-9]{1,32}$/"
                },
                "timestamp":{
                    "description": "Timestamp (unix epoch time)",
                    "type": "integer"
                },
                "value": {
                    "description": "Current meter reading",
                    "type": "number"
                }
            }
        },
        "set_evse_notification": {
            "description": "Sets a notification value used by the SECC to influence the behaviour of the EVCC. The EVSENotification contains an action that the SECC wants the EVCC to perform",
            "arguments" : {
                "notification": {
                    "description": "EVSE notification",
                    "type": "string",
                    "enum": ["None", "StopCharging", "ReNegotiation"]
                },
                "max_delay": {
                    "description": "Indicates the time in seconds until it expects the EVCC to react on the action request indicated in the coresponding EVSENotification",
                    "type": "integer"
                }
            }
        },
        "set_receipt_required": {
            "description": "Optional: Indicate that the EVCC is required to send a MeteringReceiptReq message for the purpose of signing the meter info record. If ReceiptRequired is equal to True, the EVCC is required to send a MeteringReceiptReq message including the signature.",
            "arguments" : {
                "receipt_required": {
                    "description": "Receipt required",
                    "type": "boolean"
                }
            }
        }
    },
    "vars": {
        "dc_evse_status":{
            "description": "Current status of the EVSE",
            "type": "object"
        },
        "ev_target_voltage":{
            "description": "Target voltage (unit: V) requested by the EV",
            "type": "number",
            "minimum": 0,
            "maximum": 1000
        },
		"ev_target_current":{
            "description": "Instantaneous current (unit: A) requested by the EV",
            "type": "number",
            "minimum": 0,
            "maximum": 400
        },
		"ev_maximum_voltage_limit":{
            "description": "Maximum EV voltage (unit: V) limit",
            "type": "number",
            "minimum": 0,
            "maximum": 1000
        },
		"ev_maximum_current_limit":{
            "description": "Maximum EV current (unit: A) limit",
            "type": "number",
            "minimum": 0,
            "maximum": 400
        },
		"ev_maximum_power_limit":{
            "description": "Maximum EV power (unit: W) limit",
            "type": "number",
            "minimum": 0,
            "maximum": 200000
        },
        "ev_energy_capacity":{
            "description": "Optional: Energy capacity (unit: Wh) of the EV",
            "type": "number",
            "minimum": 0,
            "maximum": 200000
        },
        "ev_energy_request":{
            "description": "Optional: Amount of energy (unit: Wh) the EV requests from the EVSE",
            "type": "number",
            "minimum": 0,
            "maximum": 200000
        },
        "MISSING_bulk_charging_complete":{
            "description": "If set to true, the EV indicates that bulk charge (approx. 80% SOC) is complete.",
            "type": "boolean"
        },
        "MISSING_charging_complete":{
            "description": "If set to true, the EV indicates that full charge (100% SOC)is complete.",
            "type": "boolean"
        },
        "remaining_time_to_full_soc":{
            "description": "Optional: Estimated or calculated time (unit: s) until full charge (100% SOC) is complete.",
            "type": "integer",
            "minimum": 0,
            "maximum": 172800
        },
        "remaining_time_to_bulk_soc":{
            "description": "Optional: Estimated or calculated time (unit: s) until bulk charge (80% SOC) is complete.",
            "type": "integer",
            "minimum": 0,
            "maximum": 172800
        },
        "MISSING_ev_soc":{
            "description": "State of charge (soc) of the EV's battery.",
            "type": "integer",
            "minimum": 0,
            "maximum": 100
        },
        "MISSING_ev_ready_for_charging":{
            "description": "If set to TRUE, the EV is ready to charge.",
            "type": "boolean"
        },
        "MISSING_ev_dc_error_code":{
            "description": "Indicates the EV internal status.",
            "type": "string",
            "enum": ["NO_ERROR", "FAILED_RESSTemperatureInhibit", "FAILED_EV_ShiftPosition", "FAILED_ChargerConnerctorLockFault", "FAILED_EVRESSMalfunction", "FAILED_ChargingCurrentdifferential", "FAILED_ChargingVoltageOutOfRange", "Reserved A-C" ,"FAILED_ChargingSystemIncompatibility", "NoData"]
        },
        "MISSING_evccid":{
            "description": "Contains the MAC adress of the EVCC in a human readable format (six hexadecimal encoded bytes)",
            "type": "string",
            "pattern": "^[A-Fa-f0-9]{2}(:[A-Fa-f0-9]{2}){5}$"
        },
        "selected_payment_option":{
            "description": "Used for indicating the selected payment type for services invoked by the EVCC",
            "type": "string",
            "enum": ["Contract", "ExternalPayment"]
        },
        "MISSING_selected_service": {
            "description": "Used for indicating a service selected by the EVCC",
            "type": "object"
        },
        "requested_energy_tranfer_mode":{
            "description": "Energy transfer mode requested by the EVCC.",
            "type": "string",
            "enum": ["AC_single_phase_core", "AC_three_phase_core", "DC_core", "DC_extended", "DC_combo_core", "DC_unique"]
        },
        "MISSING_charge_progress": {
            "description": "This message element is used to request the EVSE to fulfill all conditions that the energy transfer can start as soon as the EV onboard system begins to retrieve energy. If ChargeProgress is equal to ‘Start’ the EVSE is requested to prepare the energy flow for an immediate start, if ChargeProgress is equal to ‘Stop’ the EVSE is requested to stop the energy flow, if ChargeProgress is equal to ‘Renegotiate’ the energy flow is neither stopped nor started, instead the renegotiation mechanisms defined in this standard apply.",
            "type": "string",
            "enum": ["Start", "Stop", "Renegotiate"]
        },
        "MISSING_emaid": {
            "description": "The e-Mobility Account Identifier (EMAID) identifies the charging contract.",
            "type": "string",
            "pattern": "^[A-Za-z]{2}\\*[A-Za-z0-9]{3}\\*[A-Za-z0-9]{9}\\*[A-Za-z0-9]{0,1}$"
        },
        "departure_time": {
            "description": "Optional: Is used to indicate when the vehicle intends to finish the charging process. Format: hh:mm:ss",
            "type": "integer"
        }
    }
}
