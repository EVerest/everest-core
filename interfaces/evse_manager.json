{
    "description": "This interface defines the main evse manager",
    "cmds": {
        "enable": {
            "description": "Enables the evse",
            "result": {
                "description": "Returns true if evse was enabled (or was enabled before), returns false if enable failed e.g. due to permanent fault.",
                "type": "boolean"
            }
        },
        "disable": {
            "description": "Disables the evse",
            "result": {
                "description": "Returns true if evse was disabled (or was disabled before), returns false if it could not be disabled (i.e. due to communication error with hardware)",
                "type": "boolean"
            }
        },
        "set_faulted": {
            "description": "Sets the evse manager to faulted",
            "result": {
                "description": "Returns true if evse was set to faulted (or is already in that state)",
                "type": "boolean"
            }
        },
        "pause_charging": {
            "description": "Pauses charging",
            "result": {
                "description": "Returns true if successfully paused or was already in paused_by_evse mode",
                "type": "boolean"
            }
        },
        "resume_charging": {
            "description": "Resumes charging",
            "result": {
                "description": "Returns true if resume was successful, false otherwise (e.g. resuming a car pause won't work)",
                "type": "boolean"
            }
        },
        "cancel_charging": {
            "description": "Cancels charging, can only be resumed by replugging car",
            "arguments": {
                "reason": {
                    "description": "Reason for session cancellation",
                    "type": "string",
                    "$ref": "/evse_manager#/SessionCancellationReason"
                }
            },
            "result": {
                "description": "Returns true if successful",
                "type": "boolean"
            }
        },
        "accept_new_session": {
            "description": "Call when cleanup is done and new cars are allowed to plugin. Do not use multiple cleanup handlers, call from only one module!",
            "result": {
                "description": "Returns true if successful",
                "type": "boolean"
            }
        },
        "reserve_now": {
            "description": "Reserves this evse for a given auth token. No support for parent id tags or id 0 reservations.",
            "arguments": {
                "reservation_id": {
                    "description": "Reservation id for this reservation",
                    "type": "integer"
                },
                "auth_token": {
                    "description": "The authentication token that this evse will be reserved for",
                    "type": "string"
                },
                "expiry_date": {
                    "description": "Absolute UTC time point when reservation expires (RFC3339 format)",
                    "type": "string",
                    "format": "date-time"
                },
                "parent_id": {
                    "description": "Parent id of the authentication token",
                    "type": "string"
                }
            },
            "result": {
                "description": "Returns Accepted if reservation was succesfull or specifies error code.",
                "type": "string",
                "$ref": "/evse_manager#/ReservationResult"
            }
        },
        "cancel_reservation": {
            "description": "Cancels current reservation",
            "result": {
                "description": "Returns true if reservation was cancelled. Returns false if there was no reservation to cancel.",
                "type": "boolean"
            }
        },
        "force_unlock": {
            "description": "Force unlock connector now. During normal operation, connector will be locked/unlocked in the correct sequence. Do not use this function except if explicitly requested by e.g. management cloud.",
            "result": {
                "description": "Returns true if unlocking sequence was successfully executed",
                "type": "boolean"
            }
        },
        "set_local_max_current": {
            "description": "Sets the local maximum current limit for any phase.",
            "arguments": {
                "max_current": {
                    "description": "maximum current",
                    "type": "number"
                }
            },
            "result": {
                "description": "Returns success or error code",
                "type": "string",
                "$ref": "/evse_manager#/SetLocalMaxCurrentResult"
            }
        },
        "switch_three_phases_while_charging": {
            "description": "Switch three phases while charging",
            "arguments": {
                "three_phases": {
                    "description": "True if switching three phases whilst charging, false if not",
                    "type": "boolean"
                }
            },
            "result": {
                "description": "Returns success or error code",
                "type": "string",
                "$ref": "/evse_manager#/SwitchThreePhasesWhileChargingResult"
            }
        },
        "get_signed_meter_value": {
            "description": "Returns a signed meter value. Includes current auth token if session is running.",
            "result": {
                "description": "Signed meter value",
                "type": "string"
            }
        }
    },
    "vars": {
        "session_events": {
            "description": "Emits all events related to sessions",
            "type": "object",
            "$ref": "/evse_manager#/SessionEvents"
        },
        "limits": {
            "description": "Limits of this evse, published on change",
            "type": "object",
            "$ref": "/evse_manager#/Limits"
        },
        "telemetry": {
            "description": "Other telemetry",
            "type": "object",
            "$ref": "/board_support#/Telemetry"
        },
        "powermeter": {
            "description": "Measured dataset",
            "type": "object",
            "$ref": "/powermeter#/Powermeter"
        },
        "evse_id": {
            "description": "EVSE ID including the connector number, e.g. DE*PNX*E123456*1",
            "type": "string"
        }
    }
}
