{
    "description": "This interface defines the main evse manager",
    "cmds": {
        "enable": {
            "description": "Enables the evse",
            "result": {
                "description": "Returns true if evse was enabled (or was enabled before), returns false if enable failed e.g. due to permanent fault.",
                "type": "boolean"
            }
        },
        "disable": {
            "description": "Disables the evse",
            "result": {
                "description": "Returns true if evse was disabled (or was disabled before), returns false if it could not be disabled (i.e. due to communication error with hardware)",
                "type": "boolean"
            }
        },
        "pause_charging": {
            "description": "Pauses charging",
            "result": {
                "description": "Returns true if successfully paused or was already in paused_by_evse mode",
                "type": "boolean"
            }
        },
        "resume_charging": {
            "description": "Resumes charging",
            "result": {
                "description": "Returns true if resume was successful, false otherwise (e.g. resuming a car pause won't work)",
                "type": "boolean"
            }
        },
        "cancel_charging": {
            "description": "Cancels charging, can only be resumed by replugging car",
            "result": {
                "description": "Returns true if successful",
                "type": "boolean"
            }
        },
        "accept_new_session": {
            "description": "Call when cleanup is done and new cars are allowed to plugin. Do not use multiple cleanup handlers, call from only one module!",
            "result": {
                "description": "Returns true if successful",
                "type": "boolean"
            }
        },
        "reserve_now": {
            "description": "Reserves this evse for a given auth token",
            "arguments": {
                "auth_token": {
                    "description": "The authentication token that this evse is reserved for",
                    "type": "string"
                },
                "timeout": {
                    "description": "timeout [s] until this reservation expires",
                    "type": "number"
                }
            },
            "result": {
                "description": "Indicates if reservation was successful or not",
                "type": "boolean"
            }
        },
        "cancel_reservation": {
            "description": "Cancels current reservation",
            "result": {
                "description": "Indicates if cancelling reservation was successful or not",
                "type": "boolean"
            }
        },
        "force_unlock": {
            "description": "Force unlock connector now. During normal operation, connector will be locked/unlocked in the correct sequence. Do not use this function except if explicitly requested by e.g. management cloud.",
            "result": {
                "description": "Returns true if unlocking sequence was successfully executed",
                "type": "boolean"
            }
        },
        "set_local_max_current": {
            "description": "Sets the local maximum current limit for any phase.",
            "arguments": {
                "max_current": {
                    "description": "maximum current",
                    "type": "number"
                }
            },
            "result": {
                "description": "Returns success or error code",
                "type": "string",
                "enum": [
                    "Success",
                    "Error_OutOfRange",
                    "Error_Hardware"
                ]
            }
        },
        "switch_three_phases_while_charging": {
            "description": "Switch three phases while charging",
            "arguments": {
                "three_phases": {
                    "description": "True if switching three phases whilst charging, false if not",
                    "type": "boolean"
                }
            },
            "result": {
                "description": "Returns success or error code",
                "type": "string",
                "enum": [
                    "Success",
                    "Error_NotSupported",
                    "Error_NotCharging",
                    "Error_Hardware"
                ]
            }
        },
        "get_signed_meter_value": {
            "description": "Returns a signed meter value. Includes current auth token if session is running.",
            "result": {
                "description": "Signed meter value",
                "type": "string"
            }
        }
    },
    "vars": {
        "session_events": {
            "description": "Emits all events related to sessions",
            "type": "object",
            "required": [
                "uuid",
                "event"
            ],
            "properties": {
                "uuid": {
                    "description": "An EVSE generated UUID for this session, can be used e.g. for database storage.",
                    "type": "string"
                },
                "event": {
                    "description": "Event enum. For some events an additional object is set, see below.",
                    "type": "string",
                    "enum": [
                        "Enabled", 
                        "Disabled", 
                        "SessionStarted", 
                        "AuthRequired", 
                        "ChargingStarted", 
                        "ChargingPausedEV", 
                        "ChargingPausedEVSE", 
                        "ChargingResumed", 
                        "SessionFinished", 
                        "Error", 
                        "PermanentFault"
                    ]
                },
                "session_started": {
                    "description": "data for SessionStarted event",
                    "type": "object",
                    "required": [
                        "timestamp",
                        "energy_Wh_import"
                    ],
                    "properties": {
                        "timestamp": {
                            "description": "Session start timestamp",
                            "type": "number"
                        },
                        "energy_Wh_import": {
                            "description": "Session start Wh",
                            "type": "number"
                        },
                        "energy_Wh_export": {
                            "description": "Session start Wh",
                            "type": "number"
                        },
                        "signed_meter_value": {
                            "description": "Signed meter value",
                            "type": "string"
                        }
                    },
                    "additionalProperties": false
                },
                "session_finished": {
                    "description": "data for SessionFinished event",
                    "type": "object",
                    "required": [
                        "timestamp",
                        "energy_Wh_import"
                    ],
                    "properties": {
                        "timestamp": {
                            "description": "Session end timestamp",
                            "type": "number"
                        },
                        "energy_Wh_import": {
                            "description": "Session end Wh",
                            "type": "number"
                        },
                        "energy_Wh_export": {
                            "description": "Session end Wh",
                            "type": "number"
                        },
                        "signed_meter_value": {
                            "description": "Signed meter value",
                            "type": "string"
                        }
                    },
                    "additionalProperties": false
                },
                "error": {
                    "description": "Details on error type",
                    "type": "string",
                    "enum": [
                        "Car",
                        "CarDiodeFault",
                        "Relais",
                        "RCD",
                        "VentilationNotAvailable",
                        "OverCurrent",
                        "Internal",
                        "SLAC",
                        "HLC"
                    ]
                }
            },
            "additionalProperties": false
        },
        "limits": {
            "description": "Limits of this evse, published on change",
            "type": "object",
            "required": [
                "max_current",
                "nr_of_phases_available"
            ],
            "properties": {
                "uuid": {
                    "description": "This module's UUID for global identification",
                    "type": "string"
                },
                "max_current": {
                    "description": "Instantaneous maximum current available to car",
                    "type": "number"
                },
                "nr_of_phases_available": {
                    "description": "Instantaneous phase count available to car",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 3
                }
            },
            "additionalProperties": false
        },
        "reservation": {
            "description": "Current reservation status, published on change",
            "type": "object",
            "required": [
                "reserved",
                "auth_token",
                "valid_until"
            ],
            "properties": {
                "reserved": {
                    "description": "true if currently reserved",
                    "type": "boolean"
                },
                "auth_token": {
                    "description": "token for which evse is reserved for",
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 20
                },
                "valid_until": {
                    "description": "timestamp (abs time) when reservation expires",
                    "type": "number"
                }
            },
            "additionalProperties": false
        },
        "telemetry": {
            "description": "Other telemetry",
            "type": "object",
            "properties": {
                "temperature": {
                    "description": "Current temperature of the EVSE in degree celsius",
                    "type": "number"
                },
                "fan_rpm": {
                    "description": "RPM of the fan. 0 if off or no fan available.",
                    "type": "number"
                },
                "supply_voltage_12V": {
                    "description": "Internal 12V supply voltage",
                    "type": "number"
                },
                "supply_voltage_minus_12V": {
                    "description": "Internal -12V supply voltage",
                    "type": "number"
                },
                "rcd_current": {
                    "description": "Residual current in mA",
                    "type": "number"
                },
                "relais_on": {
                    "description": "true if power to the car is currently on, false if off",
                    "type": "boolean"
                }
            },
            "additionalProperties": false
        },
        "powermeter": {
            "description": "FIXME: use powermeter type here",
            "type": "object"
        }
    }
}
