{
    "description": "This interface defines the main evse manager",
    "cmds": {
        "enable": {
            "description": "Enables the evse",
            "result": {
                "description": "Returns true if evse was enabled (or was enabled before), returns false if enable failed e.g. due to permanent fault.",
                "type": "boolean"
            }
        },
        "disable": {
            "description": "Disables the evse",
            "result": {
                "description": "Returns true if evse was disabled (or was disabled before), returns false if it could not be disabled (i.e. due to communication error with hardware)",
                "type": "boolean"
            }
        },
        "set_faulted": {
            "description": "Sets the evse manager to faulted",
            "result": {
                "description": "Returns true if evse was set to faulted (or is already in that state)",
                "type": "boolean"
            }
        },
        "pause_charging": {
            "description": "Pauses charging",
            "result": {
                "description": "Returns true if successfully paused or was already in paused_by_evse mode",
                "type": "boolean"
            }
        },
        "resume_charging": {
            "description": "Resumes charging",
            "result": {
                "description": "Returns true if resume was successful, false otherwise (e.g. resuming a car pause won't work)",
                "type": "boolean"
            }
        },
        "cancel_charging": {
            "description": "Cancels charging, can only be resumed by replugging car",
            "arguments": {
                "reason": {
                    "description": "Reason for session cancellation",
                    "type": "string",
                    "enum": [
                        "EmergencyStop",
                        "EVDisconnected",
                        "HardReset",
                        "Local",
                        "Other",
                        "PowerLoss",
                        "Reboot",
                        "Remote",
                        "SoftReset",
                        "UnlockCommand",
                        "DeAuthorized"
                    ]
                }
            },
            "result": {
                "description": "Returns true if successful",
                "type": "boolean"
            }
        },
        "accept_new_session": {
            "description": "Call when cleanup is done and new cars are allowed to plugin. Do not use multiple cleanup handlers, call from only one module!",
            "result": {
                "description": "Returns true if successful",
                "type": "boolean"
            }
        },
        "reserve_now": {
            "description": "Reserves this evse for a given auth token. No support for parent id tags or id 0 reservations.",
            "arguments": {
                "reservation_id": {
                    "description": "Reservation id for this reservation",
                    "type": "integer"
                },
                "auth_token": {
                    "description": "The authentication token that this evse will be reserved for",
                    "type": "string"
                },
                "expiry_date": {
                    "description": "Absolute UTC time point when reservation expires (RFC3339 format)",
                    "type": "string",
                    "format": "date-time"
                },
                "parent_id": {
                    "description": "Parent id of the authentication token",
                    "type": "string"
                }
            },
            "result": {
                "description": "Returns Accepted if reservation was succesfull or specifies error code.",
                "type": "string",
                "enum": [
                    "Accepted",
                    "Faulted",
                    "Occupied",
                    "Rejected",
                    "Unavailable"
                ]
            }
        },
        "cancel_reservation": {
            "description": "Cancels current reservation",
            "result": {
                "description": "Returns true if reservation was cancelled. Returns false if there was no reservation to cancel.",
                "type": "boolean"
            }
        },
        "force_unlock": {
            "description": "Force unlock connector now. During normal operation, connector will be locked/unlocked in the correct sequence. Do not use this function except if explicitly requested by e.g. management cloud.",
            "result": {
                "description": "Returns true if unlocking sequence was successfully executed",
                "type": "boolean"
            }
        },
        "set_local_max_current": {
            "description": "Sets the local maximum current limit for any phase.",
            "arguments": {
                "max_current": {
                    "description": "maximum current",
                    "type": "number"
                }
            },
            "result": {
                "description": "Returns success or error code",
                "type": "string",
                "enum": [
                    "Success",
                    "Error_OutOfRange",
                    "Error_Hardware"
                ]
            }
        },
        "switch_three_phases_while_charging": {
            "description": "Switch three phases while charging",
            "arguments": {
                "three_phases": {
                    "description": "True if switching three phases whilst charging, false if not",
                    "type": "boolean"
                }
            },
            "result": {
                "description": "Returns success or error code",
                "type": "string",
                "enum": [
                    "Success",
                    "Error_NotSupported",
                    "Error_NotCharging",
                    "Error_Hardware"
                ]
            }
        },
        "get_signed_meter_value": {
            "description": "Returns a signed meter value. Includes current auth token if session is running.",
            "result": {
                "description": "Signed meter value",
                "type": "string"
            }
        }
    },
    "vars": {
        "session_events": {
            "description": "Emits all events related to sessions",
            "type": "object",
            "required": [
                "uuid",
                "event"
            ],
            "properties": {
                "uuid": {
                    "description": "An EVSE generated UUID for this session, can be used e.g. for database storage.",
                    "type": "string"
                },
                "event": {
                    "description": "Event enum. For some events an additional object is set, see below.",
                    "type": "string",
                    "enum": [
                        "Enabled",
                        "Disabled",
                        "SessionStarted",
                        "AuthRequired",
                        "ChargingStarted",
                        "ChargingPausedEV",
                        "ChargingPausedEVSE",
                        "ChargingResumed",
                        "SessionFinished",
                        "SessionCancelled",
                        "Error",
                        "PermanentFault",
                        "ReservationStart",
                        "ReservationEnd",
                        "ReservationAuthtokenMismatch",
                        "ReplugStarted",
                        "ReplugFinished"
                    ]
                },
                "session_started": {
                    "description": "data for SessionStarted event",
                    "type": "object",
                    "required": [
                        "timestamp",
                        "energy_Wh_import"
                    ],
                    "properties": {
                        "timestamp": {
                            "description": "Session start timestamp",
                            "type": "number"
                        },
                        "energy_Wh_import": {
                            "description": "Session start Wh",
                            "type": "number"
                        },
                        "energy_Wh_export": {
                            "description": "Session start Wh",
                            "type": "number"
                        },
                        "signed_meter_value": {
                            "description": "Signed meter value",
                            "type": "string"
                        },
                        "reservation_id": {
                            "description": "Reservation Id",
                            "type": "number"
                        }
                    },
                    "additionalProperties": false
                },
                "session_finished": {
                    "description": "data for SessionFinished event that happens when car is plugged out",
                    "type": "object",
                    "required": [
                        "timestamp",
                        "energy_Wh_import"
                    ],
                    "properties": {
                        "timestamp": {
                            "description": "Session end timestamp",
                            "type": "number"
                        },
                        "energy_Wh_import": {
                            "description": "Session end Wh",
                            "type": "number"
                        },
                        "energy_Wh_export": {
                            "description": "Session end Wh",
                            "type": "number"
                        },
                        "signed_meter_value": {
                            "description": "Signed meter value",
                            "type": "string"
                        }
                    },
                    "additionalProperties": false
                },
                "session_cancelled": {
                    "description": "data for SessionCancelled event that happens when e.g. user cancels charging before plug out. Note that SessionFinished will always be generated on plugout.",
                    "type": "object",
                    "required": [
                        "timestamp",
                        "energy_Wh_import"
                    ],
                    "properties": {
                        "timestamp": {
                            "description": "Session cancel timestamp",
                            "type": "number"
                        },
                        "energy_Wh_import": {
                            "description": "Session cancel Wh",
                            "type": "number"
                        },
                        "energy_Wh_export": {
                            "description": "Session cancel Wh",
                            "type": "number"
                        },
                        "signed_meter_value": {
                            "description": "Signed meter value",
                            "type": "string"
                        },
                        "reason": {
                            "description": "Reason for session cancellation",
                            "type": "string",
                            "enum": [
                                "EmergencyStop",
                                "EVDisconnected",
                                "HardReset",
                                "Local",
                                "Other",
                                "PowerLoss",
                                "Reboot",
                                "Remote",
                                "SoftReset",
                                "UnlockCommand",
                                "DeAuthorized"
                            ]
                        }
                    },
                    "additionalProperties": false
                },
                "error": {
                    "description": "Details on error type",
                    "type": "string",
                    "enum": [
                        "Car",
                        "CarDiodeFault",
                        "Relais",
                        "RCD",
                        "VentilationNotAvailable",
                        "OverCurrent",
                        "Internal",
                        "SLAC",
                        "HLC"
                    ]
                },
                "reservation_start": {
                    "description": "Details on Reservation Start",
                    "type": "object",
                    "required": [
                        "reservation_id",
                        "id_tag"
                    ],
                    "properties": {
                        "reservation_id": {
                            "description": "reservation_id",
                            "type": "integer"
                        },
                        "id_tag": {
                            "description": "id tag of the reservation",
                            "type": "string"
                        },
                        "parent_id": {
                            "description": "parent_id",
                            "type": "string"
                        }
                    }
                },
                "reservation_end": {
                    "description": "Details on Reservation End",
                    "type": "object",
                    "required": [
                        "reason",
                        "reservation_id"
                    ],
                    "properties": {
                        "reason": {
                            "description": "Reason why reservation ends",
                            "type": "string",
                            "enum": [
                                "Expired",
                                "Cancelled",
                                "UsedToStartCharging"
                            ]
                        },
                        "reservation_id": {
                            "description": "reservation_id",
                            "type": "integer"
                        }
                    }
                }
            },
            "additionalProperties": false
        },
        "limits": {
            "description": "Limits of this evse, published on change",
            "type": "object",
            "required": [
                "max_current",
                "nr_of_phases_available"
            ],
            "properties": {
                "uuid": {
                    "description": "This module's UUID for global identification",
                    "type": "string"
                },
                "max_current": {
                    "description": "Instantaneous maximum current available to car",
                    "type": "number"
                },
                "nr_of_phases_available": {
                    "description": "Instantaneous phase count available to car",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 3
                }
            },
            "additionalProperties": false
        },
        "telemetry": {
            "description": "Other telemetry",
            "type": "object",
            "properties": {
                "temperature": {
                    "description": "Current temperature of the EVSE in degree celsius",
                    "type": "number"
                },
                "fan_rpm": {
                    "description": "RPM of the fan. 0 if off or no fan available.",
                    "type": "number"
                },
                "supply_voltage_12V": {
                    "description": "Internal 12V supply voltage",
                    "type": "number"
                },
                "supply_voltage_minus_12V": {
                    "description": "Internal -12V supply voltage",
                    "type": "number"
                },
                "rcd_current": {
                    "description": "Residual current in mA",
                    "type": "number"
                },
                "relais_on": {
                    "description": "true if power to the car is currently on, false if off",
                    "type": "boolean"
                }
            },
            "additionalProperties": false
        },
        "powermeter": {
            "description": "FIXME: use powermeter type here",
            "type": "object"
        },
        "evse_id": {
            "description": "EVSE ID including the connector number, e.g. DE*PNX*E123456*1",
            "type": "string"
        }
    }
}