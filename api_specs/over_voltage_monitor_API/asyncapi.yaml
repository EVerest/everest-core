---
asyncapi: 3.0.0
id: 'pionix:de:everest:over_voltage_monitor'
info:
  title: "EVerest API definition for the implementation of over voltage monitoring"
  version: 1.0.0
  description: >-
    API for EVerest API clients implementing over voltage monitoring.

    This EVerest API defines an fast over voltage monitoring device according
    to IEC61851-23:2023 6.3.1.106.2 for DC charging. An emergency shutdown needs to be triggered
    if the DC output voltage is above the limit of Table 103 for 9ms. The actual shutdown needs
    to be handled in a lower layer outside of EVerest, but via this API the
    correct voltage limit are set at the start of the session and the monitoring is stopped at the
    end of the session. The over voltage error should be reported after the actual
    shutdown was already performed.
    Once an over voltage error was raised, it should only be cleared when the reset_over_voltage_error command is called.
    All other errors should be raised/cleared when they occur/are no longer active immediately.
  license:
    name: Apache-2.0
    url: https://opensource.org/licenses/Apache-2.0
  tags:
    - name: EVerest
    - name: generic errors
servers:
  default:
    pathname: 'everest_api/1.0/over_voltage_monitor/{module_id}'
    host: 'localhost:1883'
    description: default local MQTT
    protocol: mqtt
    variables:
      module_id:
        description: The ID of the module as defined in the EVerest config file.
defaultContentType: application/json

channels:
  receive_start:
    address: 'e2m/start'
    messages:
      start:
        $ref: '#/components/messages/receive_start'
  receive_stop:
    address: 'e2m/stop'
    messages:
      start:
        $ref: '#/components/messages/receive_stop'
  receive_reset_over_voltage_error:
    address: 'e2m/reset_over_voltage_error'
    messages:
      reset_over_voltage_error:
        $ref: '#/components/messages/receive_reset_over_voltage_error'
  send_raise_error:
    address: 'm2e/raise_error'
    messages:
      send_raise_error:
        $ref: '#/components/messages/send_raise_error'
  send_clear_error:
    address: 'm2e/clear_error'
    messages:
      send_clear_error:
        $ref: '#/components/messages/send_clear_error'
  send_voltage_measurement_V:
    address: 'm2e/voltage_measurement_V'
    messages:
      send_voltage_measurement_V:
        $ref: '#/components/messages/send_voltage_measurement_V'

  send_communication_check:
    address: 'm2e/communication_check'
    messages:
      send_communication_check:
        $ref: '#/components/messages/send_communication_check'
  receive_heartbeat:
    address: 'e2m/heartbeat'
    messages:
      receive_heartbeat:
        $ref: '#/components/messages/receive_heartbeat'

operations:
  receive_start:
    title: Receive start over voltage monitoring command
    action: receive
    channel:
      $ref: '#/channels/receive_start'
    description: 'Direction: EVerest to Module'
  receive_stop:
    title: Reeive stop over voltage monitoring command
    action: receive
    channel:
      $ref: '#/channels/receive_stop'
    description: 'Direction: EVerest to Module'
  receive_reset_over_voltage_error:
    title: Receive reset command
    action: receive
    channel:
      $ref: '#/channels/receive_reset_over_voltage_error'
    description: 'Direction: EVerest to Module'
  send_voltage_measurement_V:
    title: Send measured voltage in V
    action: send
    channel:
      $ref: '#/channels/send_voltage_measurement_V'
    description: 'Direction: Module to EVerest'
  send_raise_error:
    title: Send raise error
    action: send
    channel:
      $ref: '#/channels/send_raise_error'
    description: 'Direction: Module to EVerest'
  send_clear_error:
    title: Send clear error
    action: send
    channel:
      $ref : '#/channels/send_clear_error'
  send_communication_check:
    title: Send communication check
    action: send
    channel:
      $ref : '#/channels/send_communication_check'
  receive_heartbeat:
    title: Receive heatbeat
    action: receive
    channel:
      $ref: '#/channels/receive_heartbeat'
    description: 'Direction: EVerest to Module'

components:
  messages:
    receive_start:
      title: Receive start over voltage monitoring command
      summary: Start over voltage monitoring.
      contentType: application/json
      payload:
        $ref: '#/components/schemas/OverVoltageLimitV'
      examples:
          - summary: ""
            payload:
              500
    receive_stop:
      title: Receive stop over voltage monitoring command
      summary: Stop over voltage monitoring at the end of the power transfer.
    receive_reset_over_voltage_error:
      title: Receive reset command
      summary: >-
        Resets the detection logic to allow for new charging session after an over voltage error occured.
        This should clear the over voltage error.
        If monitoring is still active, it should be stopped.
    send_voltage_measurement_V:
      title: Send voltage measurement
      summary: Send the current voltage measurement to EVerest
      contentType: application/json
      payload:
        $ref: '#/components/schemas/VoltageMeasurementV'
      examples:
          - summary: ""
            payload: 500

    send_raise_error:
      title: Send raise error
      summary: Signal to EVerest that an error happened.
      contentType: application/json
      payload:
        $ref: '#/components/schemas/Error'
      examples:
          - summary: "Raise error example"
            payload:
                "type": "CommunicationFault"
                "sub_type": "subtype"
                "message": "message"
    send_clear_error:
      title: Send clear error
      summary: Signal to EVerest that a previously raised error is no longer active.
      contentType: application/json
      payload:
        $ref: '#/components/schemas/Error'
      examples:
          - summary: "Raise error example"
            payload:
                "type": "CommunicationFault"
                "sub_type": "subtype"
                "message": "message"
    send_communication_check:
      title: Send communication check
      summary: Signal to EVerest that communication is good or check shall be stopped
      contentType: application/json
      payload:
        $ref: '#/components/schemas/CommunicationCheck'
      examples:
        - summary: "CommunicationCheck"
          payload:
            True
    receive_heartbeat:
      title: Receive heartbeat
      summary: Heartbeat produced by EVerest as configured via cfg_heartbeat_interval_ms in the EVerest configuration
      contentType: application/json

  schemas:
    OverVoltageLimitV:
      description: >-
          Specifies the over voltage threshold [V] (based on IEC61851-23:2023 Table 103)
          An emergency shutdown should be triggered if the DC output voltage is higher
          than this value.
      type: number
    VoltageMeasurementV:
      description: >-
        The voltage measurment should be published in regular intervals,
        e.g. 1 second. It is not  used to compare it with the overvoltage threshold
        setting in EVerest, that has to be done in the OVM device itself.
        It will only used to validate that the OVM and the IMD see the same voltage
        to ensure they are correctly wired to the same charging port.
        If it is not availble in hardware, do not publish the voltage_measurement_V at all.
      type: number
    ErrorEnum:
      description: |
        Type of error
        - MREC5OverVoltage: The output voltage was above IEC61851-23:2023 6.3.1.106.2 Table 103 limits for more than 9ms.
        - DeviceFault: The over voltage monitoring device is no longer functional.
        - CommunicationFault: The communication to the hardware or underlying driver is lost or has errors.
        - VendorError: Vendor specific error code. Will stop charging session.
        - VendorWarning: Vendor specific error code. Charging may continue.

      type: string
      enum:
        - MREC5OverVoltage
        - DeviceFault
        - CommunicationFault
        - VendorError
        - VendorWarning
    Error:
      description: >-
        Errors for the power_supply_DC interface.
        Except for VendorWarning, all error codes will stop the charging session.
        During all errors, follow the commands for setMode and setVoltageCurrent from EvseManager.
        If they cannot be sent to the hardware, cache the last values received.
        Once the PSU is back on-line (e.g. after a CommunicationFault), set the last mode and voltage/current
        values and only after that clear the error.
      type: object
      additionalProperties: true
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/ErrorEnum'
        sub_type:
          description: The subtype of the error
          type: string
        message:
          description: Addition information about the error
          type: string

    CommunicationCheck:
      type: boolean
      description: "Send 'true' at least every 'cfg_communication_check_to_s' seconds to signal module is alive. Send 'false' to stop communication check'"
